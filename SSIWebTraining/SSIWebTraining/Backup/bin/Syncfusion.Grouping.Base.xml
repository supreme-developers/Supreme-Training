<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Grouping.Base</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.GroupingBaseAssembly">
            <exclude/>
            <summary>
            This class holds the name of the Syncfusion.Grouping.Base assembly and provides a helper
            routine that helps with resolving types when loading a serialization stream and when
            the framework probes for assemblies by reflection.
            </summary>
        </member>
        <member name="F:Syncfusion.GroupingBaseAssembly.Name">
            <summary>
            The full name of this assembly without version information: "Syncfusion.Grouping.Base".
            </summary>
        </member>
        <member name="F:Syncfusion.GroupingBaseAssembly.Assembly">
            <summary>
            A reference to the <see cref="T:System.Reflection.Assembly"/> for the grid assembly.
            </summary>
        </member>
        <member name="F:Syncfusion.GroupingBaseAssembly.RootNamespace">
            <summary>
            The root namespace of this assembly. Used internally for locating resources within the assembly.
            </summary>
        </member>
        <member name="M:Syncfusion.GroupingBaseAssembly.AssemblyResolver(System.Object,System.ResolveEventArgs)">
            <summary>
            This delegate helps with resolving types and can be used as an event handler
            for a <see cref="E:System.AppDomain.AssemblyResolve"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data with information about the type.</param>
            <returns>A reference to the assembly where the type is located.</returns>
            <remarks>
            Use this handler when reading back types from a serialization stream
            saved with an earlier version of this assembly.
            </remarks>
            <example>
            <code lang="C#">
                    public static GridModel LoadSoap(Stream s)
                    {
                        try
                        {
                            AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(GridAssembly.AssemblyResolver);
                            SoapFormatter b = new SoapFormatter();
                            b.AssemblyFormat = FormatterAssemblyStyle.Simple;
                            GridModel t = b.Deserialize(s) as GridModel;
                            t.Modified = false;
                            return t;
                        }
                        finally
                        {
                            AppDomain.CurrentDomain.AssemblyResolve -= new ResolveEventHandler(GridAssembly.AssemblyResolver);
                        }
                    }
            <para/>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Grouping.Utilities.IsSecurityPermissionAvailable">
            <summary>
            Calls SecurityPermission.Demand to find out if SecurityPermission is available.
            </summary>
            <returns>
            <c>true</c> if [is security permission available]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Syncfusion.Grouping.GroupingConfig">
            <summary>
            Configuration class for the grouping library. In the current version, there are no explicit settings.
            Adding this component from the toolbar allows you to easily configure your project for grouping support.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.GroupingConfig.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.GroupingConfig.Copyright">
            <summary>
            Copyright notice for the library.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.GroupsInDetailsCollection">
            <summary>
            A Read-only collection of <see cref="T:Syncfusion.Grouping.Group"/> elements that are children of a <see cref="T:Syncfusion.Grouping.GroupsDetails"/> section.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.GroupsDetails.Groups"/> property
            of a <see cref="T:Syncfusion.Grouping.GroupsDetails"/> object. The <see cref="P:Syncfusion.Grouping.Group.Groups"/> property of a <see cref="T:Syncfusion.Grouping.Group"/> does also
            return an instance of this collection if the group's details section contains groups (and not records). Otherwise an
            empty collection is returned.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.GroupsInDetailsCollection.Empty">
            <summary>
            A Read-only empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.GroupsInDetailsCollection.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.GroupsInDetailsCollection.FindGroup(System.Object)">
            <overload>
            Searches for the specified category and returns the zero-based index of the occurrence.
            </overload>
            <summary>
            Searches for the specified category and returns the zero-based index of the occurrence.
            </summary>
            <param name="category">The category key.</param>
            <returns>
            The zero-based index of the occurrence of the category within the entire <see cref="T:Syncfusion.Grouping.GroupsInDetailsCollection"/>, if found; otherwise, -1.
            </returns>
            <example>
            <code lang="C#">
            public Form1()
            {
                //
                // Required for Windows Form Designer support
                //
                InitializeComponent();
            <para/>
                this.groupingGrid1.ShowNavigationBar = true;
                this.groupingGrid1.TableControl.HorizontalScrollTips = false;
                this.groupingGrid1.BorderStyle = BorderStyle.FixedSingle;
                this.groupingGrid1.FilterRuntimeProperties = true;
             <para/>
                DataSet ds = new DataSet();
                ReadXml(ds, @"Data\Expand.xml");
             <para/>
                ds.Tables[1].TableName = "Products";
                ds.Tables[2].TableName = "OrderDetails";
                ds.Tables[3].TableName = "Suppliers";
             <para/>
                ds.Relations.Add(
                    ds.Tables[0].Columns["CategoryID"],
                    ds.Tables[1].Columns["CategoryID"]);
                ds.Relations[0].RelationName = "Category_Products";
             <para/>
                ds.Relations.Add(
                    ds.Tables[1].Columns["ProductID"],
                    ds.Tables[2].Columns["ProductID"]);
                ds.Relations[1].RelationName = "Products_OrderDetails";
             <para/>
                this.groupingGrid1.DataSource = ds.Tables[0];
                Table categoriesTable = groupingGrid1.GetTable("Categories");
                Console.WriteLine(categoriesTable.ToString());
             <para/>
                Table productsTable = categoriesTable.RelatedTables["Products"];
                Console.WriteLine(productsTable.ToString());
             <para/>
                ChildTable product1 = (ChildTable) productsTable.TopLevelGroup.Groups["1"];
                Console.WriteLine(product1.ToString());
                Console.WriteLine(product1.Records[0].ToString());
             <para/>
                ChildTable product21 = (ChildTable) productsTable.TopLevelGroup.Groups["8"];
                Console.WriteLine(product21.ToString());
                Console.WriteLine(product21.Records[0].ToString());
            }
            </code>
            <code lang="VB">
             <para/>
             <para/>
            Public Sub New() '
                '
                ' Required for Windows Form Designer support
                '
                InitializeComponent()
             <para/>
                Me.groupingGrid1.ShowNavigationBar = True
                Me.groupingGrid1.TableControl.HorizontalScrollTips = False
                Me.groupingGrid1.BorderStyle = BorderStyle.FixedSingle
                Me.groupingGrid1.FilterRuntimeProperties = True
             <para/>
                Dim ds As New DataSet()
                ReadXml(ds, "Data\Expand.xml")
            <para/> 
                ds.Tables(1).TableName = "Products"
                ds.Tables(2).TableName = "OrderDetails"
                ds.Tables(3).TableName = "Suppliers"
             <para/>
                ds.Relations.Add(ds.Tables(0).Columns("CategoryID"), ds.Tables(1).Columns("CategoryID"))
                ds.Relations(0).RelationName = "Category_Products"
             <para/>
                ds.Relations.Add(ds.Tables(1).Columns("ProductID"), ds.Tables(2).Columns("ProductID"))
                ds.Relations(1).RelationName = "Products_OrderDetails"
            <para/> 
                Me.groupingGrid1.DataSource = ds.Tables(0)
                Dim categoriesTable As Table = groupingGrid1.GetTable("Categories")
                Console.WriteLine(categoriesTable.ToString())
                Dim productsTable As Table = categoriesTable.RelatedTables("Products")
                Console.WriteLine(productsTable.ToString())
                Dim product1 As ChildTable = CType(productsTable.TopLevelGroup.Groups("1"), ChildTable)
                Console.WriteLine(product1.ToString())
                Console.WriteLine(product1.Records(0).ToString())
                Dim product21 As ChildTable = CType(productsTable.TopLevelGroup.Groups("8"), ChildTable)
                Console.WriteLine(product21.ToString())
                Console.WriteLine(product21.Records(0).ToString())
            End Sub 'New
            </code>
            </example>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.GroupsInDetailsCollection.FindGroup(System.Object[])">
            <summary>
            Searches for the specified category and returns the zero-based index of the occurrence.
            </summary>
            <param name="categoryKeys">The array of objects that identify the category.</param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
            <returns>returns the zero-based index of the occurrence</returns>
        </member>
        <member name="M:Syncfusion.Grouping.GroupsInDetailsCollection.FindHighestSmallerOrEqualKey(System.Object)">
            <summary>
            Returns the group that matches the category or the nearest group with a category key that 
            is smaller than the specified category key.
            </summary>
            <param name="category">The category key.</param>
            <returns>
            The zero-based index of the occurrence of the category within the entire <see cref="T:Syncfusion.Grouping.GroupsInDetailsCollection"/>, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.GroupsInDetailsCollection.FindLowestHigherOrEqualKey(System.Object)">
            <summary>
            Returns the group that matches the category or the nearest group with a category key that 
            is higher than the specified category key.
            </summary>
            <param name="category">The category key.</param>
            <returns>
            The zero-based index of the occurrence of the category within the entire <see cref="T:Syncfusion.Grouping.GroupsInDetailsCollection"/>, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.GroupsInDetailsCollection.Contains(System.String)">
            <summary>
            Searches for the specified category and returns True if it was found.
            </summary>
            <param name="category">Category key.</param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
            <returns>returns True if it was found</returns>
        </member>
        <member name="M:Syncfusion.Grouping.GroupsInDetailsCollection.IndexOf(System.String)">
            <summary>
            Searches for the specified category and returns the zero-based index of the occurrence or -1 if not found.
            </summary>
            <param name="category">Category key.</param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
            <returns>returns the zero-based index of the occurrence</returns>
        </member>
        <member name="M:Syncfusion.Grouping.GroupsInDetailsCollection.Contains(Syncfusion.Grouping.Group)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.GroupsInDetailsCollection.IndexOf(Syncfusion.Grouping.Group)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.GroupsInDetailsCollection.Remove(Syncfusion.Grouping.Group)">
            <summary>
            Removes the group.
            </summary>
            <param name="value">Group to remove.</param>
        </member>
        <member name="M:Syncfusion.Grouping.GroupsInDetailsCollection.CopyTo(Syncfusion.Grouping.Group[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ArrayList. The Array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.GroupsInDetailsCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.GroupsInDetailsCollection.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Not supported because collection is Read-only.
            </summary>
            <param name="index">The index of the list</param>
        </member>
        <member name="P:Syncfusion.Grouping.GroupsInDetailsCollection.Item(System.Int32)">
            <summary>
            Gets the group at the specified non-zero based index.
            Setting is not supported and will throw an exception since the collection is Read-only.
            </summary>
            <param name="index">Item index.</param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.GroupsInDetailsCollection.Item(System.String)">
            <summary>
            Searches for the specified category and returns the found group.
            </summary>
            <param name="category">Category index.</param>
            <example>
            <code lang="C#">
            public Form1()
            {
                //
                // Required for Windows Form Designer support
                //
                InitializeComponent();
            <para/>
                this.groupingGrid1.ShowNavigationBar = true;
                this.groupingGrid1.TableControl.HorizontalScrollTips = false;
                this.groupingGrid1.BorderStyle = BorderStyle.FixedSingle;
                this.groupingGrid1.FilterRuntimeProperties = true;
             <para/>
                DataSet ds = new DataSet();
                ReadXml(ds, @"Data\Expand.xml");
            <para/> 
                ds.Tables[1].TableName = "Products";
                ds.Tables[2].TableName = "OrderDetails";
                ds.Tables[3].TableName = "Suppliers";
            <para/> 
                ds.Relations.Add(
                    ds.Tables[0].Columns["CategoryID"],
                    ds.Tables[1].Columns["CategoryID"]);
                ds.Relations[0].RelationName = "Category_Products";
            <para/> 
                ds.Relations.Add(
                    ds.Tables[1].Columns["ProductID"],
                    ds.Tables[2].Columns["ProductID"]);
                ds.Relations[1].RelationName = "Products_OrderDetails";
            <para/> 
                this.groupingGrid1.DataSource = ds.Tables[0];
                Table categoriesTable = groupingGrid1.GetTable("Categories");
                Console.WriteLine(categoriesTable.ToString());
             <para/>
                Table productsTable = categoriesTable.RelatedTables["Products"];
                Console.WriteLine(productsTable.ToString());
             <para/>
                ChildTable product1 = (ChildTable) productsTable.TopLevelGroup.Groups["1"];
                Console.WriteLine(product1.ToString());
                Console.WriteLine(product1.Records[0].ToString());
             <para/>
                ChildTable product21 = (ChildTable) productsTable.TopLevelGroup.Groups["8"];
                Console.WriteLine(product21.ToString());
                Console.WriteLine(product21.Records[0].ToString());
            }
            </code>
            <code lang="VB">
             <para/>
             <para/>
            Public Sub New() '
                '
                ' Required for Windows Form Designer support
                '
                InitializeComponent()
             <para/>
                Me.groupingGrid1.ShowNavigationBar = True
                Me.groupingGrid1.TableControl.HorizontalScrollTips = False
                Me.groupingGrid1.BorderStyle = BorderStyle.FixedSingle
                Me.groupingGrid1.FilterRuntimeProperties = True
            <para/> 
                Dim ds As New DataSet()
                ReadXml(ds, "Data\Expand.xml")
             <para/>
                ds.Tables(1).TableName = "Products"
                ds.Tables(2).TableName = "OrderDetails"
                ds.Tables(3).TableName = "Suppliers"
             <para/>
                ds.Relations.Add(ds.Tables(0).Columns("CategoryID"), ds.Tables(1).Columns("CategoryID"))
                ds.Relations(0).RelationName = "Category_Products"
             <para/>
                ds.Relations.Add(ds.Tables(1).Columns("ProductID"), ds.Tables(2).Columns("ProductID"))
                ds.Relations(1).RelationName = "Products_OrderDetails"
             <para/>
                Me.groupingGrid1.DataSource = ds.Tables(0)
                Dim categoriesTable As Table = groupingGrid1.GetTable("Categories")
                Console.WriteLine(categoriesTable.ToString())
                Dim productsTable As Table = categoriesTable.RelatedTables("Products")
                Console.WriteLine(productsTable.ToString())
                Dim product1 As ChildTable = CType(productsTable.TopLevelGroup.Groups("1"), ChildTable)
                Console.WriteLine(product1.ToString())
                Console.WriteLine(product1.Records(0).ToString())
                Dim product21 As ChildTable = CType(productsTable.TopLevelGroup.Groups("8"), ChildTable)
                Console.WriteLine(product21.ToString())
                Console.WriteLine(product21.Records(0).ToString())
            End Sub 'New
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Grouping.GroupsInDetailsCollection.IsReadOnly">
            <summary>
            Returns True because this collection is always Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.GroupsInDetailsCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.GroupsInDetailsCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.GroupsInDetailsCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. The property also
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            </summary>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="T:Syncfusion.Grouping.GroupsInDetailsCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.Group"/> elements of a <see cref="T:Syncfusion.Grouping.GroupsInDetailsCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.GroupsInDetailsCollectionEnumerator.#ctor(Syncfusion.Grouping.GroupsInDetailsCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.GroupsInDetailsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.GroupsInDetailsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.GroupsInDetailsCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.GroupTypedListRecordsCollection">
             <summary>For internal use.</summary>
             <internalonly/>
            
        </member>
        <member name="M:Syncfusion.Grouping.GroupTypedListRecordsCollection.#ctor(Syncfusion.Grouping.Group)">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupTypedListRecordsCollection.CopyTo(Syncfusion.Grouping.Record[],System.Int32)">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupTypedListRecordsCollection.GetEnumerator">
            <summary>
            For internal use.
            </summary>
            <returns>returns FlattenedRecordsInGroupCollectionEnumerator</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupTypedListRecordsCollection.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            For internal use.
            </summary>
            <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor"/> objects to find in the collection as bindable. This can be null.</param>
            <returns>
            The <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the properties on each item used to bind data.
            </returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupTypedListRecordsCollection.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            For internal use.
            </summary>
            <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor"/> objects, for which the list name is returned. This can be null.</param>
            <returns>The name of the list.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupTypedListRecordsCollection.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupTypedListRecordsCollection.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupTypedListRecordsCollection.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            For internal use.
            </summary>
            <returns>
            The index of the row that has the given <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            </returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupTypedListRecordsCollection.RemoveSort">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupTypedListRecordsCollection.AddNew">
            <summary>
            For internal use.
            </summary>
            <returns>The item added to the list.</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupTypedListRecordsCollection.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupTypedListRecordsCollection.RemoveAt(System.Int32)">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupTypedListRecordsCollection.Insert(System.Int32,System.Object)">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupTypedListRecordsCollection.Remove(System.Object)">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupTypedListRecordsCollection.Contains(System.Object)">
            <summary>
            For internal use.
            </summary>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupTypedListRecordsCollection.Clear">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupTypedListRecordsCollection.IndexOf(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupTypedListRecordsCollection.Add(System.Object)">
            <summary>For internal use.</summary>
            <returns>returns -1</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupTypedListRecordsCollection.Dispose">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupTypedListRecordsCollection.Group">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupTypedListRecordsCollection.Item(System.Int32)">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupTypedListRecordsCollection.AllowNew">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupTypedListRecordsCollection.SortProperty">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupTypedListRecordsCollection.SupportsSorting">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupTypedListRecordsCollection.IsSorted">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupTypedListRecordsCollection.AllowRemove">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupTypedListRecordsCollection.SupportsSearching">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupTypedListRecordsCollection.SortDirection">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupTypedListRecordsCollection.SupportsChangeNotification">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupTypedListRecordsCollection.AllowEdit">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupTypedListRecordsCollection.IsReadOnly">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupTypedListRecordsCollection.IsFixedSize">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupTypedListRecordsCollection.IsSynchronized">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupTypedListRecordsCollection.Count">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupTypedListRecordsCollection.SyncRoot">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection">
            <summary>
            A collection of primaryKeySorted <see cref="T:Syncfusion.Grouping.Record"/> elements that are children of a <see cref="T:Syncfusion.Grouping.Table"/> and
            represent the original records in the same order as the underlying data source. The collection
            provides support for determining a record's underlying position in the datasource using the <see cref="M:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.IndexOf(System.String)"/>
            method.<para/>
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.Table.PrimaryKeySortedRecords"/> property
            of a <see cref="T:Syncfusion.Grouping.Table"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.Dispose">
            <summary>
            Disposes the object and releases internal objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.FindRecord(System.Object)">
            <summary>
            Searches for the first occurrence of a record that matches the specified sortkey and returns the zero-based index of the first occurrence found or -1 if not found.
            </summary>
            <param name="sortKey">The sort key to search for. The object will be compared to the sorted fields in the table as specified with <see cref="P:Syncfusion.Grouping.TableDescriptor.SortedColumns"/>.</param>
            <returns>Record index.</returns>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.FindRecord(System.Object[])">
            <summary>
            Searches for the first occurrence of a record that matches the specified sortkeys and returns the zero-based index of the first occurrence found or -1 if not found.
            </summary>
            <param name="sortKeys">The sort keys to search for. The object will be compared to the sorted fields in the table as specified with <see cref="P:Syncfusion.Grouping.TableDescriptor.SortedColumns"/>. The sortKeys
            must have the same order of fields as the <see cref="P:Syncfusion.Grouping.TableDescriptor.SortedColumns"/> collection. </param>
            <returns>Record index.</returns>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
            <example>
            <code lang="C#">
            product21.ParentTable.TableDescriptor.PrimaryKeyColumns.Add("ProductName");
            product21.ParentTable.TableDescriptor.PrimaryKeyColumns.Add("SupplierID");
            int sp = product21.PrimaryKeySortedRecords.FindRecord("Spegesild", "21");
            product21.Records["Spegesild"].SetCurrent();
            </code>
            <code lang="VB">
            product21.ParentTable.TableDescriptor.PrimaryKeyColumns.Add("ProductName")
            product21.ParentTable.TableDescriptor.PrimaryKeyColumns.Add("SupplierID")
            Dim sp As Integer = product21.PrimaryKeySortedRecords.FindRecord("Spegesild", "21")
            product21.Records("Spegesild").SetCurrent()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.Contains(System.String)">
            <summary>
            Determines if a record exists in the collection that matches the sortkey.
            </summary>
            <param name="sortKey">The sort key to search for. The sortKey will be compared to the sorted field in the table as specified with <see cref="P:Syncfusion.Grouping.TableDescriptor.SortedColumns"/>.</param>
            <returns>
            <c>true</c> if [contains] [the specified sort key]; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.IndexOf(System.String)">
            <summary>
            Searches for the first occurrence of a record that matches the sortkey and returns the zero-based index of the first occurrence found or -1 if not found.
            </summary>
            <param name="sortKey">The sort key to search for. The sortKey will be compared to the sorted field in the table as specified with <see cref="P:Syncfusion.Grouping.TableDescriptor.SortedColumns"/>.</param>
            <returns>returns first occurrence of a record.</returns>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.Contains(Syncfusion.Grouping.Record)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.IndexOf(Syncfusion.Grouping.Record)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.CopyTo(Syncfusion.Grouping.Record[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ArrayList. The Array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading of the data in the collection.
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Not supported because collection is Read-only.
            </summary>
            <param name="index">The index in the list</param>
        </member>
        <member name="M:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.GetNext(Syncfusion.Grouping.Record)">
            <summary>
            Returns the next record in the collection.
            </summary>
            <param name="r">The Record.</param>
            <returns>Next record.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.GetPrevious(Syncfusion.Grouping.Record)">
            <summary>
            Returns the previous record in the collection.
            </summary>
            <param name="r">The Record.</param>
            <returns>Previous record.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.FixPrimaryKeyPosition(Syncfusion.Grouping.Record)">
            <summary>
            Fixes the primary key sort position of the record after the value was changed.
            </summary>
            <param name="r">The Record.</param>
        </member>
        <member name="M:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.Add(Syncfusion.Grouping.Record)">
            <summary>
            Adds the given record into the collection.
            </summary>
            <param name="record">Record to add.</param>
            <returns>returns Index.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.Remove(Syncfusion.Grouping.Record)">
            <summary>
            Removes the record from primary keys tree.
            </summary>
            <param name="r">Record to remove.</param>
        </member>
        <member name="P:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.Item(System.String)">
            <summary>
            Searches for the first occurrence of a record that matches the sortkey and returns the record found or NULL if not found.
            </summary>
            <param name="sortKey">The sort key to search for. The sortKey will be compared to the sorted field in the table as specified with <see cref="P:Syncfusion.Grouping.TableDescriptor.SortedColumns"/>.</param>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.Item(System.Int32)">
            <summary>
            Gets the element at the zero-based index.
            Setting is not supported and will throw an exception since the collection is Read-only.
            </summary>
            <param name="index">The Index.</param>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.IsReadOnly">
            <summary>
            Returns True because this collection is always Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. The property also
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            </summary>
            <remarks>
            The method calls <see cref="M:Syncfusion.Grouping.Table.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="T:Syncfusion.Grouping.PrimaryKeySortedRecordsCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.Record"/> elements of a <see cref="T:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.PrimaryKeySortedRecordsCollectionEnumerator.#ctor(Syncfusion.Grouping.PrimaryKeySortedRecordsCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.PrimaryKeySortedRecordsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.PrimaryKeySortedRecordsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.PrimaryKeySortedRecordsCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RecordPartInRecordCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Grouping.RecordPart"/> elements that are children of a <see cref="T:Syncfusion.Grouping.Record"/>.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.Record.RecordParts"/> property
            of a <see cref="T:Syncfusion.Grouping.Record"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPartInRecordCollection.Dispose">
            <summary>
            Disposes of the object.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPartInRecordCollection.Contains(Syncfusion.Grouping.RecordPart)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPartInRecordCollection.IndexOf(Syncfusion.Grouping.RecordPart)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPartInRecordCollection.CopyTo(Syncfusion.Grouping.RecordPart[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPartInRecordCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPartInRecordCollection.Insert(System.Int32,Syncfusion.Grouping.RecordPart)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="recordPart">The element to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPartInRecordCollection.Remove(Syncfusion.Grouping.RecordPart)">
            <summary>
            Removes the specified element from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPartInRecordCollection.Add(Syncfusion.Grouping.RecordPart)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
            <param name="recordPart">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPartInRecordCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove. </param>
        </member>
        <member name="P:Syncfusion.Grouping.RecordPartInRecordCollection.Item(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index.
            </summary>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.RecordPartInRecordCollection.IsReadOnly">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordPartInRecordCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordPartInRecordCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordPartInRecordCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. The property also
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            </summary>
            <remarks>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/> of the <see cref="T:Syncfusion.Grouping.Record"/>.
            </remarks>
        </member>
        <member name="T:Syncfusion.Grouping.RecordPartInRecordCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.RecordPart"/> elements of a <see cref="T:Syncfusion.Grouping.RecordPartInRecordCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPartInRecordCollectionEnumerator.#ctor(Syncfusion.Grouping.RecordPartInRecordCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPartInRecordCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPartInRecordCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.RecordPartInRecordCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RecordsInDetailsCollection">
            <summary>
            A Read-only collection of <see cref="T:Syncfusion.Grouping.Record"/> elements that are children of a <see cref="T:Syncfusion.Grouping.RecordsDetails"/> section.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.RecordsDetails.Records"/> property
            of a <see cref="T:Syncfusion.Grouping.RecordsDetails"/> object. The <see cref="P:Syncfusion.Grouping.Group.Records"/> property of a <see cref="T:Syncfusion.Grouping.Group"/> also
            returns an instance of this collection if the group's details section contains records (and not groups). Otherwise an
            empty collection is returned.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.RecordsInDetailsCollection.Empty">
            <summary>
            A Read-only and empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInDetailsCollection.Dispose">
            <summary>
            Disposes the object and resets reference to objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInDetailsCollection.FindRecord(System.Object)">
            <summary>
            Searches for the first occurrence of a record that matches the specified sortkey and returns the zero-based index of the first occurrence found or -1 if not found.
            </summary>
            <param name="sortKey">The sort key to search for. The object will be compared to the sorted fields in the table as specified with <see cref="P:Syncfusion.Grouping.TableDescriptor.SortedColumns"/>.</param>
            <returns>Index of the record.</returns>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInDetailsCollection.FindRecord(System.Object[])">
            <summary>
            Searches for the first occurrence of a record that matches the specified sortkeys and returns the zero-based index of the first occurrence found or -1 if not found.
            </summary>
            <param name="sortKeys">The sort keys to search for. The object will be compared to the sorted fields in the table as specified with <see cref="P:Syncfusion.Grouping.TableDescriptor.SortedColumns"/>. The sortKeys
            must have the same order of fields as the <see cref="P:Syncfusion.Grouping.TableDescriptor.SortedColumns"/> collection. </param>
            <returns>Record index.</returns>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
            <example>
            <code lang="C#">
            product21.ParentTable.TableDescriptor.SortedColumns.Add("ProductName");
            product21.ParentTable.TableDescriptor.SortedColumns.Add("SupplierID");
            int sp = product21.Records.FindRecord("Spegesild", "21");
            product21.Records["Spegesild"].SetCurrent();
            </code>
            <code lang="VB">
            product21.ParentTable.TableDescriptor.SortedColumns.Add("ProductName")
            product21.ParentTable.TableDescriptor.SortedColumns.Add("SupplierID")
            Dim sp As Integer = product21.Records.FindRecord("Spegesild", "21")
            product21.Records("Spegesild").SetCurrent()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInDetailsCollection.Contains(System.String)">
            <summary>
            Determines if a record exists in the collection that matches the sortkey.
            </summary>
            <param name="sortKey">The sort key to search for. The sortKey will be compared to the sorted field in the table as specified with <see cref="P:Syncfusion.Grouping.TableDescriptor.SortedColumns"/>.</param>
            <returns>True if the record exists; False otherwise.</returns>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInDetailsCollection.IndexOf(System.String)">
            <summary>
            Searches for the first occurrence of a record that matches the sortkey and returns the zero-based index of the first occurrence found or -1 if not found.
            </summary>
            <param name="sortKey">The sort key to search for. The sortKey will be compared to the sorted field in the table as specified with <see cref="P:Syncfusion.Grouping.TableDescriptor.SortedColumns"/>.</param>
            <returns>Record index.</returns>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInDetailsCollection.GetNext(Syncfusion.Grouping.Record)">
            <summary>
            Returns the next record in the collection.
            </summary>
            <param name="r">The Record.</param>
            <returns>Next record.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInDetailsCollection.GetPrevious(Syncfusion.Grouping.Record)">
            <summary>
            Returns the previous record in the collection.
            </summary>
            <param name="r">The Record.</param>
            <returns>Previous record.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInDetailsCollection.Contains(Syncfusion.Grouping.Record)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInDetailsCollection.IndexOf(Syncfusion.Grouping.Record)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInDetailsCollection.CopyTo(Syncfusion.Grouping.Record[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <returns>returns record index</returns>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInDetailsCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the of data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInDetailsCollection.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Not supported because collection is Read-only.
            </summary>
            <param name="index">The list index</param>
        </member>
        <member name="P:Syncfusion.Grouping.RecordsInDetailsCollection.Item(System.String)">
            <summary>
            Searches for the first occurrence of a record that matches the sortkey and returns the record found or NULL if not found.
            </summary>
            <param name="sortKey">The sort key to search for. The sortKey will be compared to the sorted field in the table as specified with <see cref="P:Syncfusion.Grouping.TableDescriptor.SortedColumns"/>.</param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.RecordsInDetailsCollection.Item(System.Int32)">
            <summary>
            Gets the element at the zero-based index.
            Setting is not supported and will throw an exception since the collection is Read-only.
            </summary>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.RecordsInDetailsCollection.IsReadOnly">
            <summary>
            Returns True because this collection is always Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordsInDetailsCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordsInDetailsCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordsInDetailsCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. The property also
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            </summary>
            <remarks>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/> of the <see cref="T:Syncfusion.Grouping.Group"/>.
            </remarks>
        </member>
        <member name="T:Syncfusion.Grouping.RecordsInDetailsCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.Record"/> elements of a <see cref="T:Syncfusion.Grouping.RecordsInDetailsCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInDetailsCollectionEnumerator.#ctor(Syncfusion.Grouping.RecordsInDetailsCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInDetailsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInDetailsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.RecordsInDetailsCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.FilteredRecordsInDetailsCollection">
            <summary>
            A Read-only collection of <see cref="T:Syncfusion.Grouping.Record"/> elements that meet filter criteria and 
            are children of a <see cref="T:Syncfusion.Grouping.RecordsDetails"/> section. See <see cref="T:Syncfusion.Grouping.RecordFilterDescriptorCollection"/>
            or <see cref="P:Syncfusion.Grouping.TableDescriptor.RecordFilters"/> for filter criteria.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.Group.FilteredRecords"/> property
            of a <see cref="T:Syncfusion.Grouping.Group"/> object.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.FilteredRecordsInDetailsCollection.Empty">
            <summary>
            A Read-only and empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FilteredRecordsInDetailsCollection.Contains(Syncfusion.Grouping.Record)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.FilteredRecordsInDetailsCollection.IndexOf(Syncfusion.Grouping.Record)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.FilteredRecordsInDetailsCollection.CopyTo(Syncfusion.Grouping.Record[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The Array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.FilteredRecordsInDetailsCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.
            <para/>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.FilteredRecordsInDetailsCollection.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Not supported because collection is Read-only.
            </summary>
            <param name="index">The list index</param>
        </member>
        <member name="P:Syncfusion.Grouping.FilteredRecordsInDetailsCollection.Item(System.Int32)">
            <summary>
            Gets the element at the zero-based index.
            Setting is not supported and will throw an exception since the collection is Read-only.
            </summary>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.FilteredRecordsInDetailsCollection.IsReadOnly">
            <summary>
            Returns True because this collection is always Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FilteredRecordsInDetailsCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FilteredRecordsInDetailsCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FilteredRecordsInDetailsCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. The property also
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            </summary>
            <remarks>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object)"/> of the <see cref="T:Syncfusion.Grouping.Group"/>.
            </remarks>
        </member>
        <member name="T:Syncfusion.Grouping.FilteredRecordsInDetailsCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.Record"/> elements of a <see cref="T:Syncfusion.Grouping.FilteredRecordsInDetailsCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FilteredRecordsInDetailsCollectionEnumerator.#ctor(Syncfusion.Grouping.FilteredRecordsInDetailsCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.FilteredRecordsInDetailsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FilteredRecordsInDetailsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.FilteredRecordsInDetailsCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.FlattenedFilteredRecordsInGroupCollection">
            <summary>
            A Read-only collection of sorted <see cref="T:Syncfusion.Grouping.Record"/> elements that meet filter criteria and are children of a <see cref="T:Syncfusion.Grouping.Group"/>.
            See <see cref="T:Syncfusion.Grouping.RecordFilterDescriptorCollection"/> or <see cref="P:Syncfusion.Grouping.TableDescriptor.RecordFilters"/> for filter criteria.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.Group.FilteredRecords"/> property
            of a <see cref="T:Syncfusion.Grouping.Group"/> object. <para/>
            The collection
            provides support for determining a record's position in the grouped group using the <see cref="M:Syncfusion.Grouping.FlattenedRecordsInGroupCollectionBase.IndexOf(Syncfusion.Grouping.Record)"/>
            method.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.FlattenedRecordsInGroupCollectionBase">
            <summary>
            A Read-only collection base class for <see cref="T:Syncfusion.Grouping.FlattenedFilteredRecordsInGroupCollection"/> 
            and <see cref="T:Syncfusion.Grouping.FlattenedRecordsInGroupCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FlattenedRecordsInGroupCollectionBase.Dispose">
            <summary>
            Disposes of the object and releases internal objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FlattenedRecordsInGroupCollectionBase.Contains(Syncfusion.Grouping.Record)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            group if changes have been made to the group or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.FlattenedRecordsInGroupCollectionBase.IndexOf(Syncfusion.Grouping.Record)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            group if changes have been made to the group or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.FlattenedRecordsInGroupCollectionBase.CopyTo(Syncfusion.Grouping.Record[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The Array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            group if changes have been made to the Group or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.FlattenedRecordsInGroupCollectionBase.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.FlattenedRecordsInGroupCollectionBase.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Not supported because collection is Read-only.
            </summary>
            <param name="index">The list index</param>
        </member>
        <member name="P:Syncfusion.Grouping.FlattenedRecordsInGroupCollectionBase.Item(System.Int32)">
            <summary>
            Gets (and caches) the element at the zero-based index.
            Setting is not supported and will throw an exception since the collection is Read-only.
            </summary>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            group if changes have been made to the group or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.FlattenedRecordsInGroupCollectionBase.IsReadOnly">
            <summary>
            Returns True because this collection is always Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FlattenedRecordsInGroupCollectionBase.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FlattenedRecordsInGroupCollectionBase.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FlattenedRecordsInGroupCollectionBase.Count">
            <summary>
            Gets the number of elements contained in the collection. The property also
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            </summary>
            <remarks>
            The method calls <see cref="M:Syncfusion.Grouping.Table.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.FlattenedFilteredRecordsInGroupCollection.#ctor(Syncfusion.Grouping.Group)">
            <summary>
            Initializes the FlattenedFilteredRecordsInGroupCollection
            </summary>
            <param name="group">The Group.</param>
        </member>
        <member name="T:Syncfusion.Grouping.FlattenedRecordsInGroupCollection">
            <summary>
            A Read-only collection of sorted <see cref="T:Syncfusion.Grouping.Record"/> elements that are children of a <see cref="T:Syncfusion.Grouping.Group"/>.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.Group.Records"/> property
            of a <see cref="T:Syncfusion.Grouping.Group"/> object. This collection contains all records, it is not filtered. <para/>
            The collection
            provides support for determining a record's position in the grouped group using the <see cref="M:Syncfusion.Grouping.FlattenedRecordsInGroupCollectionBase.IndexOf(Syncfusion.Grouping.Record)"/>
            method.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FlattenedRecordsInGroupCollection.#ctor(Syncfusion.Grouping.Group)">
            <summary>
            Initializes the FlattenedRecordsInGroupCollection
            </summary>
            <param name="group">The Group.</param>
        </member>
        <member name="T:Syncfusion.Grouping.FlattenedRecordsInGroupCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.Record"/> elements of a <see cref="T:Syncfusion.Grouping.FlattenedRecordsInGroupCollectionBase"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FlattenedRecordsInGroupCollectionEnumerator.#ctor(Syncfusion.Grouping.FlattenedRecordsInGroupCollectionBase)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            group if changes have been made to the group or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.FlattenedRecordsInGroupCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FlattenedRecordsInGroupCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.FlattenedRecordsInGroupCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.FilteredRecordsInTableCollection">
            <summary>
            A Read-only collection of sorted <see cref="T:Syncfusion.Grouping.Record"/> elements that meet filter criteria and are children of a <see cref="T:Syncfusion.Grouping.Table"/>.
            See <see cref="T:Syncfusion.Grouping.RecordFilterDescriptorCollection"/> or <see cref="P:Syncfusion.Grouping.TableDescriptor.RecordFilters"/> for filter criteria.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.Table.FilteredRecords"/> property
            of a <see cref="T:Syncfusion.Grouping.Table"/> object. <para/>
            The collection
            provides support for determining a record's position in the grouped table using the <see cref="M:Syncfusion.Grouping.RecordsInTableCollectionBase.IndexOf(Syncfusion.Grouping.Record)"/>
            method.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RecordsInTableCollectionBase">
            <summary>
            A Read-only collection base class for <see cref="T:Syncfusion.Grouping.RecordsInTableCollection"/> 
            and <see cref="T:Syncfusion.Grouping.FilteredRecordsInTableCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInTableCollectionBase.Dispose">
            <summary>
            Disposes of the object and releases internal objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInTableCollectionBase.Contains(Syncfusion.Grouping.Record)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInTableCollectionBase.IndexOf(Syncfusion.Grouping.Record)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInTableCollectionBase.CopyTo(Syncfusion.Grouping.Record[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInTableCollectionBase.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInTableCollectionBase.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Not supported because collection is Read-only.
            </summary>
            <param name="index">The List index</param>
        </member>
        <member name="P:Syncfusion.Grouping.RecordsInTableCollectionBase.Item(System.Int32)">
            <summary>
            Gets (and caches) the element at the zero-based index.
            Setting is not supported and will throw an exception since the collection is Read-only.
            </summary>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.RecordsInTableCollectionBase.IsReadOnly">
            <summary>
            Returns True because this collection is always Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordsInTableCollectionBase.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordsInTableCollectionBase.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordsInTableCollectionBase.Count">
            <summary>
            Gets the number of elements contained in the collection. The property also
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            </summary>
            <remarks>
            The method calls <see cref="M:Syncfusion.Grouping.Table.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="T:Syncfusion.Grouping.RecordsInTableCollection">
            <summary>
            A Read-only collection of sorted <see cref="T:Syncfusion.Grouping.Record"/> elements that are children of a <see cref="T:Syncfusion.Grouping.Table"/>.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.Table.Records"/> property
            of a <see cref="T:Syncfusion.Grouping.Table"/> object. This collection contains all records, it is not filtered. <para/>
            The collection
            provides support for determining a record's position in the grouped table using the <see cref="M:Syncfusion.Grouping.RecordsInTableCollectionBase.IndexOf(Syncfusion.Grouping.Record)"/>
            method.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInTableCollection.DeleteAll">
            <summary>
            Deletes All the records from the table.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInTableCollection.DeleteRecords(Syncfusion.Grouping.RecordsInTableCollection)">
            <summary>
            Deletes the given collection of records from the table.
            </summary>
            <param name="records"></param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInTableCollection.DeleteRecords(Syncfusion.Grouping.Record[])">
            <summary>
            Deletes the given collection of records from the table.
            </summary>
            <param name="records"></param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInTableCollection.DeleteRecords(Syncfusion.Grouping.SelectedRecordsCollection)">
            <summary>
            Deletes the given collection of selected records from the table.
            </summary>
            <param name="selectedRecords"></param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInTableCollection.SelectAll">
            <summary>
            Selects all the records from the table.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInTableCollection.Delete(Syncfusion.Grouping.Record)">
            <summary>
            Deletes the given record from the table.
            </summary>
            <param name="record"></param>
        </member>
        <member name="T:Syncfusion.Grouping.RecordsInTableCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.Record"/> elements of a <see cref="T:Syncfusion.Grouping.RecordsInTableCollectionBase"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInTableCollectionEnumerator.#ctor(Syncfusion.Grouping.RecordsInTableCollectionBase)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInTableCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsInTableCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.RecordsInTableCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.DisplayElementsInTableCollection">
            <summary>
            A Read-only collection of <see cref="T:Syncfusion.Grouping.Element"/> objects in a <see cref="T:Syncfusion.Grouping.Table"/> which represent a flattened
            view of grouped and hierarchical records that are visible and meet filter criteria in the datasource.
            An instance of this collection is
            returned by the <see cref="P:Syncfusion.Grouping.Table.DisplayElements"/> property of a <see cref="T:Syncfusion.Grouping.Table"/> object.
            <para/>
            This collection does not step into child elements of a <see cref="T:Syncfusion.Grouping.NestedTable"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RuntimeElementsInTableCollection">
            <summary>
            This is a Read-only collection base class for <see cref="T:Syncfusion.Grouping.DisplayElementsInTableCollection"/> and <see cref="T:Syncfusion.Grouping.ElementsInTableCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RuntimeElementsInTableCollection.Dispose">
            <summary>
            Disposes of the object and clears the cache.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RuntimeElementsInTableCollection.ClearCache">
            <summary>
            Clears the cache of recently accessed elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RuntimeElementsInTableCollection.Contains(Syncfusion.Grouping.Element)">
            <summary>
            Checks if the group belongs to the details section and is visible.
            </summary>
            <param name="value">Group element.</param>
            <returns>True if the group belongs to the details section and is visible; False otherwise.</returns>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RuntimeElementsInTableCollection.IndexOf(Syncfusion.Grouping.Element)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RuntimeElementsInTableCollection.GetItemAtYAmount(System.Double)">
            <summary>
            Gets (and caches) the element at the zero-based YAmount. With a grouping grid, YAmount represents the
            vertical pixel scroll position of the grid.
            Setting a value is not supported and will throw an exception since the collection is Read-only.
            </summary>
            <param name="index">The Index.</param>
            <returns>returns Element.</returns>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RuntimeElementsInTableCollection.GetYAmountPositionOf(Syncfusion.Grouping.Element)">
            <summary>
            Returns the YAmount position of the element in the collection. With a grouping grid, YAmount represents the
            vertical pixel scroll position of the grid.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RuntimeElementsInTableCollection.GetItemAtCustomCount(System.Double)">
            <summary>
            Gets the element at the zero-based CustomCount position.
            </summary>
            <param name="index">Custom count position.</param>
            <returns>Element at the given position.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RuntimeElementsInTableCollection.GetCustomCountPositionOf(Syncfusion.Grouping.Element)">
            <summary>
            Returns the CustomCount position of the element in the collection.
            </summary>
            <param name="value">The Element.</param>
            <returns>Custom count position.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RuntimeElementsInTableCollection.GetItemAtVisibleCustomCount(System.Double)">
            <summary>
            Gets the element at the zero-based CustomCount position.
            </summary>
            <param name="index">Custom count position.</param>
            <returns>Element at the given position.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RuntimeElementsInTableCollection.GetVisibleCustomCountPositionOf(Syncfusion.Grouping.Element)">
            <summary>
            Returns the CustomCount position of the element in the collection.
            </summary>
            <param name="value">The Element.</param>
            <returns>Custom count position of the element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RuntimeElementsInTableCollection.CopyTo(Syncfusion.Grouping.Element[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The Array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RuntimeElementsInTableCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection.
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RuntimeElementsInTableCollection.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Not supported because collection is readonly.
            </summary>
            <param name="index">The list index</param>
        </member>
        <member name="P:Syncfusion.Grouping.RuntimeElementsInTableCollection.IsDisposed">
            <summary>
            Returns true when collection has been disposed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RuntimeElementsInTableCollection.Item(System.Int32)">
            <summary>
            Gets (and caches) the element at the zero-based index.
            Setting is not supported and will throw an exception since the collection is readonly.
            </summary>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.RuntimeElementsInTableCollection.IsReadOnly">
            <summary>
            Returns True because this collection is always Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RuntimeElementsInTableCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RuntimeElementsInTableCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RuntimeElementsInTableCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. The property also
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            </summary>
            <remarks>
            The method calls <see cref="M:Syncfusion.Grouping.Table.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.RuntimeElementsInTableCollection.YAmountCount">
            <summary>
            Gets the YAmount count for the collection. The property also
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            </summary>
            <remarks>
            The method calls <see cref="M:Syncfusion.Grouping.Table.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="T:Syncfusion.Grouping.ElementsInTableCollection">
            <summary>
            A Read-only collection <see cref="T:Syncfusion.Grouping.Element"/> objects in a <see cref="T:Syncfusion.Grouping.Table"/> which represent a flattened
            view of grouped and hierarchical records. All records are returned no matter if they meet filter criteria or not.
            An instance of this collection is
            returned by the <see cref="P:Syncfusion.Grouping.Table.Elements"/> property of a <see cref="T:Syncfusion.Grouping.Table"/> object.
            <para/>
            This collection does not step into child elements of a <see cref="T:Syncfusion.Grouping.NestedTable"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RuntimeElementsInTableCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.Element"/> objects of a <see cref="T:Syncfusion.Grouping.DisplayElementsInTableCollection"/> or <see cref="T:Syncfusion.Grouping.ElementsInTableCollection"/> .
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RuntimeElementsInTableCollectionEnumerator.#ctor(Syncfusion.Grouping.RuntimeElementsInTableCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the Table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RuntimeElementsInTableCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RuntimeElementsInTableCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.RuntimeElementsInTableCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.SectionInGroupCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Grouping.Section"/> elements that are children of a <see cref="T:Syncfusion.Grouping.Group"/>.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.Group.Sections"/> property
            of a <see cref="T:Syncfusion.Grouping.Group"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SectionInGroupCollection.Dispose">
            <summary>
            Disposes the object and releases internal objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SectionInGroupCollection.GetInnerItem(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index without <see cref="M:Syncfusion.Grouping.Element.OnEnsureInitialized(System.Object)"/> being called.
            </summary>
            <param name="index">Element index.</param>
            <returns>Element at the given index.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SectionInGroupCollection.Contains(Syncfusion.Grouping.Section)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.SectionInGroupCollection.IndexOf(Syncfusion.Grouping.Section)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.SectionInGroupCollection.CopyTo(Syncfusion.Grouping.Section[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.SectionInGroupCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading of the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.SectionInGroupCollection.Insert(System.Int32,Syncfusion.Grouping.Section)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="section">The element to insert. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.SectionInGroupCollection.Remove(Syncfusion.Grouping.Section)">
            <summary>
            Removes the specified element from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection, the method will do nothing.</param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.SectionInGroupCollection.Add(Syncfusion.Grouping.Section)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
            <param name="section">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SectionInGroupCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove. </param>
        </member>
        <member name="M:Syncfusion.Grouping.SectionInGroupCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SectionInGroupCollection.Item(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index.
            </summary>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.SectionInGroupCollection.IsReadOnly">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SectionInGroupCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SectionInGroupCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SectionInGroupCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. The property also
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            </summary>
            <remarks>
            The method calls the <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/> of the <see cref="T:Syncfusion.Grouping.Group"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.SectionInGroupCollection.InnerCount">
            <summary>
            Gets the number of elements contained in the collection without calling the <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/> of the <see cref="T:Syncfusion.Grouping.Group"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.SectionInGroupCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.Section"/> elements of a <see cref="T:Syncfusion.Grouping.SectionInGroupCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SectionInGroupCollectionEnumerator.#ctor(Syncfusion.Grouping.SectionInGroupCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.SectionInGroupCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SectionInGroupCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator is successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.SectionInGroupCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.SelectedRecordsCollection">
            <summary>
            A collection of selected <see cref="T:Syncfusion.Grouping.Record"/> elements that are children of a <see cref="T:Syncfusion.Grouping.Table"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.DisableEvents">
            <summary>Disables the events.</summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.EnableEvents">
            <summary>Enables the events.</summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.Dispose">
            <summary>
            Disposes of the object and releases internal objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.FindRecord(Syncfusion.Grouping.Record)">
            <overload>
            Searches for the occurrence of a record and returns the zero-based index of the occurrence found or -1 if not found.
            </overload>
            <summary>
            Searches for the occurrence of a record and returns the zero-based index of the occurrence found or -1 if not found.
            </summary>
            <param name="record">The record to search for. </param>    
            <returns>Record index.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.FindRecord(System.Int32)">
            <summary>
            Searches for the occurrence of a record and returns the zero-based index of the occurrence found or -1 if not found.
            </summary>
            <param name="sourceIndex">The position of the record in the underlying datasource (UnsortedRecords.IndexOf). </param>    
            <returns>Record index.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.Contains(Syncfusion.Grouping.SelectedRecord)">
            <overload>
            Determines if the element belongs to this collection.
            </overload>
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.Contains(Syncfusion.Grouping.Record)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="record">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.IndexOf(Syncfusion.Grouping.SelectedRecord)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <overload>
            Returns the zero-based index of the occurrence of the element in the collection.
            </overload>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.IndexOf(Syncfusion.Grouping.Record)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.CopyTo(Syncfusion.Grouping.SelectedRecord[],System.Int32)">
            <overload>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </overload>
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.CopyTo(Syncfusion.Grouping.Record[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection.
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.Add(Syncfusion.Grouping.SelectedRecord)">
            <overload>
            Addes a record to the collection of selected records and marks it as selected.
            </overload>
            <summary>
            Addes a record to the collection of selected records and marks it as selected.
            </summary>
            <param name="value">A SelectedRecord to add.</param>
            <returns>Index at which the record is added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.Add(Syncfusion.Grouping.Record)">
            <summary>
            Addes a record to the collection of selected records and marks it as selected.
            </summary>
            <param name="value">Record to add.</param>
            <returns>Index at which the record is added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.DeleteAll">
             <summary>
             Deletes all the selected records.
             </summary>
            <remark>
             A call to SeltectedRecords.DeleteAll does not just unselect the selected records. This method actually removes the selected records from the Records being displayed in the GridGroupingControl..
            </remark>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.AddRange(Syncfusion.Grouping.RecordsInTableCollection)">
            <summary>
            Adds the collection of records  to the Selected records collecton and marks them as selected.
            </summary>
            <param name="records"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.AddRange(Syncfusion.Grouping.Record[])">
            <summary>
            Adds the collection of records  to the Selected records collecton and marks them as selected.
            </summary>
            <param name="records"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.RemoveRange(Syncfusion.Grouping.RecordsInTableCollection)">
            <summary>
            Removes the collection of records from Selected records collecton and marks them as deselected.
            </summary>
            <param name="records"></param>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.RemoveRange(Syncfusion.Grouping.Record[])">
            <summary>
            Removes the collection of records from Selected records collecton and marks them as deselected.
            </summary>
            <param name="records"></param>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.RemoveRange(Syncfusion.Grouping.SelectedRecordsCollection)">
            <summary>
            Removes the collection of selected records and marks them as deselected.
            </summary>
            <param name="records"></param>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.RemoveRange(Syncfusion.Grouping.SelectedRecord[])">
            <summary>
            Removes the collection of selected records and marks them as deselected.
            </summary>
            <param name="records"></param>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.Remove(Syncfusion.Grouping.SelectedRecord)">
            <summary>
            Removes a record the collection of selected records and marks it as deselected.
            </summary>
            <overload>
            Removes a record the collection of selected records and marks it as deselected.
            </overload>
            <param name="value">Record to remove.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.Remove(Syncfusion.Grouping.Record)">
            <summary>
            Removes a record from the collection of selected records and marks it as deselected.
            </summary>
            <param name="value">Record to remove.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.InternalClear">
            <summary>For internal use.</summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.Clear">
            <summary>
            Removes all records from the collection of selected records and marks them as deselected.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollection.RemoveAt(System.Int32)">
            <summary>
            Not supported because collection is Read-only.
            </summary>
            <param name="index">Index of the reord to be removed.</param>
        </member>
        <member name="P:Syncfusion.Grouping.SelectedRecordsCollection.Item(System.Int32)">
            <summary>
            Gets the element at the zero-based index.
            Setting is not supported and will throw an exception since the collection is Read-only.
            </summary>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.SelectedRecordsCollection.IsReadOnly">
            <summary>
            Returns False since this collection is not read only.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SelectedRecordsCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SelectedRecordsCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SelectedRecordsCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. The property also
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            </summary>
            <remarks>
            The method calls <see cref="M:Syncfusion.Grouping.Table.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="T:Syncfusion.Grouping.SelectedRecordsCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.Record"/> elements of a <see cref="T:Syncfusion.Grouping.SelectedRecordsCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollectionEnumerator.#ctor(Syncfusion.Grouping.SelectedRecordsCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.SelectedRecordsCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.SelectedRecord">
            <summary>
            A SelectedRecord class is a wrapper around a <see cref="P:Syncfusion.Grouping.SelectedRecord.Record"/>. It is used
            to add records to the <see cref="T:Syncfusion.Grouping.SelectedRecordsCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecord.#ctor(Syncfusion.Grouping.Record)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.SelectedRecord"/> entry for a <see cref="P:Syncfusion.Grouping.SelectedRecord.Record"/>
            </summary>
            <param name="r">The Record.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecord.GetSourcePosition">
            <summary>
            The position of the record in the underlying datasource (UnsortedRecords.IndexOf)
            </summary>
            <returns>Record position.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecord.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SelectedRecord.Record">
            <summary>
            The <see cref="P:Syncfusion.Grouping.SelectedRecord.Record"/> that is reprented by this object.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.TableFieldPropertyDescriptor">
            <internalonly/>
            <summary>
            A custom PropertyDescriptor that is used within a GridGroupTypedListRecordsCollection to access
            a FieldDescriptor.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableFieldPropertyDescriptor.#ctor(Syncfusion.Grouping.FieldDescriptor)">
            <summary>
            Initializes a new PropertyDescriptor and attaches it to a FieldDescriptor.
            </summary>
            <param name="field">The Field.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableFieldPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>Determines if the given component should be serialized.</summary>
            <param name="component">The component.</param>
            <returns>returns False.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.TableFieldPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>Sets a value for the given component.</summary>
            <param name="component">The Component.</param>
            <param name="value">Value to be set.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.TableFieldPropertyDescriptor.ResetValue(System.Object)">
            <summary>Resets the component.</summary>
            <param name="component">Component to reset.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.TableFieldPropertyDescriptor.GetValue(System.Object)">
            <summary>Returns the value of given component.</summary>
            <param name="component">The Component.</param>
            <returns>returns Value.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.TableFieldPropertyDescriptor.CanResetValue(System.Object)">
            <override/>
            <summary>
            When overridden in a derived class, returns whether resetting an object changes
            its value.
            </summary>
            <param name="component">The component to test for reset capability. </param>
            <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableFieldPropertyDescriptor.GetHashCode">
            <summary>Serves as a hash function.</summary>
            <returns>Hash code.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.TableFieldPropertyDescriptor.Equals(System.Object)">
            <override/>
            <summary>
            Compares this to another object to see if they are equivalent.
            </summary>
            <param name="other">The object to compare. </param>
            <returns>
            true if the values are equivalent; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.TableFieldPropertyDescriptor.PropertyType">
            <summary>Gets the result type of this field.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.TableFieldPropertyDescriptor.IsReadOnly">
            <summary>Determines if the field is read-only.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.TableFieldPropertyDescriptor.ComponentType">
            <summary>Gets the type of the record.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.TableFieldPropertyDescriptor.IsBrowsable">
            <summary>Indicates if the field is browsable.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.TableFieldPropertyDescriptor.Field">
            <summary>
            The FieldDescriptor.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.TableRecordDataPropertyDescriptor">
            <summary>
            A custom PropertyDescriptor that is used within a GridGroupTypedListRecordsCollection to access
            a FieldDescriptor.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableRecordDataPropertyDescriptor.#ctor(System.Type)">
            <summary>
            Initializes a new PropertyDescriptor and attaches it to a FieldDescriptor.
            </summary>
            <param name="type">The Type value.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableRecordDataPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>Determines if the given component should be serialized.</summary>
            <param name="component">The component.</param>
            <returns>returns False.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.TableRecordDataPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>Sets a value for the given component.</summary>
            <param name="component">The Component.</param>
            <param name="value">Value to be set.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.TableRecordDataPropertyDescriptor.ResetValue(System.Object)">
            <override/>
            <summary>
            When overridden in a derived class, resets the value for this property of the
            component to the default value.
            </summary>
            <param name="component">The component with the property value that is to be
            reset to the default value. </param>
        </member>
        <member name="M:Syncfusion.Grouping.TableRecordDataPropertyDescriptor.GetValue(System.Object)">
            <override/>
            <summary>
            When overridden in a derived class, gets the current value of the property on a
            component.
            </summary>
            <param name="component">The component with the property for which to retrieve
            the value. </param>
            <returns>
            The value of a property for a given component.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableRecordDataPropertyDescriptor.CanResetValue(System.Object)">
            <override/>
            <summary>
            When overridden in a derived class, returns whether resetting an object changes
            its value.
            </summary>
            <param name="component">The component to test for reset capability. </param>
            <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.TableRecordDataPropertyDescriptor.PropertyType">
            <override/>
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableRecordDataPropertyDescriptor.IsReadOnly">
            <override/>
            <summary>
            Gets a value indicating whether this
            property is read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableRecordDataPropertyDescriptor.ComponentType">
            <override/>
            <summary>
            Gets the type of the component this property
            is bound to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableRecordDataPropertyDescriptor.IsBrowsable">
            <override/>
            <summary>
            Gets a value indicating whether the member is browsable.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.TableRecordIndexPropertyDescriptor">
            <summary>
            A custom PropertyDescriptor that is used within a GridGroupTypedListRecordsCollection to access
            a FieldDescriptor.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableRecordIndexPropertyDescriptor.#ctor">
            <summary>
            Initializes a new PropertyDescriptor and attaches it to a FieldDescriptor.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableRecordIndexPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <override/>
            <summary>
            Determines a value indicating whether the
            value of this property needs to be persisted.
            </summary>
            <param name="component">The component with the property to be examined for
            persistence. </param>
            <returns>
            true if the property should be persisted; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableRecordIndexPropertyDescriptor.SetValue(System.Object,System.Object)">
            <override/>
            <summary>
            Sets the value of the component to a
            different value.
            </summary>       
            <param name="component">The component with the property value that is to be set.
            </param>
            <param name="value">The new value. </param>
        </member>
        <member name="M:Syncfusion.Grouping.TableRecordIndexPropertyDescriptor.ResetValue(System.Object)">
            <override/>
            <summary>
            Resets the value for this property of the
            component to the default value.
            </summary>
            <param name="component">The component with the property value that is to be
            reset to the default value. </param>
        </member>
        <member name="M:Syncfusion.Grouping.TableRecordIndexPropertyDescriptor.GetValue(System.Object)">
            <override/>
            <summary>
            Gets the current value of the property on a
            component.
            </summary>
            <param name="component">The component with the property for which to retrieve
            the value. </param>
            <returns>
            The value of a property for a given component.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableRecordIndexPropertyDescriptor.CanResetValue(System.Object)">
            <override/>
            <summary>
            Returns whether resetting an object changes
            its value.
            </summary>
            <param name="component">The component to test for reset capability. </param>
            <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.TableRecordIndexPropertyDescriptor.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.TableRecordIndexPropertyDescriptor.IsReadOnly">
            <summary>
            Gets a value indicating whether this
            property is read-only.
            </summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.TableRecordIndexPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of the component this property
            is bound to.
            </summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.TableRecordIndexPropertyDescriptor.IsBrowsable">
            <summary>
            Gets a value indicating whether the member is browsable.
            </summary>
            <override/>
        </member>
        <member name="T:Syncfusion.Grouping.UnsortedRecordsCollection">
            <summary>
            A collection of unsorted <see cref="T:Syncfusion.Grouping.Record"/> elements that are children of a <see cref="T:Syncfusion.Grouping.Table"/> and
            represent the original records in the same order as the underlying data source. The collection
            provides support for determining a record's underlying position in the datasource using the <see cref="M:Syncfusion.Grouping.UnsortedRecordsCollection.IndexOf(Syncfusion.Grouping.Record)"/>
            method.<para/>
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.Table.UnsortedRecords"/> property
            of a <see cref="T:Syncfusion.Grouping.Table"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.UnsortedRecordsCollection.Dispose">
            <summary>
            Disposes of the object and releases internal objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.UnsortedRecordsCollection.Contains(Syncfusion.Grouping.Record)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.UnsortedRecordsCollection.IndexOf(Syncfusion.Grouping.Record)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.UnsortedRecordsCollection.CopyTo(Syncfusion.Grouping.Record[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.UnsortedRecordsCollection.Remove(Syncfusion.Grouping.Record)">
            <summary>
            Removes the record from unsorted records tree.
            </summary>
            <param name="r">Record to remove.</param>
        </member>
        <member name="M:Syncfusion.Grouping.UnsortedRecordsCollection.Insert(System.Int32,Syncfusion.Grouping.Record)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="pos">The zero-based index at which the element should be inserted.</param>
            <param name="r">The element to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.Grouping.UnsortedRecordsCollection.GetNext(Syncfusion.Grouping.Record)">
            <summary>
            Returns the next record in the collection.
            </summary>
            <param name="r">The Record.</param>
            <returns>Next record.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.UnsortedRecordsCollection.GetPrevious(Syncfusion.Grouping.Record)">
            <summary>
            Returns the previous record in the collection.
            </summary>
            <param name="r">The Record.</param>
            <returns>Previous record.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.UnsortedRecordsCollection.Add(Syncfusion.Grouping.Record)">
            <summary>
            Adds the given record into the collection.
            </summary>
            <param name="record">The Record.</param>
            <returns>Index at which the record is added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.UnsortedRecordsCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.UnsortedRecordsCollection.RemoveAt(System.Int32)">
            <summary>
            Not supported because collection is Read-only.
            </summary>
            <param name="index">Record index.</param>
        </member>
        <member name="P:Syncfusion.Grouping.UnsortedRecordsCollection.Item(System.Int32)">
            <summary>
            Gets the element at the zero-based index.
            Setting is not supported and will throw an exception since the collection is Read-only.
            </summary>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.UnsortedRecordsCollection.IsReadOnly">
            <summary>
            Returns True because this collection is always Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.UnsortedRecordsCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.UnsortedRecordsCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.UnsortedRecordsCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. The property also
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            </summary>
            <remarks>
            The method calls <see cref="M:Syncfusion.Grouping.Table.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="T:Syncfusion.Grouping.UnsortedRecordsCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.Record"/> elements of a <see cref="T:Syncfusion.Grouping.UnsortedRecordsCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.UnsortedRecordsCollectionEnumerator.#ctor(Syncfusion.Grouping.UnsortedRecordsCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.UnsortedRecordsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.UnsortedRecordsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.UnsortedRecordsCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.DescriptorBaseConverter">
            <summary>
            The type converter for <see cref="T:Syncfusion.Grouping.DescriptorBase"/> objects. <see cref="T:Syncfusion.Grouping.DescriptorBaseConverter"/> 
            is a <see cref="T:System.ComponentModel.ExpandableObjectConverter"/>. It overrides the default behavior of the 
            <see cref="M:Syncfusion.Grouping.DescriptorBaseConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/> method and returns the <see cref="M:Syncfusion.Grouping.DescriptorBase.GetName"/> result
            of the <see cref="T:Syncfusion.Grouping.DescriptorBase"/> object. <see cref="M:Syncfusion.Grouping.DescriptorBaseConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/> 
            is called from a property grid to determine the name of the object to be displayed.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.DescriptorBaseConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Determines whether this object can be converted to the specified type, using the given format.</summary>
            <param name="context">Format context.</param>
            <param name="destinationType">Target type.</param>
            <returns>True if this conversion is supported; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.DescriptorBaseConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value to the specified type, using the given format and culture.</summary>
            <param name="context">Format context.</param>
            <param name="culture">The CultureInfo.</param>
            <param name="value">The Value.</param>
            <param name="destinationType">Target type.</param>
            <returns>Converted object.</returns>
            <override/>
        </member>
        <member name="T:Syncfusion.Grouping.DescriptorBase">
            <summary>
            Base class for schema definition objects of the grouping engine.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.DescriptorBase.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.DescriptorBase.OnDisposed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.DescriptorBase.Disposed"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.DescriptorBase.Dispose(System.Boolean)">
            <summary>
            Called to clean up state of this object when it is disposed.
            </summary>
            <param name="disposing">True if called from <see cref="M:Syncfusion.Grouping.DescriptorBase.Dispose(System.Boolean)"/>; False if called from Finalizer.</param>
        </member>
        <member name="M:Syncfusion.Grouping.DescriptorBase.GetName">
            <summary>
            The framework calls this method to determine the name of this object. 
            </summary>
            <returns>Object name.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.DescriptorBase.CanResetValue">
            <summary>
            The framework calls this method to determine whether calling Reset will have any effect.
            </summary>
            <returns>True if Reset can be called; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.DescriptorBase.Reset">
            <summary>
            The framework calls this method to reset the object back to its default state.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.DescriptorBase.ShouldSerialize">
            <summary>
            The framework calls this method to determine whether properties or child objects of this object
            should be serialized. (Code serialization and / or XML Serialization).
            </summary>
            <returns>True if the object should be serialized; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.DescriptorBase.ToString">
            <summary>Returns string representation of the DescriptorBase object.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.DescriptorBase.Disposing">
            <summary>
            Returns True if object is executing the <see cref="M:Syncfusion.Grouping.DescriptorBase.Dispose(System.Boolean)"/> method call.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DescriptorBase.InDisposed">
            <summary>
            Returns after object was disposed and object is executing the <see cref="E:Syncfusion.Grouping.DescriptorBase.Disposed"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DescriptorBase.IsDisposed">
            <summary>
            Gets if object has been disposed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.DescriptorBase.Disposed">
            <summary>
            Occurs after the object was disposed.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.ExpressionFieldDescriptorCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Grouping.ExpressionFieldDescriptor"/> fields with run-time formula expressions. 
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.TableDescriptor.ExpressionFields"/> property
            of a <see cref="T:Syncfusion.Grouping.TableDescriptor"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.FieldDescriptorCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Grouping.FieldDescriptor"/> fields with mapping information to columns of the underlying datasource.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.TableDescriptor.Fields"/> property
            of a <see cref="T:Syncfusion.Grouping.TableDescriptor"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.IInsideCollectionEditorProperty">
            <summary>
            This interface is used by <see cref="T:Syncfusion.Grouping.GroupingCollectionEditor"/> to initialize
            collection and determine if changes were made inside the collection editor.
            If changes are detected, the collection will raise Changing and Changed events
            from within its <see cref="M:Syncfusion.Grouping.IInsideCollectionEditorProperty.InitializeFrom(System.Object)"/> method.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.IInsideCollectionEditorProperty.InitializeFrom(System.Object)">
            <summary>
            Initializes this object and copies properties from another object. 
            </summary>
            <param name="value">The source object.</param>
        </member>
        <member name="P:Syncfusion.Grouping.IInsideCollectionEditorProperty.InsideCollectionEditor">
            <summary>
            Gets / sets whether the collection is manipulated inside a collection editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.EnableOneTimePopulate">
            <summary>
            When called the ShouldPopulate property will be set true temporarily until
            the next EnsureInitialized call and then be reset again to optimize subsequent lookups.
            The Engine calls this method when schema changes occured (PropertyChanged was raised).
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.FieldDescriptorCollection.Empty">
            <summary>
            A Read-only and empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.ToString">
            <summary>
            Returns string representation of this object.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.CheckType(System.Object)">
            <summary>
            Ensure type correctness when a new element is added to the collection.
            </summary>
            <param name="obj">The newly added object.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.InitializeFrom(Syncfusion.Grouping.FieldDescriptorCollection)">
            <summary>
            Copies settings from another collection and raises <see cref="E:Syncfusion.Grouping.FieldDescriptorCollection.Changing"/> and <see cref="E:Syncfusion.Grouping.FieldDescriptorCollection.Changed"/>
            events if differences to the other collection are detected.
            </summary>
            <param name="other">The source collection.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.#ctor">
            <overload>
            Initializes a new empty collection.
            </overload>
            <summary>
            Initializes a new empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.#ctor(Syncfusion.Grouping.TableDescriptor)">
            <summary>
            Initializes a new empty collection and attaches it to a <see cref="T:Syncfusion.Grouping.TableDescriptor"/>.
            </summary>
            <param name="tableDescriptor">Table Descriptor.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.Reset">
            <summary>
            Resets the collection to its default state. If the collection is bound to a <see cref="T:Syncfusion.Grouping.TableDescriptor"/>,
            the collection will autopopulate itself the next time an item inside the collection is accessed.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.LoadDefault">
            <summary>
            Resets the collection to its default state, autopopulates the collection, and marks the collection
            as modified. Call this method if you want to load the default items for the collection and then
            modify it (e.g. remove members from the auto-populated list).
            </summary>
            <example>
            <code lang="C#">
            gridGroupingControl1.TableDescriptor.Fields.LoadDefault();
            gridGroupingControl1.TableDescriptor.Fields.Remove("MyChildTable.ForeignCategoryID");
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.ShowAddRangeChangedWarning(System.String)">
            <summary>Internal only.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.AddRange(Syncfusion.Grouping.FieldDescriptor[])">
            <summary>
            Adds multiple elements at the end of the collection.
            </summary>
            <param name="fieldDescriptors">The array with elements that should be added to the end of the collection.
            The array and its elements cannot be NULL references (Nothing in Visual Basic).
            </param>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.OnChanging(Syncfusion.Collections.ListPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.FieldDescriptorCollection.Changing"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Collections.ListPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.OnChanged(Syncfusion.Collections.ListPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.FieldDescriptorCollection.Changed"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Collections.ListPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.IsComplexType(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Determines if the specified PropertyDescriptor has nested properties.
            </summary>
            <param name="pd">The PropertyDescriptor to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.EnsureInitialized(System.Boolean)">
            <summary>
            Ensures the collection is initialized and auto-populates the collection on demand.
            </summary>
            <param name="populate">True if collection should auto-populate itself based on properties of
            the underlying datasource.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.InternalCreateFieldDescriptor(System.String)">
            <summary>
            Creates a new empty field descriptor with the specified name.
            </summary>
            <param name="name">The name of the new field descriptor.</param>
            <returns>A new FieldDescriptor.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.Clone">
            <summary>
            Creates a copy of the collection and all its elements.
            </summary>
            <returns>A copy of the collection and all its elements.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.InternalClone">
            <summary>
            Creates a copy of this collection and all its inner elements. This method is called from Clone.
            </summary>
            <returns>A copy of the collection and all its elements.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.CreateCollection(Syncfusion.Grouping.TableDescriptor,Syncfusion.Grouping.FieldDescriptor[])">
            <summary>
            Called from InternalClone to create a new collection and attach it to the specified table descriptor
            and insert the specified fields. The fields have already been cloned.
            </summary>
            <param name="td">The table descriptor.</param>
            <param name="fieldDescriptors">The cloned field descriptors.</param>
            <returns>A new FieldDescriptorCollection.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.Equals(System.Object)">
            <summary>Compares two descriptors.</summary>
            <param name="obj">Field descriptor to compare.</param>
            <returns>True if the descriptors are equal; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.GetHashCode">
            <summary>Serves as a hash function.</summary>
            <returns>Hash code.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.Modify">
            <summary>
            Marks the collection as modified and avoids auto-population.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.InternalEquals(Syncfusion.Grouping.FieldDescriptorCollection)">
            <summary>
            Compares each element with the element of another collection.
            </summary>
            <param name="other">The collection to compare to.</param>
            <returns>True if all elements are equal and in the same order; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.Contains(Syncfusion.Grouping.FieldDescriptor)">
            <overload>
            Determines if the element belongs to this collection.
            </overload>
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.FieldDescriptorCollection.EnsureInitialized(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.Contains(System.String)">
            <summary>
            Determines if an element with the specified name belongs to this collection.
            </summary>
            <param name="name">The name of the element to locate in the collection. </param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.IndexOf(Syncfusion.Grouping.FieldDescriptor)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.IndexOf(System.String)">
            <summary>
            Searches for the element with the specified name.
            </summary>
            <param name="name">The name of the element to locate in the collection. </param>
            <returns>The zero-based index of the occurrence of the element with matching name within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.CopyTo(Syncfusion.Grouping.FieldDescriptor[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection.
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.Insert(System.Int32,Syncfusion.Grouping.FieldDescriptor)">
            <summary>
            Inserts a descriptor element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="value">The element to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.Remove(Syncfusion.Grouping.FieldDescriptor)">
            <summary>
            Removes the specified descriptor element from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection, the method will do nothing.</param>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.InternalAdd(System.String,System.Boolean)">
            <summary>
            Allow GridColumnDescriptorCollection to add a value without increasing version of this collection.
            </summary>
            <param name="name">The Field name.</param>
            <param name="silent">Param Not used.</param>
            <returns>Returns the index of the record that has been added internally</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.Add(Syncfusion.Grouping.FieldDescriptor)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
            <param name="value">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.SuggestName(Syncfusion.Grouping.FieldDescriptor)">
            <summary>
            Called to get a new default name when a new field descriptor is created (e.g. when pressing "Add" in a collection editor).
            </summary>
            <param name="value">The field descriptor to be named.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.Add(System.String)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
            <param name="name">The name of the element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.InternalAdd(System.String)">
            <summary>
            Called from Add(string name) to create a new field descriptor with the given name.
            </summary>
            <param name="name">The name of the new field descriptor.</param>
            <returns>A new field descriptor.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.Remove(System.String)">
            <summary>
            Removes the specified descriptor element with the specified name from the collection.
            </summary>
            <param name="name">The name of the element to remove from the collection. If no element with that name is found
            in the collection, the method will do nothing.</param>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove. </param>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.Dispose">
            <summary>
            Disposes the object and collection items.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptorCollection.ShouldPopulate">
            <summary>
            Gets or sets whether collection should check for changes
            in engine schema or underlying datasource schema when EnsureInitialized gets called.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptorCollection.ExpandProperties">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptorCollection.PopulateForeignKeyFields">
            <internalonly/>
        </member>
        <member name="E:Syncfusion.Grouping.FieldDescriptorCollection.Changed">
            <summary>
            Occurs after a property in a nested element or the collection is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.FieldDescriptorCollection.Changing">
            <summary>
            Occurs before a property in a nested element or the collection is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptorCollection.InsideCollectionEditor">
            <summary>
            Gets / sets whether the collection is manipulated inside a collection editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptorCollection.AllowAddRangeChangedWarning">
            <summary>Internal only.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptorCollection.Version">
            <summary>
            The version number of this collection. The version is increased each time the
            collection or an element within the collection is modified. When getting the version,
            <see cref="M:Syncfusion.Grouping.FieldDescriptorCollection.EnsureInitialized(System.Boolean)"/> is called to ensure the collection is auto-populated
            if needed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptorCollection.IsModified">
            <summary>
            Determines if the collection was modified from its default state.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptorCollection.Item(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptorCollection.Item(System.String)">
            <summary>
            Gets / sets the element with the specified name.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptorCollection.SyncRoot">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptorCollection.IsReadOnly">
            <summary>
            Determines if the collection is Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptorCollection.IsFixedSize">
            <summary>
            Returns normally False since this collection has no fixed size. Only when it is Read-only,
            IsFixedSize returns True.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptorCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptorCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. The property also
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            </summary>
            <remarks>
            The method calls <see cref="M:Syncfusion.Grouping.FieldDescriptorCollection.EnsureInitialized(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="F:Syncfusion.Grouping.ExpressionFieldDescriptorCollection.Empty">
            <summary>
            A Read-only and empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptorCollection.InternalCreateFieldDescriptor(System.String)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptorCollection.EnsureInitialized(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptorCollection.CreateCollection(Syncfusion.Grouping.TableDescriptor,Syncfusion.Grouping.FieldDescriptor[])">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptorCollection.InternalAdd(System.String)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptorCollection.CheckType(System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptorCollection.#ctor">
            <summary>
            Initializes a new empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptorCollection.AddRange(Syncfusion.Grouping.ExpressionFieldDescriptor[])">
            <summary>
            Adds multiple elements at the end of the collection.
            </summary>
            <param name="values">The array whose elements should be added to the end of the collection. 
            The array and its elements cannot be NULL references (Nothing in Visual Basic). 
            </param>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptorCollection.Clone">
            <summary>
            Creates a copy of the collection and all its elements.
            </summary>
            <returns>A copy of the collection and all its elements.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptorCollection.Equals(System.Object)">
            <summary>Compares two descriptor values.</summary>
            <returns>True if the descriptors are equivalent; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptorCollection.GetHashCode">
            <summary>Serves as a hash function.</summary>
            <returns>Returns hash code.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptorCollection.CopyTo(Syncfusion.Grouping.ExpressionFieldDescriptor[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptorCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptorCollection.SuggestName(Syncfusion.Grouping.FieldDescriptor)">
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.ExpressionFieldDescriptorCollection.Item(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ExpressionFieldDescriptorCollection.Item(System.String)">
            <summary>
            Gets / sets the element with the specified name.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.ExpressionFieldDescriptorCollectionEnumerator">
            <summary>
            Enumerator class for the <see cref="T:Syncfusion.Grouping.ExpressionFieldDescriptor"/> elements of an <see cref="T:Syncfusion.Grouping.ExpressionFieldDescriptorCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptorCollectionEnumerator.#ctor(Syncfusion.Grouping.ExpressionFieldDescriptorCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptorCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptorCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.ExpressionFieldDescriptorCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.ExpressionFieldDescriptorTypeConverter">
            <summary>
            The type converter for <see cref="T:Syncfusion.Grouping.ExpressionFieldDescriptor"/> objects. <see cref="T:Syncfusion.Grouping.ExpressionFieldDescriptorTypeConverter"/> 
            is an <see cref="T:Syncfusion.Grouping.DescriptorBaseConverter"/>. It overrides the default behavior of the 
            <see cref="M:Syncfusion.Grouping.ExpressionFieldDescriptorTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/> method and adds support for design-time code serialization.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptorTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Determines whether this object can be converted to the specified type, using the given format.</summary>
            <param name="context">Format context.</param>
            <param name="destinationType">Target type.</param>
            <returns>True if this conversion is supported; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptorTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value to the specified type, using the given format and culture.</summary>
            <param name="context">Format context.</param>
            <param name="culture">The CultureInfo.</param>
            <param name="value">The Value.</param>
            <param name="destinationType">Target type.</param>
            <returns>Converted object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptorTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets a list of <see cref="T:System.ComponentModel.PropertyDescriptor"/> for a given value.
            </summary>
            <param name="context">Format context.</param>
            <param name="value">The Value.</param>
            <param name="attributes">An array of type System.Attribute that will be used as a filter.</param>
            <returns>Property descriptor collection.</returns>
        </member>
        <member name="T:Syncfusion.Grouping.ExpressionFieldDescriptor">
            <summary>
            ExpressionFieldDescriptor is a <see cref="T:Syncfusion.Grouping.FieldDescriptor"/> with support for run-time formula expressions.
            <para/>
            Expression fields are managed by the <see cref="T:Syncfusion.Grouping.ExpressionFieldDescriptorCollection"/> that
            is returned by the <see cref="P:Syncfusion.Grouping.TableDescriptor.ExpressionFields"/> property
            of a <see cref="T:Syncfusion.Grouping.TableDescriptor"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.FieldDescriptor">
            <summary>
            FieldDescriptor provides mapping information to a column of the underlying datasource.
            <para/>
            Fields are managed by the <see cref="T:Syncfusion.Grouping.FieldDescriptorCollection"/> that
            is returned by the <see cref="P:Syncfusion.Grouping.TableDescriptor.Fields"/> property
            of a <see cref="P:Syncfusion.Grouping.FieldDescriptor.TableDescriptor"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.IStandardValuesProvider">
            <summary>
            Provides support for the <see cref="M:Syncfusion.Grouping.IStandardValuesProvider.GetStandardValues(System.ComponentModel.PropertyDescriptor)"/> method that returns an array of standard values used by <see cref="T:Syncfusion.Grouping.StandardValuesCollectionConverter"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.IStandardValuesProvider.GetStandardValues(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns an array of standard values used by <see cref="T:Syncfusion.Grouping.StandardValuesCollectionConverter"/>.
            </summary>
            <param name="pd">The context.PropertyDescriptor of a TypeConverter.GetStandardValues method.</param>
            <returns>An array of standard values used by <see cref="T:Syncfusion.Grouping.StandardValuesCollectionConverter"/>.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.#ctor">
            <overload>
            Initializes a new empty FieldDescriptor.
            </overload>
            <summary>
            Initializes a new empty FieldDescriptor.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new FieldDescriptor with a name.
            </summary>
            <param name="name">Name of the field descriptor.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new FieldDescriptor with a name and a type. Use this ctor only for unbound fields.
            </summary>
            <param name="name">Field descriptor name.</param>
            <param name="type">Type of the descriptor.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.#ctor(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new FieldDescriptor with a name, mapping name, Read-only setting, and default value for NULL fields.
            </summary>
            <param name="name">The Name for FieldDescriptor.</param>
            <param name="mappingName">Mapping name.</param>
            <param name="readOnly">Indicates if the descriptor is read-only.</param>
            <param name="defaultValue">Default value.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.InitializeFrom(Syncfusion.Grouping.FieldDescriptor)">
            <summary>
            Initializes this object and copies properties from another object. <see cref="E:Syncfusion.Grouping.FieldDescriptor.PropertyChanging"/>
            and <see cref="E:Syncfusion.Grouping.FieldDescriptor.PropertyChanged"/> events are raised for every property that is modified. If both
            objects are equal, no events are raised.
            </summary>
            <param name="other">The source object.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.OnPropertyChanging(Syncfusion.Grouping.DescriptorPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.FieldDescriptor.PropertyChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.DescriptorPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.OnPropertyChanged(Syncfusion.Grouping.DescriptorPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.FieldDescriptor.PropertyChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.DescriptorPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.Clone">
            <summary>
            Creates a copy of this descriptor.
            </summary>
            <returns>A copy of this descriptor.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.CopyAllMembersTo(Syncfusion.Grouping.FieldDescriptor)">
            <summary>
            Copies all properties to another element without raising Changing or Changed events.
            </summary>
            <param name="fd">The target object.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.Equals(System.Object)">
            <summary>Compares two field descriptors.</summary>
            <param name="obj">Field descriptor.</param>
            <returns>True if the descriptors are equal; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.GetHashCode">
            <summary>Serves as a hash function.</summary>
            <returns>Hash code.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.GetName">
            <summary>Returns the name of the descriptor.</summary>
            <returns>Field descriptor name.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.ShouldSerializeName">
            <summary>
            Determines if the field's name was modified.
            </summary>
            <returns>True if name is modified.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.ResetName">
            <summary>
            Resets the field's name.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.GetParentFieldDescriptor">
            <summary>
            Gets a related field descriptor of a related table that this descriptor holds. If this field descriptor is
            not a wrapper object for a field in a related table, the method will return NULL.
            </summary>
            <returns>A field descriptor of the related table.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.GetRelatedSummaryDescriptor">
            <summary>
            Gets a related summary descriptor of a related table that this descriptor holds. (for RelationKind.ForeignKeyKeyWords)
            </summary>
            <returns>A summary descriptor of the related table.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.GetRelatedDescriptor">
            <summary>
            Gets a related field descriptor of a related table that this descriptor holds. If this field descriptor is
            not a wrapper object for a field in a related table, the method will return NULL.
            </summary>
            <returns>A field descriptor of the related table.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.GetNestedRelatedDescriptor">
            <summary>
            Gets a nested related field descriptor of a related table that this descriptor holds. 
            </summary>
            <returns>Nested related field descriptor.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.GetExpressionFieldDescriptor">
            <summary>
            Gets the expression field descriptor this descriptor holds. If this field descriptor is
            not a wrapper object for a expression field, the method will return NULL.
            </summary>
            <returns>An expression field descriptor.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.GetUnboundFieldDescriptor">
            <summary>
            Gets the unbound field descriptor this descriptor holds. If this field descriptor is
            not a wrapper object for a unbound field, the method will return NULL.
            </summary>
            <returns>An expression field descriptor.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.GetRelation">
            <summary>
            Gets the relation descriptor this descriptor holds. If this field descriptor is
            not a wrapper object for a field in a related table, the method will return NULL.
            </summary>
            <returns>A expression field descriptor.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.GetPropertyDescriptor">
            <summary>
            Gets the property descriptor this descriptor holds. If this field descriptor is
            not a wrapper object for a property in the main table (and also not a nested property inside
            a complex object), the method will return NULL.
            </summary>
            <returns>A property descriptor.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.GetSimplePropertyDescriptor">
            <summary>
            Gets the property descriptor this descriptor holds. If this field descriptor is
            a wrapper object for a property (IsComplexPropertyField) in the main table, the method will return NULL.
            </summary>
            <returns>A property descriptor.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.GetComplexPropertyDescriptors">
            <summary>
            Gets the complex property descriptor this descriptor holds. If this field descriptor is
            not a wrapper object for a nested property inside
            a complex object, the method will return NULL.
            </summary>
            <returns>A complex property descriptor.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.IsRelatedField">
            <summary>
            Gets a related field descriptor of a related table that this descriptor holds. If this field descriptor is
            not a wrapper object for a field in a related table, the method will return NULL.
            </summary>
            <returns>True if it is a related field; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.IsForeignKeyField">
            <summary>
            Determines if this field descriptor is a foreign key field (and therefore changes to the field will affect other fields
            in the record).
            </summary>
            <returns>True if it is a foreign key field; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.IsObjectReferenceField">
            <summary>
            Determines if this field descriptor is an object reference field.
            </summary>
            <returns>True if it is an object reference field; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.IsExpressionField">
            <summary>
            Determines if this field descriptor is a wrapper object for an expression field.
            </summary>
            <returns>True if it is an expression field; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.IsUnboundField">
            <summary>
            Determines if this field descriptor is an unbound field (no mappingname to an underlying property of the unerlying datasource given).
            </summary>
            <returns>True if it is an unbound field; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.IsPropertyField">
            <summary>
            Determines if this field descriptor is a wrapper object for a property in the main table (and not a nested property inside
            a complex object).
            </summary>
            <returns>True if it is a property field; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.IsDynamicPropertyField">
            <summary>
            Determines if this field descriptor is a wrapper object for a dynamic property in the main table (and not a nested property inside
            a complex object).
            </summary>
            <returns>True if it is a property field; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.IsComplexPropertyField">
            <summary>
            Determines if this field descriptor is a wrapper object for a nested property inside
            a complex object. If so, the method will return NULL.
            </summary>
            <returns>True if this is a complex property field; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.GetPropertyType">
            <summary>
            Gets the result type of this field.
            </summary>
            <returns>Property type.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.ShouldSerializeDefaultValue">
            <summary>
            Determines whether the default value is empty.
            </summary>
            <returns>True if the default value is not empty; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.ResetDefaultValue">
            <summary>
            Resets the default value to empty.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.ShouldSerializeReadOnly">
            <summary>
            Determines if the Read-only state of the field was modified.
            </summary>
            <returns>True if the content were modified; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.ResetReadOnly">
            <summary>
            Resets the Read-only to False.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.ShouldSerializeFieldPropertyType">
            <summary>
            Determines if the FieldPropertyType of the field was modified.
            </summary>
            <returns>True if the content were modified; Fasle otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.ResetFieldPropertyType">
            <summary>
            Resets the FieldPropertyType property.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.ShouldSerializeHide">
            <summary>
            Determines if the Hide state of the field was modified.
            </summary>
            <returns>True if the content were modified; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.ResetHide">
            <summary>
            Resets the Hide property to False.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.ShouldSerializeAllowTrimEnd">
            <summary>
            Determines if the AllowTrimEnd state of the field was modified.
            </summary>
            <returns>True if the state was modified; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.ResetAllowTrimEnd">
            <summary>
            Resets the AllowTrimEnd property to False.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.ShouldSerializeForceImmediateSaveValue">
            <summary>
            Determines if the ForceImmediateSaveValue state of the field was modified.
            </summary>
            <returns>True if the content were modified; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.ResetForceImmediateSaveValue">
            <summary>
            Resets the ForceImmediateSaveValue property to False.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.GetValueFromDataRow(System.Object)">
            <summary>
            Retrieves the value for this field from the underlying record.
            </summary>
            <param name="data">The DataRow with data for this field.</param>
            <returns>The value from the underlying record.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.GetValue(Syncfusion.Grouping.Record)">
            <summary>
            Retrieves the value for this field from the underlying record.
            </summary>
            <param name="record">The record with data for this field.</param>
            <returns>The value from the underlying record.</returns>
        </member>
        <member name="F:Syncfusion.Grouping.FieldDescriptor.preventUnboundFieldTypeCheck">
            <summary>
            Set this true if the newly added type check for value returned from
            QueryValue causes compatibility issues.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.SetValue(Syncfusion.Grouping.Record,System.Object)">
            <overload>
            Saves the value into the underlying datasource. If the field is
            an unbound field, a <see cref="E:Syncfusion.Grouping.Engine.SaveValue"/> event is raised.
            </overload>
            <summary>
            Saves the value into the underlying datasource. If the field is
            an unbound field, a <see cref="E:Syncfusion.Grouping.Engine.SaveValue"/> event is raised.
            </summary>
            <param name="record">The record</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.SetValue(Syncfusion.Grouping.Record,System.Object,System.Boolean)">
            <summary>
            Saves the value into the underlying datasource. If the field is
            an unbound field, a <see cref="E:Syncfusion.Grouping.Engine.SaveValue"/> event is raised.
            </summary>
            <param name="record">The record.</param>
            <param name="value">The new value.</param>
            <param name="forceListChanged">Specifies if a ListChanged event should be raised.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.ToString">
            <summary>Returns string representation of the descriptor.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.ShouldSerializeReferencedFields">
            <summary>
            Determines if the ReferencedFields state of the field was modified.
            </summary>
            <returns>True if the content were modified; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.ResetReferencedFields">
            <summary>
            Resets the ReferencedFields property to False.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptor.DetermineReferencedFields">
            <summary>
            Returns an array of field descriptor names that the expression references
            </summary>
            <returns>returns array of field descriptor names</returns>
        </member>
        <member name="E:Syncfusion.Grouping.FieldDescriptor.PropertyChanged">
            <summary>
            Occurs when a property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.FieldDescriptor.PropertyChanging">
            <summary>
            Occurs before a property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptor.Version">
            <summary>
            The version number of this object. The version is increased each time the
            element was modified.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptor.Collection">
            <summary>
            The collection this descriptor belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptor.TableDescriptor">
            <summary>
            The TableDescriptor that this descriptor belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptor.Name">
            <summary>
            The name of the field.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptor.MappingName">
            <summary>
            The mapping for this field. You should specify which field of a <see cref="T:System.Data.DataTable"/>
            or strong-typed collection you want to display in the grid at this field. The MappingName can also point to a property
            inside a complex object with nested properties of a collection when a '.' is specified.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptor.DefaultValue">
            <summary>
            A default value that should be used for empty fields in the AddNewRecord.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptor.ReadOnly">
            <summary>
            Gets / set Read-only state of the field.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptor.FieldPropertyType">
            <summary>
            Gets / sets the property type. 
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptor.FieldPropertyTypeString">
            <summary>
            Serialize helper for Xml Serialization of FieldPropertyType
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptor.Hide">
            <summary>
            Gets / sets Hide state of the field.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptor.AllowTrimEnd">
            <summary>
            Gets / sets whether the <see cref="M:Syncfusion.Grouping.FieldDescriptor.GetValue(Syncfusion.Grouping.Record)"/> method should trim whitespace at end of text
            if field is a string. This is useful if databases return string with fixed character length
            and fill up the rest of field with blanks. (Default is True.)
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptor.ForceImmediateSaveValue">
            <summary>
            Gets / sets whether changes to the field in a record should immeditaly trigger a SaveValue
            event without first calling BeginEdit on the current record. This property is usefull if you do
            want to have unbound fields that should not trigger ListChanged events when only the unbound property
            is modified on the current record.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptor.PreventUnboundFieldTypeCheck">
            <summary>Internal only.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptor.IsSorting">
            <summary>Internal only.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptor.ReferencedFields">
            <summary>
            Gets / sets ReferencedFields state of the field. Use a semicolon as delimiter
            when specifying multiple fields. The Engine will use these fields in the ListChanged event
            to determine which cells to update when a change was made in an underlying field.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptor.#ctor">
            <summary>
            Initializes a new empty expression field.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new expression field with a specified name.
            </summary>
            <param name="name">The name of the field.</param>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptor.#ctor(System.String,System.String)">
            <summary>
            Initializes a new expression field with a name and expression.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="expression">The expression. See the Grid User's Guide for expression syntax and examples.</param>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptor.#ctor(System.String,System.String,System.Type)">
            <summary>
            Initializes a new expression field with a name, expression, and result type.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="expression">The expression. See the Grid User's Guide for expression syntax and examples.</param>
            <param name="resultType">The result type.</param>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptor.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new expression field with a name, expression, and result type.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="expression">The expression. See the Grid User's Guide for expression syntax and examples.</param>
            <param name="resultType">The result type.</param>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptor.InitializeFrom(Syncfusion.Grouping.FieldDescriptor)">
            <summary>Creates a new expression field descriptor from another descriptor.</summary>
            <param name="other">Field descriptor which is used to create the new descriptor.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptor.Clone">
            <summary>Creates a copy of this descriptor.</summary>
            <returns>Copy of this descriptor.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptor.CopyExpressionFieldMembersTo(Syncfusion.Grouping.ExpressionFieldDescriptor)">
            <summary>
            Used to copy the expression fields
            </summary>
            <param name="ed">ExpressionFieldDescriptor</param>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptor.Equals(System.Object)">
            <summary>Compares this descriptor with another descriptor.</summary>
            <returns>True if both the descriptors are equivalent; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptor.GetHashCode">
            <summary>Serves as a hash function.</summary>
            <returns>Returns the hash code.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptor.ShouldSerializeResultType">
            <summary>
            Determines if <see cref="P:Syncfusion.Grouping.ExpressionFieldDescriptor.ResultType"/> was modified.
            </summary>
            <returns>True if the content was modified; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptor.GetPropertyType">
            <summary>Gets the property type.</summary>
            <returns>Property type.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptor.ResetResultType">
            <summary>
            Resets the result type to System.String.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptor.ResetExpression">
            <summary>
            Resets the formula expression to empty.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptor.GetCompiledExpression">
            <summary>
            Gets a string that holds pre-compiled information about the expression.
            </summary>
            <returns>A string that holds pre-compiled information about the expression.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptor.DetermineReferencedFields">
            <summary>
            Returns an array of field descriptor names that the expression references
            </summary>
            <returns>returns array of field descriptor names</returns>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptor.ResetCompiledExpression">
            <summary>
            Resets the compiled expression. It will be recompiled later on demand.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldDescriptor.GetValue(Syncfusion.Grouping.Record)">
            <summary>
            Calculates the expression result value for the specified record.
            </summary>
            <param name="record">The Record.</param>
            <returns>The Value of the record.</returns>
        </member>
        <member name="P:Syncfusion.Grouping.ExpressionFieldDescriptor.ResultType">
            <summary>
            The result type that the expression should be converted to (default is System.String).
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ExpressionFieldDescriptor.Expression">
            <summary>
            The formula expression. See the Grid user's guid for syntax and examples.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ExpressionFieldDescriptor.MappingName">
            <summary>
            Not used for expression fields.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ExpressionFieldDescriptor.DefaultValue">
            <summary>
            Not used for expression fields.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ExpressionFieldDescriptor.ReadOnly">
            <summary>
            Not used for expression fields.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.IExpressionFieldEvaluator">
            <summary>
            An interface that binds the formula logic to expression fields in the grouping engine. A
            default implementation of this interface is part of the grouping engine and there is normally
            no need to provide your own implementation. <para/>
            If you want to customize the formula calculation
            you need to implement this interface, override the <see cref="M:Syncfusion.Grouping.Engine.CreateExpressionFieldEvaluator(Syncfusion.Grouping.TableDescriptor)"/>
            of the <see cref="T:Syncfusion.Grouping.Engine"/> class, and create an instance of your implementation in your overriden method
            of CreateExpressionFieldEvaluator.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.IExpressionFieldEvaluator.ComputeFormulaValueAt(System.String,Syncfusion.Grouping.Record)">
            <summary>
            Calculates the expression result for the given record.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.IExpressionFieldEvaluator.PutTokensInFormula(System.String)">
            <summary>
            Replaces field references with internal tokens.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.IExpressionFieldEvaluator.Parse(System.String,System.Boolean)">
            <summary>
            Parses an expression and returns a pre-compiled expression.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.ResultTypeConverter">
            <summary>
            Implements a <see cref="T:System.ComponentModel.TypeConverter"/> for the <see cref="P:Syncfusion.Grouping.ExpressionFieldDescriptor.ResultType"/> property in
            <see cref="T:Syncfusion.Grouping.ExpressionFieldDescriptor"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ResultTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <override/>
            <summary>
            Returns whether this converter can convert an object of the given type to the
            type of this converter, using the specified context.
            </summary>        
            <param name="context">An <see
            cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format
            context. </param>
            <param name="sourceType">A <see cref="T:System.Type" /> that represents the type
            you want to convert from. </param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.ResultTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <override/>
            <summary>
            Converts the given object to the type of this converter, using the specified
            context and culture information.
            </summary>
            <param name="context">An <see
            cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format
            context. </param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to
            use as the current culture. </param>
            <param name="value">The <see cref="T:System.Object" /> to convert. </param>       
            <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be
            performed. </exception>
        </member>
        <member name="M:Syncfusion.Grouping.ResultTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <override/>
            <summary>
            Converts the given value object to the specified type, using the specified
            context and culture information.
            </summary>
            <param name="context">An <see
            cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format
            context. </param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If
            null is passed, the current culture is assumed. </param>
            <param name="value">The <see cref="T:System.Object" /> to convert. </param>
            <param name="destinationType">The <see cref="T:System.Type" /> to convert the
            value parameter to. </param>       
            <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter
            is null. </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be
            performed. </exception>
        </member>
        <member name="M:Syncfusion.Grouping.ResultTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
            <summary>
            Returns a collection of standard values for the data type this type converter is
            designed for when provided with a format context.
            </summary>
            <param name="context">An <see
            cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format
            context that can be used to extract additional information about the environment
            from which this converter is invoked. This parameter or properties of this
            parameter can be null. </param>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />
            that holds a standard set of valid values, or null if the data type does not
            support a standard set of values.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.ResultTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
            <summary>
            Returns whether the collection of standard values returned from <see
            cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> is an
            exclusive list of possible values, using the specified context.
            </summary>
            <param name="context">An <see
            cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format
            context. </param>
            <returns>
            true if the <see
            cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />
            returned from <see
            cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> is an
            exhaustive list of possible values; false if other values are possible.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.ResultTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
            <summary>
            Returns whether this object supports a standard set of values that can be picked
            from a list, using the specified context.
            </summary>
            <param name="context">An <see
            cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format
            context. </param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />
            should be called to find a common set of values the object supports; otherwise,
            false.
            </returns>
        </member>
        <member name="T:Syncfusion.Grouping.FieldDescriptorCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.FieldDescriptor"/> elements of a <see cref="T:Syncfusion.Grouping.FieldDescriptorCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollectionEnumerator.#ctor(Syncfusion.Grouping.FieldDescriptorCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.FieldDescriptorCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.FieldDescriptorTypeConverter">
            <summary>
            The type converter for <see cref="T:Syncfusion.Grouping.FieldDescriptor"/> objects. <see cref="T:Syncfusion.Grouping.FieldDescriptorTypeConverter"/>
            is a <see cref="T:Syncfusion.Grouping.DescriptorBaseConverter"/>. It overrides the default behavior of the
            <see cref="M:Syncfusion.Grouping.FieldDescriptorTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/> method and adds support for design-time code serialization.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <override/>
            <summary>Determines whether this object can be converted to the specified type, using the given format.</summary>
            <param name="context">Format context.</param>
            <param name="destinationType">Target type.</param>
            <returns>True if this conversion is supported; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <override/>
            <summary>Converts the given value to the specified type, using the given format and culture.</summary>
            <param name="context">Format context.</param>
            <param name="culture">The CultureInfo.</param>
            <param name="value">The object value.</param>
            <param name="destinationType">The Target type.</param>
            <returns>Converted object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <override/>
            <summary>
            Gets a list of <see cref="T:System.ComponentModel.PropertyDescriptor"/> objects for the specified component type.
            </summary>
            <param name="context">Format context.</param>
            <param name="value">Value specifying the component type.</param>
            <param name="attributes">Array of System.Attribute objects that will be used as a filter.</param>
            <returns>Property descriptor collection.</returns>
        </member>
        <member name="T:Syncfusion.Grouping.DynamicPropertyDescriptor">
            <summary>
            A class that provides an abstraction of a dynamic property.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.DynamicPropertyDescriptor.#ctor(System.String,System.Attribute[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Grouping.DynamicPropertyDescriptor">DynamicPropertyDescriptor</see> class. 
            </summary>
            <param name="name">Name of the property.</param>
            <param name="attributes">An array of attributes to associate with the property.</param>
        </member>
        <member name="M:Syncfusion.Grouping.DynamicPropertyDescriptor.GetPropertyType(Syncfusion.Grouping.TableDescriptor)">
            <summary>
            Returns the basic type of the dynamic property.
            </summary>
            <param name="tableDescriptor">table descriptor that holds the property details.</param>
            <returns>Type of the property</returns>
        </member>
        <member name="M:Syncfusion.Grouping.DynamicPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            When overridden in a derived class, returns whether resetting an object changes
            its value.
            </summary>
            <param name="component">The component to test for reset capability. </param>
            <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.DynamicPropertyDescriptor.GetValue(System.Object)">
            <summary>
            When overridden in a derived class, gets the current value of the property on a
            component.
            </summary>
            <param name="component">The component with the property for which to retrieve
            the value. </param>
            <returns>
            The value of a property for a given component.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.DynamicPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            When overridden in a derived class, resets the value for this property of the
            component to the default value.
            </summary>
            <param name="component">The component with the property value that is to be
            reset to the default value. </param>
        </member>
        <member name="M:Syncfusion.Grouping.DynamicPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, sets the value of the component to a
            different value.
            </summary>
            <param name="value">The new value. </param>
            <param name="component">The component with the property value that is to be set.
            </param>
        </member>
        <member name="M:Syncfusion.Grouping.DynamicPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            When overridden in a derived class, determines a value indicating whether the
            value of this property needs to be persisted.
            </summary>
            <param name="component">The component with the property to be examined for
            persistence. </param>
            <returns>
            true if the property should be persisted; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.DynamicPropertyDescriptor.ComponentType">
            <summary>
            When overridden in a derived class, gets the type of the component this property
            is bound to.
            </summary>
            <returns>
            A <see cref="T:System.Type" /> that represents the type of component this
            property is bound to. When the <see
            cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> or
            <see
            cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)"
            /> methods are invoked, the object specified might be an instance of this type.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.DynamicPropertyDescriptor.IsReadOnly">
            <summary>
            When overridden in a derived class, gets a value indicating whether this
            property is read-only.
            </summary>
            <returns>
            true if the property is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.DynamicPropertyDescriptor.PropertyType">
            <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
            <returns>
            A <see cref="T:System.Type" /> that represents the type of the property.
            </returns>
        </member>
        <member name="T:Syncfusion.Grouping.FieldDescriptorNameComparer">
            <summary>
            An IComparer implementation for comparing the names of
            two <see cref="T:Syncfusion.Grouping.FieldDescriptor"/> objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FieldDescriptorNameComparer.Compare(System.Object,System.Object)">
            <summary>
            Casts the objects to <see cref="T:Syncfusion.Grouping.FieldDescriptor"/> and compares
            the <see cref="P:Syncfusion.Grouping.FieldDescriptor.Name"/> of both objects.
            </summary>
            <param name="x">The first object.</param>
            <param name="y">The second object.</param>
            <returns>
            The result of string.Compare for the <see cref="P:Syncfusion.Grouping.FieldDescriptor.Name"/> of the
            two <see cref="T:Syncfusion.Grouping.FieldDescriptor"/> objects; 0 if both are the same.
            </returns>
        </member>
        <member name="T:Syncfusion.Grouping.QueryShowNestedPropertiesFieldsEventHandler">
            <summary>
            Represents a method that handles an event with <see cref="T:Syncfusion.Grouping.QueryShowNestedPropertiesFieldsEventArgs"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Syncfusion.Grouping.QueryShowNestedPropertiesFieldsEventArgs">
            <summary>
            The Engine.QueryShowNestedPropertiesFields event affects the autopopulation of the FieldDescriptorCollection. <para/>
            It lets you control at run-time if individual fields should be added for every property of a type
            when a type has nested properties. You can set e.Cancel = True to avoid nested fields
            being generated for a specific type.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.QueryShowNestedPropertiesFieldsEventArgs.#ctor(Syncfusion.Grouping.TableDescriptor,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Initializes the event args
            </summary>
            <param name="tableDescriptor">The tableDescriptor </param>
            <param name="propertyDescriptor">the propertyDescriptor</param>
        </member>
        <member name="P:Syncfusion.Grouping.QueryShowNestedPropertiesFieldsEventArgs.TableDescriptor">
            <summary>
            The TableDescriptor
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.QueryShowNestedPropertiesFieldsEventArgs.PropertyDescriptor">
            <summary>
            The PropertyDescriptor
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.QueryShowFieldEventHandler">
            <summary>
            Represents a method that handles an event with <see cref="T:Syncfusion.Grouping.QueryShowFieldEventArgs"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Syncfusion.Grouping.QueryShowFieldEventArgs">
            <summary>
            The Engine.QueryShowField event affects the autopopulation of the FieldDescriptorCollection. <para/>
            It is called for each field and lets you control at run-time if a specific field should be added
            to the FieldDescriptorCollection. You can set e.Cancel = True to avoid specific fields
            being added.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.QueryShowFieldEventArgs.#ctor(Syncfusion.Grouping.TableDescriptor,Syncfusion.Grouping.FieldDescriptor)">
            <summary>
            Initializes the event args
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.QueryShowFieldEventArgs.TableDescriptor">
            <summary>
            The TableDescriptor
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.QueryShowFieldEventArgs.Field">
            <summary>
            The FieldDescriptor
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.QueryShowRelationFieldsEventHandler">
            <summary>
            Represents a method that handles an event with <see cref="T:Syncfusion.Grouping.QueryShowRelationFieldsEventArgs"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Syncfusion.Grouping.QueryShowRelationFieldsEventArgs">
            <summary>
            The Engine.QueryShowRelationFields event affects the autopopulation of the FieldDescriptorCollection. <para/>
            It is called for each foreign key relation and lets you control at run-time if the related fields of the
            child table should be added to the FieldDescriptorCollection. You can set e.Cancel = True to avoid specific fields
            being added.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.QueryShowRelationFieldsEventArgs.#ctor(Syncfusion.Grouping.TableDescriptor,Syncfusion.Grouping.RelationDescriptor,Syncfusion.Grouping.ShowRelationFields)">
            <summary>
            Initializes the event args
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.QueryShowRelationFieldsEventArgs.TableDescriptor">
            <summary>
            The TableDescriptor
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.QueryShowRelationFieldsEventArgs.Relation">
            <summary>
            The Relation
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.QueryShowRelationFieldsEventArgs.ShowRelationFields">
            <summary>
            Specifies if dependent fields from a related table in a foreign key relation (or related collection)
            should be added to the
            main table's FieldDescriptorCollection. You can also control this behavior at run-time
            with the QueryShowRelationDisplayFields event. Default is ShowRelationFields.ShowDisplayFieldsOnly.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.ShowRelationFields">
            <summary>
            The Engine.ShowRelationField property affects the autopopulation of the FieldDescriptorCollection. <para/>
            It specifies if dependent fields from a related table in a foreign key relation (or related collection)
            should be added to the
            main tables FieldDescriptorCollection. You can also control this behavior at run-time
            with the QueryShowRelationDisplayFields event. Default is ShowRelationFields.ShowDisplayFieldsOnly.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.ShowRelationFields.Hide">
            <summary>
            Don't show fields.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.ShowRelationFields.ShowDisplayFieldsOnly">
            <summary>
            Show only dependent fields; hide primary and foreign keys.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.ShowRelationFields.ShowAllRelatedFields">
            <summary>
            Show all related fields including primary and foreign keys.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.TypeTypeConverter">
            <summary>
            Implements a <see cref="T:System.ComponentModel.TypeConverter"/> for the <see cref="P:Syncfusion.Grouping.FieldDescriptor.FieldPropertyType"/> property in
            <see cref="T:Syncfusion.Grouping.FieldDescriptor"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TypeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.TypeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.TypeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.TypeTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.</param>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> that holds a standard set of valid values, or null if the data type does not support a standard set of values.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.TypeTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> is an exclusive list of possible values, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> is an exhaustive list of possible values; false if other values are possible.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.TypeTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> should be called to find a common set of values the object supports; otherwise, false.
            </returns>
            <override/>
        </member>
        <member name="T:Syncfusion.Grouping.FilterLogicalOperator">
            <summary>
                Logical operator used by <see cref="T:Syncfusion.Grouping.RecordFilterDescriptor"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.FilterLogicalOperator.And">
            <summary>
            All conditions must be True.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.FilterLogicalOperator.Or">
            <summary>
            One of the conditions must be True.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.FilterCompareOperator">
            <summary>
            Comparison operator used by <see cref="T:Syncfusion.Grouping.FilterCondition"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.FilterCompareOperator.Equals">
            <summary>
            The value is equal.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.FilterCompareOperator.NotEquals">
            <summary>
            The value is not equal.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.FilterCompareOperator.LessThan">
            <summary>
            The left value is less than the right value.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.FilterCompareOperator.LessThanOrEqualTo">
            <summary>
            The left value is less than or equal to the right value.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.FilterCompareOperator.GreaterThan">
            <summary>
            The left value is greater than the right value.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.FilterCompareOperator.GreaterThanOrEqualTo">
            <summary>
            The left value is greater than or equal to the right value.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.FilterCompareOperator.Like">
            <summary>
            The left string matches the right pattern with wildcard characters, character lists, or character ranges.
            </summary>
            <remarks>
            The pattern-matching of the like operator allows you to match strings using wildcard characters,
            character lists, or character ranges in any combination. The following table shows the characters
            allowed in pattern and what they match:
            <list type="table">
            <listheader><term>Characters in pattern
            </term><description>Matches in string
            </description></listheader>
            <item><term>?</term><description>Any single character
            </description></item>
            <item><term>*
            </term><description>Zero or more characters
            </description></item>
            <item><term>#
            </term><description>Any single digit (0�9)
            </description></item>
            <item><term>[charlist]
            </term><description>Any single character in charlist
            </description></item>
            <item><term>[!charlist]
            </term><description>Any single character not in charlist
            </description></item>
            </list>
            For further information and examples, see the "Like operator" in the MSDN help (Visual Basic Language Reference).
            </remarks>
        </member>
        <member name="F:Syncfusion.Grouping.FilterCompareOperator.Match">
            <summary>
            The left string matches the right regular expression pattern. See ".NET Framework Regular Expressions" in MSDN Help
            for discussion and examples for regular expressions.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.FilterCompareOperator.Custom">
            <summary>
            A custom filter. A implementation object of <see cref="T:Syncfusion.Grouping.ICustomFilter"/> should be applied to the 
            <see cref="P:Syncfusion.Grouping.FilterCondition.CustomFilter"/> property of the <see cref="T:Syncfusion.Grouping.FilterCondition"/>  object.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.ICustomFilter">
            <summary>
            Provides a <see cref="M:Syncfusion.Grouping.ICustomFilter.CompareDescriptor(Syncfusion.Grouping.FilterCondition,Syncfusion.Grouping.Record)"/> method when <see cref="F:Syncfusion.Grouping.FilterCompareOperator.Custom"/>
            is specified for a <see cref="T:Syncfusion.Grouping.FilterCondition"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ICustomFilter.CompareDescriptor(Syncfusion.Grouping.FilterCondition,Syncfusion.Grouping.Record)">
            <summary>
            Called to determine if the record meets filter criteria of the specified condition.
            </summary>
            <param name="filterDescriptor">The condition.</param>
            <param name="record">The record to be tested.</param>
            <returns>True if record meets filter criteria; False otherwise.</returns>
        </member>
        <member name="T:Syncfusion.Grouping.RecordFilterDescriptorTypeConverter">
            <summary>
            The type converter for <see cref="T:Syncfusion.Grouping.RecordFilterDescriptor"/> objects. <see cref="T:Syncfusion.Grouping.RecordFilterDescriptorTypeConverter"/>
            is a <see cref="T:Syncfusion.Grouping.DescriptorBaseConverter"/>. It overrides the default behavior of the
            <see cref="M:Syncfusion.Grouping.RecordFilterDescriptorTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/> method and adds support for design-time code serialization.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Determines whether this object can be converted to the specified type, using the given format.</summary>
            <param name="context">Format context.</param>
            <param name="destinationType">Target type.</param>
            <returns>True if this conversion is supported; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value to the specified type, using the given format and culture.</summary>
            <param name="context">Format context.</param>
            <param name="culture">The CultureInfo.</param>
            <param name="value">The Value.</param>
            <param name="destinationType">Target type.</param>
            <returns>Converted object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for a given object type.
            </summary>
            <param name="context">Format context.</param>
            <param name="value">Object type.</param>
            <param name="attributes">An array of objects of type System.Attribute that will be used as a filter.</param>
            <returns>Property descriptor collection.</returns>
            <override/>
        </member>
        <member name="T:Syncfusion.Grouping.RecordFilterDescriptor">
            <summary>
            A RecordFilterDescriptor provides filter criteria for displaying only a
            subset of records from the underlying datasource. A filter can be specified through
            a collection of <see cref="T:Syncfusion.Grouping.FilterCondition"/> elements or with a formula expression
            similar to expressions used in <see cref="T:Syncfusion.Grouping.ExpressionFieldDescriptor"/>.
            <para/>
            RecordFilterDescriptors are managed by the <see cref="T:Syncfusion.Grouping.RecordFilterDescriptorCollection"/> that
            is returned by the <see cref="P:Syncfusion.Grouping.TableDescriptor.RecordFilters"/> property
            of a <see cref="P:Syncfusion.Grouping.RecordFilterDescriptor.TableDescriptor"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.#ctor">
            <summary>
            Initializes a new empty filter.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new filter based on a formula expression similar to expressions used in <see cref="T:Syncfusion.Grouping.ExpressionFieldDescriptor"/>.
            </summary>
            <param name="expression">A formula expression similar to expressions used in <see cref="T:Syncfusion.Grouping.ExpressionFieldDescriptor"/>.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.#ctor(System.String,System.String)">
            <summary>
            Initializes a new filter based on a formula expression similar to expressions used in <see cref="T:Syncfusion.Grouping.ExpressionFieldDescriptor"/>.
            </summary>
            <param name="name">The name of the field this filter is compared with. This name is used to look up fields in the Fields collection of the parent table descriptor.</param>
            <param name="expression">A formula expression similar to expressions used in <see cref="T:Syncfusion.Grouping.ExpressionFieldDescriptor"/>.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.CreateFilterConditionCollection(Syncfusion.Grouping.FilterCondition[])">
            <summary>
            Creates the <see cref="T:Syncfusion.Grouping.FilterConditionCollection"/> list.
            </summary>
            <returns>returns a new instance of FilterConditionCollection.</returns>
        </member>
        <member name="F:Syncfusion.Grouping.RecordFilterDescriptor.format">
            <summary>
            This is used to check the Format while filtering.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.#ctor(System.String,System.String,Syncfusion.Grouping.FilterLogicalOperator,Syncfusion.Grouping.FilterCondition[])">
            <summary>
            Initializes a new filter based on a collection of <see cref="T:Syncfusion.Grouping.FilterCondition"/>.
            </summary>
            <param name="name">The name of the field descriptor.</param>
            <param name="mappingName">The name of the field this filter is compared with. This name is used to look up fields in the Fields collection of the parent table descriptor.</param>
            <param name="logicalOperator">The logical operator used if multiple conditions are given.</param>
            <param name="conditions">The collection of conditions.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.#ctor(System.String,Syncfusion.Grouping.FilterLogicalOperator,Syncfusion.Grouping.FilterCondition[])">
            <summary>
            Initializes a new filter based on a collection of <see cref="T:Syncfusion.Grouping.FilterCondition"/>.
            </summary>
            <param name="name">The name of the field this filter is compared with. This name is used to look up fields in the Fields collection of the parent table descriptor.</param>
            <param name="logicalOperator">The logical operator used if multiple conditions are given.</param>
            <param name="conditions">The collection of conditions.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.#ctor(System.String,Syncfusion.Grouping.FilterCondition)">
            <summary>
            Initializes a new filter based on a collection of <see cref="T:Syncfusion.Grouping.FilterCondition"/>.
            </summary>
            <param name="name">The name of the field this filter is compared with. This name is used to look up fields in the Fields collection of the parent table descriptor.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.#ctor(System.String,System.String,Syncfusion.Grouping.FilterCondition)">
            <summary>
            Initializes a new filter based on a collection of <see cref="T:Syncfusion.Grouping.FilterCondition"/>.
            </summary>
            <param name="name">The name of the field descriptor.</param>
            <param name="mappingName">The name of the field this filter is compared with. This name is used to look up fields in the Fields collection of the parent table descriptor.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.InitializeFrom(Syncfusion.Grouping.RecordFilterDescriptor)">
            <summary>
            Initializes this object and copies properties from another object. <see cref="E:Syncfusion.Grouping.RecordFilterDescriptor.PropertyChanging"/>
            and <see cref="E:Syncfusion.Grouping.RecordFilterDescriptor.PropertyChanged"/> events are raised for every property that is modified. If both
            objects are equal, no events are raised.
            </summary>
            <param name="other">The source object.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.OnPropertyChanged(Syncfusion.Grouping.DescriptorPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.RecordFilterDescriptor.PropertyChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.DescriptorPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.OnPropertyChanging(Syncfusion.Grouping.DescriptorPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.RecordFilterDescriptor.PropertyChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.DescriptorPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.Clone">
            <summary>
            Creates a copy of this descriptor and all its conditions.
            </summary>
            <returns>A copy of this descriptor.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.CopyAllMembersTo(Syncfusion.Grouping.RecordFilterDescriptor)">
            <summary>
            Used to copy all the mebers
            </summary>
            <param name="rd"></param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.Equals(System.Object)">
            <summary>
            Determines whether the specified descriptor object is equal to the
            current descriptor.
            </summary>
            <param name="obj">The descriptor object to compare. </param>
            <returns>
            true if the specified descriptor is equal to the current
            descriptor; otherwise, false.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.ShouldSerializeConditions">
            <summary>
            Determines if filter conditions were added.
            </summary>
            <returns>True if filter conditions were added; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.GetName">
            <summary>Gets the descriptor name.</summary>
            <returns>Descriptor name.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.ShouldSerializeName">
            <summary>
            Determines if name is not empty.
            </summary>
            <returns>True if name is not empty; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.ResetName">
            <summary>
            Resets the name to be empty.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.ShouldSerializeMappingName">
            <summary>
            Determines if name is not empty.
            </summary>
            <returns>True if the name is not empty.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.ResetMappingName">
            <summary>
            Resets the name to be empty.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.ResetUniqueGroupId">
            <summary>
            Resets the <see cref="P:Syncfusion.Grouping.RecordFilterDescriptor.UniqueGroupId"/> to null.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.ShouldSerializeUniqueGroupId">
            <summary>
            Determines if <see cref="P:Syncfusion.Grouping.RecordFilterDescriptor.UniqueGroupId"/> should be serialized to code or xml.
            </summary>
            <returns>True if <see cref="P:Syncfusion.Grouping.RecordFilterDescriptor.UniqueGroupId"/> should be serialized; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.GetCompiledExpression">
            <summary>
            Gets a string that holds pre-compiled information about the expression.
            </summary>
            <returns>A string that holds pre-compiled information about the expression.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.ResetCompiledExpression">
            <summary>
            Resets the compiled expression. It will be recompiled later on demand.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.CompareRecordFilterBar(Syncfusion.Grouping.Record,Syncfusion.Grouping.FieldDescriptor)">
            <summary>
            Evaluates this condition for the given record and returns True if the record
            meets the condition.
            </summary>
            <param name="record">The record to be evaluated.</param>
            <param name="filterBarFieldDescriptor">If the underlying FilterDescriptor of this condition
            is the same as filterBarFieldDescriptor, this method will return True.</param>
            <returns>True if the record
            meets the condition; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.CompareRecord(Syncfusion.Grouping.Record)">
            <summary>
            Evaluates this filter for the given record and returns True if the record
            meets the filters criteria.
            </summary>
            <param name="record">The record to be evaluated.</param>
            <returns>True if the record
            meets the filters criteria; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.ResetCache">
            <summary>For internal use.</summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.CompareUniqueId(System.Object[])">
            <summary>
            Compares the specified Group.UniqueGroupId with this record filters RecordFilterDescriptor.UniqueGroupId.
            The method is used by FilterBarCells to find the filter criteria that matches the child group that a filter
            bar belongs to.
            </summary>
            <param name="uniqueId">A Group.UniqueGroupID to compare.</param>
            <returns>True if both UniqueGroupID are equal.; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptor.GetCustomPDC(System.ComponentModel.PropertyDescriptorCollection)">
            <summary>
             Used to represents the collection of property descriptor
            </summary>
            <param name="baseprops">PropertyDescriptorCollection</param>
            <returns></returns>
        </member>
        <member name="E:Syncfusion.Grouping.RecordFilterDescriptor.PropertyChanged">
            <summary>
            Occurs when a property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.RecordFilterDescriptor.PropertyChanging">
            <summary>
            Occurs before a property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordFilterDescriptor.FilterDisplay">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordFilterDescriptor.Format">
            <summary>
             Gets or sets the format string. This is used to check the Format while filtering.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordFilterDescriptor.Collection">
            <summary>
            The collection this descriptor belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordFilterDescriptor.TableDescriptor">
            <summary>
            The TableDescriptor that this descriptor belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordFilterDescriptor.Conditions">
            <summary>
            The collection of filter conditions.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordFilterDescriptor.LogicalOperator">
            <summary>
            The logical operator used if multiple conditions are given.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordFilterDescriptor.Name">
            <summary>
            The name of this filter descriptor or the name of the field this filter is compared with.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordFilterDescriptor.MappingName">
            <summary>
            The name of the field this filter is compared with. This name is used to look up fields in the Fields collection of the parent table descriptor.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordFilterDescriptor.UniqueGroupId">
            <summary>
            A <see cref="P:Syncfusion.Grouping.Group.UniqueGroupId"/> category the filter belongs to. This property is used by FilterBar 
            to identify the conditions that only belong to a certain uniqueGroupId. All RecordFilter objects that have
            the same UniqueGroupId will be combined with LogicalOperator.And.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordFilterDescriptor.Expression">
            <summary>
            A formula expression similar to expressions used in <see cref="T:Syncfusion.Grouping.ExpressionFieldDescriptor"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordFilterDescriptor.FieldDescriptor">
            <summary>
            Gets the field descriptor this record filter is applied to.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RecordFilterDescriptorCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Grouping.RecordFilterDescriptor"/> with filter criteria for displaying only a
            subset of records from the underlying datasource.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.TableDescriptor.RecordFilters"/> property
            of a <see cref="P:Syncfusion.Grouping.RecordFilterDescriptorCollection.TableDescriptor"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.ToString">
            <summary>Returns a string holding the current object.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.InitializeFrom(Syncfusion.Grouping.RecordFilterDescriptorCollection)">
            <summary>
            Copies settings from another collection and raises <see cref="E:Syncfusion.Grouping.RecordFilterDescriptorCollection.Changing"/> and <see cref="E:Syncfusion.Grouping.RecordFilterDescriptorCollection.Changed"/>
            events if differences to the other collection are detected.
            </summary>
            <param name="other">The source collection.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.#ctor">
            <summary>
            Initializes a new empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.#ctor(Syncfusion.Grouping.TableDescriptor)">
            <summary>
            Initializes a new empty collection and attaches it to a <see cref="P:Syncfusion.Grouping.RecordFilterDescriptorCollection.TableDescriptor"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.Clone">
            <summary>
            Creates a copy of the collection and all its elements.
            </summary>
            <returns>A copy of the collection and all its elements.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.Equals(System.Object)">
            <summary>Determines if the specified object is equivalent to current object.</summary>
            <param name="obj">An object to compare.</param>
            <returns>True if both the objects are equal; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.GetHashCode">
            <summary>Serves as a hash function.</summary>
            <returns>Hash code for the current object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.GetRecordFilters(System.String)">
            <summary>
             Gets the collection of RecordFilterDescriptor with the specified mapping name.
            </summary>
            <param name="mappingName">The MappingName of the elements to get.</param>
            <returns>Array of RecordFilterDescriptor with the specified mapping name.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.Contains(Syncfusion.Grouping.RecordFilterDescriptor)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.Contains(System.String)">
            <summary>
            Determines if the element with the specified name belongs to this collection.
            </summary>
            <param name="name">The name of the element to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.IndexOf(Syncfusion.Grouping.RecordFilterDescriptor)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.IndexOf(System.String)">
            <summary>
            Searches for the element with the specified name.
            </summary>
            <param name="name">The name of the element to locate in the collection. </param>
            <returns>The zero-based index of the occurrence of the element with matching name within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.CopyTo(Syncfusion.Grouping.RecordFilterDescriptor[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection.
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.Insert(System.Int32,Syncfusion.Grouping.RecordFilterDescriptor)">
            <summary>
            Inserts a descriptor element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="value">The element to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.Remove(Syncfusion.Grouping.RecordFilterDescriptor)">
            <summary>
            Removes the specified descriptor element from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.Add(Syncfusion.Grouping.RecordFilterDescriptor)">
            <summary>
            Adds a filter descriptor to the end of the collection.
            </summary>
            <param name="value">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.Add(System.String)">
            <summary>
            Creates a RecordFilterDescriptor based on the specified expression and adds it to the end of the collection.
            </summary>
            <param name="expression">The filter expression. See the Grid User's Guide for valid expressions.</param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.Add(System.String,Syncfusion.Grouping.FilterCompareOperator,System.Object)">
            <summary>
            Creates a RecordFilterDescriptor and adds it to the end of the collection.
            </summary>
            <param name="name">The name of the filter.</param>
            <param name="compareOperator">The comparison operator.</param>
            <param name="compareValue">The comparison value.</param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.Remove(System.String)">
            <summary>
            Removes the specified descriptor element with the specified name from the collection.
            </summary>
            <param name="name">The name of the element to remove from the collection. If no element with that name is found
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove. </param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.Dispose">
            <summary>
            Disposes the object and collection items.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.OnChanged(Syncfusion.Collections.ListPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.RecordFilterDescriptorCollection.Changed"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Collections.ListPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.OnChanging(Syncfusion.Collections.ListPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.RecordFilterDescriptorCollection.Changed"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Collections.ListPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.CompareRecord(Syncfusion.Grouping.Record)">
            <summary>
            Evaluates all filters for the given record and returns True if the record
            meets the filter's criteria.
            </summary>
            <param name="record">The record to be evaluated.</param>
            <returns>True if the record
            meets the filter's criteria; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.ResetCache">
            <summary>For internal use.</summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.CompareRecordFilterBar(Syncfusion.Grouping.Record,Syncfusion.Grouping.FieldDescriptor)">
            <summary>
            Evaluates all filters for the given record and returns True if the record
            meets the filter's criteria.
            </summary>
            <param name="record">The record to be evaluated.</param>
            <param name="filterBarFieldDescriptor">The FieldDescriptor of the Field in a FilterBar</param>
            <returns>True if the record
            meets the filter's criteria; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.OnPropertyChanged(Syncfusion.Grouping.DescriptorPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.RecordFilterDescriptorCollection.PropertyChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.DescriptorPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollection.OnPropertyChanging(Syncfusion.Grouping.DescriptorPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.RecordFilterDescriptorCollection.PropertyChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.DescriptorPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="E:Syncfusion.Grouping.RecordFilterDescriptorCollection.Changed">
            <summary>
            Occurs after a property in a nested element or the collection is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.RecordFilterDescriptorCollection.Changing">
            <summary>
            Occurs before a property in a nested element or the collection is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.RecordFilterDescriptorCollection.PropertyChanged">
            <summary>
            Occurs when a property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.RecordFilterDescriptorCollection.PropertyChanging">
            <summary>
            Occurs before a property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordFilterDescriptorCollection.TableDescriptor">
            <summary>
            The TableDescriptor that this collection belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordFilterDescriptorCollection.InsideCollectionEditor">
            <summary>
            Gets / sets whether the collection is manipulated inside a collection editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordFilterDescriptorCollection.Version">
            <summary>
            The version number of this collection. The version is increased each time the
            collection or an element within the collection was modified.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordFilterDescriptorCollection.Item(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordFilterDescriptorCollection.Item(System.String)">
            <summary>
            Gets / sets the element with the specified name.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordFilterDescriptorCollection.IsReadOnly">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordFilterDescriptorCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordFilterDescriptorCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordFilterDescriptorCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordFilterDescriptorCollection.LogicalOperator">
            <summary>
            Gets / sets the logical operator.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RecordFilterDescriptorCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.RecordFilterDescriptor"/> elements of a <see cref="T:Syncfusion.Grouping.RecordFilterDescriptorCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollectionEnumerator.#ctor(Syncfusion.Grouping.RecordFilterDescriptorCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="parentCollection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordFilterDescriptorCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.RecordFilterDescriptorCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.FilterConditionTypeConverter">
            <summary>
            The type converter for <see cref="T:Syncfusion.Grouping.FilterCondition"/> objects. <see cref="T:Syncfusion.Grouping.FilterConditionTypeConverter"/>
            is a <see cref="T:Syncfusion.Grouping.DescriptorBaseConverter"/>. It overrides the default behavior of the
            <see cref="M:Syncfusion.Grouping.FilterConditionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/> method and adds support for design-time code serialization.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Determines whether this object can be converted to the specified type, using the given format.</summary>
            <param name="context">Format context.</param>
            <param name="destinationType">Target type.</param>
            <returns>True if this conversion is supported; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <override/>
            <summary>Converts the given value to the specified type, using the given format and culture.</summary>
            <param name="context">Format context.</param>
            <param name="culture">The CultureInfo.</param>
            <param name="value">The Value.</param>
            <param name="destinationType">Target type.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns the collection of properties for a specified component type.
            </summary>
            <param name="context">Format context.</param>
            <param name="value">The Value specifying type.</param>
            <param name="attributes">Array of type System.Attribute that will be used as a filter.</param>
            <returns>Property descriptor collection.</returns>
            <override/>
        </member>
        <member name="T:Syncfusion.Grouping.FilterCondition">
            <summary>
            A <see cref="T:Syncfusion.Grouping.FilterCondition"/> is a child of a <see cref="T:Syncfusion.Grouping.RecordFilterDescriptor"/>
            with filter criteria for displaying only a subset of records from the underlying datasource.
            <see cref="T:Syncfusion.Grouping.FilterCondition"/> elements are stored in a collection that is returned by the
            <see cref="P:Syncfusion.Grouping.RecordFilterDescriptor.Conditions"/> property of a <see cref="T:Syncfusion.Grouping.RecordFilterDescriptor"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FilterCondition.#ctor">
            <summary>
            Initializes a new empty condition.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FilterCondition.#ctor(Syncfusion.Grouping.FilterCompareOperator,System.Object)">
            <summary>
            Initializes a new condition with comparison operator and comparison value.
            </summary>
            <param name="compareOperator">The comparison operator.</param>
            <param name="compareValue">The comparison value.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FilterCondition.GetName">
            <summary>
            Determines the name of this object.
            </summary>
            <returns>Object name.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FilterCondition.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FilterCondition.InitializeFrom(Syncfusion.Grouping.FilterCondition)">
            <summary>
            Initializes this object and copies properties from another object. <see cref="E:Syncfusion.Grouping.FilterCondition.PropertyChanging"/>
            and <see cref="E:Syncfusion.Grouping.FilterCondition.PropertyChanged"/> events are raised for every property that is modified. If both
            objects are equal, no events are raised.
            </summary>
            <param name="other">The source object.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FilterCondition.OnPropertyChanged(Syncfusion.Grouping.DescriptorPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.FilterCondition.PropertyChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.DescriptorPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FilterCondition.OnPropertyChanging(Syncfusion.Grouping.DescriptorPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.FilterCondition.PropertyChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.DescriptorPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FilterCondition.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
            <returns>A copy of this object.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FilterCondition.CopyAllMembersTo(Syncfusion.Grouping.FilterCondition)">
            <summary>
            Used to copy all the members.
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:Syncfusion.Grouping.FilterCondition.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the
            current object.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>
            True if the specified object is equal to the current
            object; otherwise, false.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FilterCondition.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FilterCondition.CompareRecordFilterBar(Syncfusion.Grouping.Record,Syncfusion.Grouping.FieldDescriptor)">
            <summary>
            Evaluates this condition for the given record and returns True if the record
            meets the condition.
            </summary>
            <param name="record">The record to be evaluated.</param>
            <param name="filterBarFieldDescriptor">If the underlying FilterDescriptor of this condition
            is the same as filterBarFieldDescriptor, this method will return True.</param>
            <returns>True if the record
            meets the condition; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FilterCondition.CompareRecord(Syncfusion.Grouping.Record)">
            <summary>
            Evaluates this condition for the given record and returns True if the record
            meets the condition.
            </summary>
            <param name="record">The record to be evaluated.</param>
            <returns>True if the record
            meets the condition; False otherwise.</returns>
        </member>
        <member name="E:Syncfusion.Grouping.FilterCondition.PropertyChanged">
            <summary>
            Occurs when a property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.FilterCondition.PropertyChanging">
            <summary>
            Occurs before a property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FilterCondition.Collection">
            <summary>
            The collection this descriptor belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FilterCondition.FilterDescriptor">
            <summary>
            The RecordFilterDescriptor this condition belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FilterCondition.CompareOperator">
            <summary>
            The comparison operator.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FilterCondition.CompareText">
            <summary>
            The comparison text.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FilterCondition.CompareValue">
            <summary>
            The comparison value.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FilterCondition.CustomFilter">
            <summary>
            An <see cref="T:Syncfusion.Grouping.ICustomFilter"/> if FilterCompareOperator.Custom was specified as <see cref="P:Syncfusion.Grouping.FilterCondition.CompareOperator"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.FilterConditionCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Grouping.FilterCondition"/> that are children of a <see cref="T:Syncfusion.Grouping.RecordFilterDescriptor"/>
            with filter criteria for displaying only a subset of records from the underlying datasource.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.RecordFilterDescriptor.Conditions"/> property
            of a <see cref="T:Syncfusion.Grouping.RecordFilterDescriptor"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollection.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>String representation of the object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollection.InitializeFrom(Syncfusion.Grouping.FilterConditionCollection)">
            <summary>
            Copies settings from another collection and raises <see cref="E:Syncfusion.Grouping.FilterConditionCollection.Changing"/> and <see cref="E:Syncfusion.Grouping.FilterConditionCollection.Changed"/>
            events if differences to the other collection are detected.
            </summary>
            <param name="other">The source collection.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollection.#ctor">
            <summary>
            Initializes a new empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollection.#ctor(Syncfusion.Grouping.FilterCondition[])">
            <summary>
            Used to represents the FilterConditionCollection
            </summary>
            <param name="filterDescriptors">FilterCondition</param>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollection.Clone">
            <summary>
            Creates a copy of the collection and all its elements.
            </summary>
            <returns>A copy of the collection and all its elements.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollection.CopyAllMembersTo(Syncfusion.Grouping.FilterConditionCollection)">
            <summary>
            Used to copy all the members
            </summary>
            <param name="coll">FilterConditionCollection</param>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollection.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the
            current object.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>
            True if the specified object is equal to the current
            object; otherwise, false.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollection.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollection.Contains(Syncfusion.Grouping.FilterCondition)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollection.IndexOf(Syncfusion.Grouping.FilterCondition)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollection.CopyTo(Syncfusion.Grouping.FilterCondition[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading of the data in the collection.
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollection.Insert(System.Int32,Syncfusion.Grouping.FilterCondition)">
            <summary>
            Inserts a descriptor element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="value">The element to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollection.Remove(Syncfusion.Grouping.FilterCondition)">
            <summary>
            Removes the specified descriptor element from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollection.Add(Syncfusion.Grouping.FilterCondition)">
            <summary>
            Adds FilterCondition to the end of the collection.
            </summary>
            <param name="value">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollection.Add(Syncfusion.Grouping.FilterCompareOperator,System.Object)">
            <summary>
            Creates a FilterCondition and adds it to the end of the collection.
            </summary>
            <param name="compareOperator">The comparison operator.</param>
            <param name="compareValue">The comparison value.</param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove. </param>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollection.Dispose">
            <summary>
            Disposes of the object and collection items.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollection.OnChanged(Syncfusion.Collections.ListPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.FilterConditionCollection.Changed"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Collections.ListPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollection.OnChanging(Syncfusion.Collections.ListPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.FilterConditionCollection.Changing"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Collections.ListPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="E:Syncfusion.Grouping.FilterConditionCollection.Changed">
            <summary>
            Occurs after a property in a nested element or the collection is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.FilterConditionCollection.Changing">
            <summary>
            Occurs before a property in a nested element or the collection is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FilterConditionCollection.InsideCollectionEditor">
            <summary>
            Gets / sets whether the collection is manipulated inside a collection editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FilterConditionCollection.Item(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FilterConditionCollection.IsReadOnly">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FilterConditionCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FilterConditionCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FilterConditionCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.FilterConditionCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.FilterCondition"/> elements of a <see cref="T:Syncfusion.Grouping.FilterConditionCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollectionEnumerator.#ctor(Syncfusion.Grouping.FilterConditionCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="parentCollection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FilterConditionCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.FilterConditionCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RelationChildColumnDescriptorCollection">
            <summary>
            A collection from <see cref="T:Syncfusion.Grouping.RelationChildColumnDescriptor"/> that are children of a <see cref="T:Syncfusion.Grouping.TableDescriptor"/>.
            A RelationChildColumnDescriptor defines the sort order of a related table which is defined by the child columns in a 
            a master details relation. <para/>
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.TableDescriptor.RelationChildColumns"/> property
            of a <see cref="T:Syncfusion.Grouping.TableDescriptor"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.SortColumnDescriptorCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Grouping.SortColumnDescriptor"/> descriptors that define the sort order or grouping of a table.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.TableDescriptor.SortedColumns"/> or <see cref="P:Syncfusion.Grouping.TableDescriptor.GroupedColumns"/> property
            of a <see cref="T:Syncfusion.Grouping.TableDescriptor"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.EnableOneTimePopulate">
            <summary>
            When called the ShouldPopulate property will be set true temporarily until
            the next EnsureInitialized call and then be reset again to optimize subsequent lookups.
            The Engine calls this method when schema changes occured (PropertyChanged was raised).
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.Reset">
            <summary>
            Resets the collection to its default state. If the collection is bound to a <see cref="T:Syncfusion.Grouping.TableDescriptor"/>,
            the collection will autopopulate itself the next time an item inside the collection is accessed.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.LoadDefault">
            <summary>
            Resets the collection to its default state, autopopulates the collection, and marks the collection
            as modified. Call this method if you want to load the default items for the collection and then
            modify them (e.g. remove members from the auto-populated list).
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.ToString">
            <summary>Returns a string representation of the current object.</summary>
            <returns>A string holding the current object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.ToArray">
            <summary>
            Returns an array of SortColumnDescriptor objects where elements reference items in this collection. (Elements are not copied).
            </summary>
            <returns>An array of SortColumnDescriptor objects.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.CheckType(System.Object)">
            <summary>
            Ensure type correctness when a new element is added to the collection.
            </summary>
            <param name="obj">The newly added object.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.CheckOutOfDate">
            <summary>
            Called internally to ensure all field descriptors are up to date after table descriptor is changed.
            </summary>
            <returns>true if field descriptors need to be reinitialized</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.InitializeFrom(Syncfusion.Grouping.SortColumnDescriptorCollection)">
            <overload>
            Copies settings from another collection and raises <see cref="E:Syncfusion.Grouping.SortColumnDescriptorCollection.Changing"/> and <see cref="E:Syncfusion.Grouping.SortColumnDescriptorCollection.Changed"/>
            events if differences to the other collections are detected.
            </overload>
            <summary>
            Copies settings from another collection and raises <see cref="E:Syncfusion.Grouping.SortColumnDescriptorCollection.Changing"/> and <see cref="E:Syncfusion.Grouping.SortColumnDescriptorCollection.Changed"/>
            events if differences to the other collection are detected.
            </summary>
            <param name="other">The source collection.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.InitializeFrom(Syncfusion.Grouping.SortColumnDescriptorCollection,System.Boolean)">
            <summary>
            Copies settings from another collection and raises <see cref="E:Syncfusion.Grouping.SortColumnDescriptorCollection.Changing"/> and <see cref="E:Syncfusion.Grouping.SortColumnDescriptorCollection.Changed"/>
            events if differences to the other collection are detected.
            </summary>
            <param name="other">The source collection.</param>
            <param name="raiseChangeEvents">Specifies if Changing and Changed events should be raised.</param>
            <returns>True if successfully initialized; False otherwise. </returns>
        </member>
        <member name="F:Syncfusion.Grouping.SortColumnDescriptorCollection.Empty">
            <summary>
            A Read-only and empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.#ctor">
            <overload>
            Initializes a new empty collection.
            </overload>
            <summary>
            Initializes a new empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.#ctor(Syncfusion.Grouping.TableDescriptor)">
            <summary>
            Initializes a new empty collection and attaches it to a <see cref="T:Syncfusion.Grouping.TableDescriptor"/>
            </summary>
            <param name="tableDescriptor">Table descriptor.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.AddRange(Syncfusion.Grouping.SortColumnDescriptor[])">
            <summary>
            Adds multiple elements at the end of the collection.
            </summary>
            <param name="columnDescriptors">The array whose elements should be added to the end of the collection.
            The array and its elements cannot be NULL references (Nothing in Visual Basic).
            </param>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.Clone">
            <summary>
            Creates a copy of the collection and all its elements.
            </summary>
            <returns>A copy of the collection and all its elements.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.CopyAllMembersTo(Syncfusion.Grouping.SortColumnDescriptorCollection)">
            <summary>
            Copies all members to another collection.
            </summary>
            <param name="coll">The target collection.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.InternalClone">
            <summary>
            Creates a copy of this collection and all its inner elements. This method is called from Clone.
            </summary>
            <returns>returns SortColumnDescriptorCollection</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.Equals(System.Object)">
            <summary>Determines if the specified object and current object are equal.</summary>
            <param name="obj">An object to compare.</param>
            <returns>True if the objects are equal; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.GetHashCode">
            <summary>Serves as a hash function.</summary>
            <returns>Hash code for the current object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.BumpVersion">
            <summary>
            Increases the version counter for this collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.Contains(Syncfusion.Grouping.SortColumnDescriptor)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.Contains(System.String)">
            <summary>
            Determines if the element with the specified name belongs to this collection.
            </summary>
            <param name="name">The name of the element to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.IndexOf(Syncfusion.Grouping.SortColumnDescriptor)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.IndexOf(System.String)">
            <summary>
            Searches for the element with the specified name.
            </summary>
            <param name="name">The name of the element to locate in the collection. </param>
            <returns>The zero-based index of the occurrence of the element with matching name within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.CopyTo(Syncfusion.Grouping.SortColumnDescriptor[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection.
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.Insert(System.Int32,Syncfusion.Grouping.SortColumnDescriptor)">
            <summary>
            Inserts a descriptor element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="value">The element to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.Remove(Syncfusion.Grouping.SortColumnDescriptor)">
            <summary>
            Removes the specified descriptor element from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.Add(Syncfusion.Grouping.SortColumnDescriptor)">
            <summary>
            Adds a SortColumnDescriptor to the end of the collection.
            </summary>
            <param name="value">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.Add(System.String)">
            <summary>
            Creates a SortColumnDescriptor with ListSortDirection.Ascending and adds it to the end of the collection.
            </summary>
            <param name="name">The field name.</param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.Add(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Creates a SortColumnDescriptor and adds it to the end of the collection.
            </summary>
            <param name="name">The field name.</param>
            <param name="sortDirection">The sort direction.</param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.InternalAdd(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Called to create a SortColumnDescriptor and add it to the end of the collection.
            </summary>
            <param name="name">The field name.</param>
            <param name="sortDirection">The sort direction.</param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.Remove(System.String)">
            <summary>
            Removes the specified descriptor element with the specified name from the collection.
            </summary>
            <param name="name">The name of the element to remove from the collection. If no element with that name is found
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove. </param>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.Dispose">
            <summary>
            Disposes the object and collection items.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.OnChanged(Syncfusion.Collections.ListPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.SortColumnDescriptorCollection.Changed"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Collections.ListPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollection.OnChanging(Syncfusion.Collections.ListPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.SortColumnDescriptorCollection.Changed"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Collections.ListPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:Syncfusion.Grouping.SortColumnDescriptorCollection.ShouldPopulate">
            <summary>
            Gets or sets whether collection should check for changes
            in engine schema or underlying datasource schema when EnsureInitialized gets called.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.SortColumnDescriptorCollection.Changed">
            <summary>
            Occurs after a property in a nested element or the collection was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.SortColumnDescriptorCollection.Changing">
            <summary>
            Occurs before a property in a nested element or the collection is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SortColumnDescriptorCollection.IsModified">
            <summary>
            Determines if the collection was modified from its default state.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SortColumnDescriptorCollection.InsideCollectionEditor">
            <summary>
            Gets / sets whether the collection is manipulated inside a collection editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SortColumnDescriptorCollection.Version">
            <summary>
            The version number of this collection. The version is increased each time the
            collection or an element within the collection was modified.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SortColumnDescriptorCollection.Item(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SortColumnDescriptorCollection.Item(System.String)">
            <summary>
            Gets / sets the element with the specified name.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SortColumnDescriptorCollection.IsReadOnly">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SortColumnDescriptorCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SortColumnDescriptorCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SortColumnDescriptorCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. The property also
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            </summary>
            <remarks>
            If changes in the TableDescriptor are detected, the
            method will reinitialize the field descriptors before returning the count.
            </remarks>
        </member>
        <member name="F:Syncfusion.Grouping.RelationChildColumnDescriptorCollection.Empty">
            <summary>
            A Read-only and empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptorCollection.CheckOutOfDate">
            <summary>
            Called internally to ensure all field descriptors are up to date after table descriptor is changed.
            </summary>
            <returns>
            true if field descriptors need to be reinitialized
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptorCollection.CheckType(System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptorCollection.InternalClone">
            <summary>
            Creates a copy of this collection and all its inner elements. This method is called from Clone.
            </summary>
            <returns>returns SortColumnDescriptorCollection</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptorCollection.AddRange(Syncfusion.Grouping.RelationChildColumnDescriptor[])">
            <summary>
            Adds multiple elements at the end of the collection.
            </summary>
            <param name="columnDescriptors">The array whose elements should be added to the end of the collection. 
            The array and its elements cannot be NULL references (Nothing in Visual Basic). 
            </param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptorCollection.Clone">
            <summary>
            Creates a copy of the collection and all its elements.
            </summary>
            <returns>A copy of the collection and all its elements.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptorCollection.InitializeFrom(Syncfusion.Grouping.RelationKeyDescriptorCollection)">
            <overload>
            Copies settings from another collection and raises <see cref="E:Syncfusion.Grouping.SortColumnDescriptorCollection.Changing"/> and <see cref="E:Syncfusion.Grouping.SortColumnDescriptorCollection.Changed"/>
            events if differences to the other collections are detected.
            </overload>
            <summary>
            Copies settings from another collection and raises <see cref="E:Syncfusion.Grouping.SortColumnDescriptorCollection.Changing"/> and <see cref="E:Syncfusion.Grouping.SortColumnDescriptorCollection.Changed"/>
            events if differences to the other collections are detected.
            </summary>
            <param name="other">The source collection.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptorCollection.InitializeFrom(Syncfusion.Grouping.RelationKeyDescriptorCollection,System.Boolean)">
            <summary>
            Copies settings from another collection and raises <see cref="E:Syncfusion.Grouping.SortColumnDescriptorCollection.Changing"/> and <see cref="E:Syncfusion.Grouping.SortColumnDescriptorCollection.Changed"/>
            events if differences to the other collections are detected.
            </summary>
            <param name="other">The source collection.</param>
            <param name="raiseChangeEvents">Specifies if Changing and Changed events should be raised.</param>
            <returns>True if the operation is successfully completed.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptorCollection.Equals(System.Object)">
            <summary>Determines if the specified object is equivalent to the current object.</summary>
            <param name="obj">An object to compare.</param>
            <returns>True if both objects are equal; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptorCollection.GetHashCode">
            <summary>Serves as a hash function.</summary>
            <returns>Hash code.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptorCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptorCollection.Add(System.String,System.String)">
            <summary>
            Adds a RelationChildColumnDescriptor to the end of the collection.
            </summary>
            <param name="parentColumnName">The name of the index field in the parent table.</param>
            <param name="childColumnName">The name of the index field in the child table.</param>       
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptorCollection.InternalAdd(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Called to create a SortColumnDescriptor and add it to the end of the collection.
            </summary>
            <param name="name">The field name.</param>
            <param name="sortDirection">The sort direction.</param>
            <returns>
            The zero-based collection index at which the value has been added.
            </returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.RelationChildColumnDescriptorCollection.Item(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationChildColumnDescriptorCollection.Item(System.String)">
            <summary>
            Gets / sets the element with the specified name.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RelationChildColumnDescriptor">
            <summary>
            A RelationChildColumnDescriptor defines the sort order of a related table which is defined by the child columns in a
            a master details relation. <para/>
            RelationChildColumnDescriptorare managed by the <see cref="T:Syncfusion.Grouping.RelationChildColumnDescriptorCollection"/> that is returned by the <see cref="P:Syncfusion.Grouping.TableDescriptor.RelationChildColumns"/> property
            of a <see cref="T:Syncfusion.Grouping.TableDescriptor"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.SortColumnDescriptor">
            <summary>
            A SortColumnDescriptor defines
            the sort order or grouping of a table.
            SortColumnDescriptors are managed by the <see cref="T:Syncfusion.Grouping.SortColumnDescriptorCollection"/> which
            is returned by the <see cref="P:Syncfusion.Grouping.TableDescriptor.SortedColumns"/> or <see cref="P:Syncfusion.Grouping.TableDescriptor.GroupedColumns"/> property
            of a <see cref="P:Syncfusion.Grouping.SortColumnDescriptor.TableDescriptor"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptor.#ctor">
            <summary>
            Initializes a new empty object.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new sort descriptor for the field with the given name.
            </summary>
            <param name="name">The field name.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptor.#ctor(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Initializes a new sort descriptor for the field with the given name.
            </summary>
            <param name="name">The field name.</param>
            <param name="sortDirection">The sort direction.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptor.ToString">
            <summary>Returns a string holding the current object.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptor.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptor.OnPropertyChanged(Syncfusion.Grouping.DescriptorPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.SortColumnDescriptor.PropertyChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.DescriptorPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptor.OnPropertyChanging(Syncfusion.Grouping.DescriptorPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.SortColumnDescriptor.PropertyChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptor.InternalClone">
            <summary>
            Called from <see cref="M:Syncfusion.Grouping.SortColumnDescriptor.Clone"/> to create a new object of the correct type and copies all its members to this
            new object with <see cref="M:Syncfusion.Grouping.SortColumnDescriptor.CopyAllMembersTo(Syncfusion.Grouping.SortColumnDescriptor)"/>.
            </summary>
            <returns>The new object.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptor.CopyAllMembersTo(Syncfusion.Grouping.SortColumnDescriptor)">
            <summary>
            Copies all members to another object without raising change events.
            </summary>
            <param name="sd">The target object.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptor.Clone">
            <summary>
            Creates a copy of this descriptor.
            </summary>
            <returns>A copy of this descriptor.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptor.Equals(System.Object)">
            <summary>Determines if the specified object and current object are equal.</summary>
            <param name="obj">An object to compare.</param>
            <returns>True if the objects are equal; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptor.InitializeFrom(Syncfusion.Grouping.SortColumnDescriptor)">
            <summary>
            Initializes this object and copies properties from another object. <see cref="E:Syncfusion.Grouping.SortColumnDescriptor.PropertyChanging"/>
            and <see cref="E:Syncfusion.Grouping.SortColumnDescriptor.PropertyChanged"/> events are raised for every property that is modified. If both
            objects are equal, no events are raised.
            </summary>
            <param name="other">The source object.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptor.GetHashCode">
            <summary>Serves as a hash function.</summary>
            <returns>Hash code.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptor.GetName">
            <summary>Gets the name of the descriptor.</summary>
            <returns>Descriptor name.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptor.InitFieldDescriptor(Syncfusion.Grouping.TableDescriptor)">
            <summary>
            Called internally to initalize field descriptor for the Name of the field.
            </summary>
            <param name="tableDescriptor">The table descriptor for the field.</param>
            <returns>True if field descriptor was found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptor.SetGroupSummarySortOrder(System.String,System.String)">
            <summary>
            Sets a custom comparer for sorting groups if groups should be sorted in a different
            order than the category, e.g. sort by summary values of nested groups.
            </summary>
            <param name="summaryDescriptorName">Name of the summary descriptor.</param>
            <param name="propertyName">Summary function.</param>
            <example>This example shows how to customize sorting of groups that were categorized based on ShipVia field. The groups will be sorted by the value of a summary in the group.
            <code lang="C#">
             <para/>
                this.gridGroupingControl1.TableDescriptor.GroupedColumns.Clear();
                SortColumnDescriptor gsd = new SortColumnDescriptor("ShipCountry");
                gsd.SetGroupSummarySortOrder(summaryColumn1.GetSummaryDescriptorName(), "Average", ListSortDirection.Ascending);
                this.gridGroupingControl1.InvalidateAllWhenListChanged = true;
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptor.SetGroupSummarySortOrder(System.String,System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Sets a custom comparer for sorting groups if groups should be sorted in a different
            order than the category, e.g. sort by summary values of nested groups.
            </summary>
            <param name="summaryDescriptorName">Name of the summary descriptor.</param>
            <param name="propertyName">Summary function.</param>
            <param name="sortDirection">Sort order.</param>
            <example>This example shows how to customize sorting of groups that were categorized based on ShipVia field. The groups will be sorted by the value of a summary in the group.
            <code lang="C#">
            <para/>
                this.gridGroupingControl1.TableDescriptor.GroupedColumns.Clear();
                SortColumnDescriptor gsd = new SortColumnDescriptor("ShipCountry");
                gsd.SetGroupSummarySortOrder(summaryColumn1.GetSummaryDescriptorName(), "Average", ListSortDirection.Ascending);
                this.gridGroupingControl1.InvalidateAllWhenListChanged = true;
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.Grouping.SortColumnDescriptor.PropertyChanged">
            <summary>
            Occurs when a property was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.SortColumnDescriptor.PropertyChanging">
            <summary>
            Occurs before a property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SortColumnDescriptor.Collection">
            <summary>
            The collection this descriptor belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SortColumnDescriptor.TableDescriptor">
            <summary>
            The TableDescriptor that this descriptor belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SortColumnDescriptor.Name">
            <summary>
            The name of the field to sort. Usually the same as the corresponding GridColumnDescriptor.MappingName or FieldDescriptor.Name.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SortColumnDescriptor.FieldDescriptor">
            <summary>
            Gets the <see cref="P:Syncfusion.Grouping.SortColumnDescriptor.FieldDescriptor"/> in the parent table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SortColumnDescriptor.IsSorting">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.SortColumnDescriptor.Categorizer">
            <summary>
            Gets / sets a custom categorizer for categorizing records in the table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SortColumnDescriptor.Comparer">
            <summary>
            Gets / sets a custom comparer for sorting records in the table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SortColumnDescriptor.GroupSortOrderComparer">
            <summary>
            Gets / sets a custom comparer for sorting groups if groups should be sorted in a different
            order than the category, e.g. sort by summary values of nested groups.
            </summary>
            <example>This example shows how to customize sorting of groups that were categorized based on ShipVia field. The groups will be sorted by the value of a summary in the group.
            <code lang="C#">
             <para/>
                this.gridGroupingControl1.TableDescriptor.GroupedColumns.Clear();
                SortColumnDescriptor gsd = new SortColumnDescriptor("ShipCountry");
                gsd.GroupSortOrderComparer = new ShipViaComparer(summaryColumn1.GetSummaryDescriptorName(), "Average");
                this.gridGroupingControl1.TableDescriptor.GroupedColumns.Add(gsd);
                this.gridGroupingControl1.InvalidateAllWhenListChanged = true;
             <para/>
             <para/>
            public class ShipViaComparer : object, IGroupSortOrderComparer
            {
                string summaryDescriptorName;
                string propertyName;
             <para/>
                public ShipViaComparer(string summaryDescriptorName, string propertyName)
                {
                    this.summaryDescriptorName = summaryDescriptorName;
                    this.propertyName = propertyName;
                }
             <para/>
                #region IComparer Members
             <para/>
                public int Compare(object x, object y)
                {
                    Group gx = (Group) x;
                    Group gy = (Group) y;
             <para/>
                    bool strongTyped = true;
             <para/>
                    if (strongTyped)
                    {
                        // strong typed   (propertyName is ignored ...)
                        DoubleAggregateSummary dasx = (DoubleAggregateSummary) gx.GetSummary(summaryDescriptorName);
                        DoubleAggregateSummary dasy = (DoubleAggregateSummary) gy.GetSummary(summaryDescriptorName);
             <para/>
                        int v = dasx.Average.CompareTo(dasy.Average);
                        // Console.WriteLine("Compare {0} to {1}: {2}", dasx.Average, dasy.Average, v);
                        return v;
                    }
                    else
                    {
                        // using reflection (slower but more flexible using propertyName)
                        object vx = gx.GetSummaryProperty(summaryDescriptorName, propertyName);
                        object vy = gy.GetSummaryProperty(summaryDescriptorName, propertyName);
             <para/>
                        return ((IComparable) vx).CompareTo(vy);
                    }
                }
             <para/>
                #endregion
             <para/>    
                public string[] GetDependantFields(TableDescriptor td)
                {
                    SummaryDescriptor sd = td.Summaries[summaryDescriptorName];
                    if (sd == null)
                        return new string[0];
                    return new string[] { sd.MappingName };
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Grouping.SortColumnDescriptor.SortDirection">
            <summary>
            The sort direction.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptor.InternalClone">
            <summary>
            Called from <see cref="M:Syncfusion.Grouping.RelationChildColumnDescriptor.Clone"/> to create a new object of the correct type and copies all its members to this
            new object with <see cref="M:Syncfusion.Grouping.SortColumnDescriptor.CopyAllMembersTo(Syncfusion.Grouping.SortColumnDescriptor)"/>.
            </summary>
            <returns>The new object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptor.InitFieldDescriptor(Syncfusion.Grouping.TableDescriptor)">
            <summary>Initializes a field descriptor.</summary>
            <param name="tableDescriptor">Table descriptor.</param>
            <returns>True if the field descriptor is initialized successfully.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptor.#ctor">
            <summary>
            Initalizes a new empty descriptor.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptor.#ctor(System.String,System.String)">
            <summary>
            Initalizes a new descriptor with parent and child column names identifying the fields
            that establish the relation between two tables.
            </summary>
            <param name="parentColumnName">Parent column name.</param>
            <param name="childColumnName">Child column name.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptor.Clone">
            <summary>
            Creates a copy of this descriptor.
            </summary>
            <returns>A copy of this descriptor.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptor.InitializeFrom(Syncfusion.Grouping.SortColumnDescriptor)">
            <summary>
            Initializes this object and copies properties from another object.
            </summary>
            <param name="other">The source object.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptor.Equals(System.Object)">
            <summary>Determines if the specified object is equivalent to the current object.</summary>
            <param name="obj">The object to compare.</param>
            <returns>True if both objects are equal; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptor.GetHashCode">
            <summary>Serves as a hash function.</summary>
            <returns>Hash code.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.RelationChildColumnDescriptor.ParentFieldDescriptor">
            <summary>
            The FieldDescriptor for the <see cref="P:Syncfusion.Grouping.RelationChildColumnDescriptor.ParentColumnName"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationChildColumnDescriptor.Collection">
            <summary>
            The collection this descriptor belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationChildColumnDescriptor.ParentColumnName">
            <summary>
            The field name of the column in the parent table that establishes the relation between the two tables.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RelationChildColumnDescriptorCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.RelationChildColumnDescriptor"/> elements of a <see cref="T:Syncfusion.Grouping.RelationChildColumnDescriptorCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptorCollectionEnumerator.#ctor(Syncfusion.Grouping.RelationChildColumnDescriptorCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptorCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationChildColumnDescriptorCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.RelationChildColumnDescriptorCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RelationKind">
            <summary>
            Various types of relations between two tables:
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.RelationKind.RelatedMasterDetails">
            <summary>
            A Master-Details relation where matching keys in columns in the parent and child tables define
            a relationship between two tables. This a 1:n relation where each record in the child table
            can only belong to one parent record.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.RelationKind.ForeignKeyKeyWords">
            <summary>
            A foreign key relation where matching keys in columns in the parent and child table define
            a relationship between two tables. This a m:n relation. Field summaries of the related child table can
            be referenced using a '.' dot in the FieldDescriptor.MappingName of the main table.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.RelationKind.UniformChildList">
            <summary>
            Nested strong-typed collection inside a parent collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.RelationKind.ForeignKeyReference">
            <summary>
            A foreign-key relation for looking up values where an id column in the main table can be used
            to look up a record in a related table. This is an n:1 relation where multiple records in the parent
            table can reference the same record in the related table. Fields in the related table can
            be referenced using a '.' dot in the FieldDescriptor.MappingName of the main table.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.RelationKind.ListItemReference">
            <summary>
            A object reference relation for looking up values from a strong typed collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RelationDescriptorCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Grouping.RelationDescriptor"/> with constraints for a relation
            between two tables and schema information of child tables. An instance of this
            collection is returned by the <see cref="P:Syncfusion.Grouping.TableDescriptor.Relations"/> property
            of a <see cref="T:Syncfusion.Grouping.TableDescriptor"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.EnableOneTimePopulate">
            <summary>
            When called the ShouldPopulate property will be set true temporarily until
            the next EnsureInitialized call and then be reset again to optimize subsequent lookups.
            The Engine calls this method when schema changes occured (PropertyChanged was raised).
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.RelationDescriptorCollection.Empty">
            <summary>
            A Read-only and empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.ToString">
            <summary>Returns a string holding the current object. </summary>
            <returns>String representation of the current object. </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.Modify">
            <summary>
            Marks the collection as modified and avoids auto-population.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.InitializeFrom(Syncfusion.Grouping.RelationDescriptorCollection)">
            <summary>
            Copies settings from another collection and raises <see cref="E:Syncfusion.Grouping.RelationDescriptorCollection.Changing"/> and <see cref="E:Syncfusion.Grouping.RelationDescriptorCollection.Changed"/>
            events if differences to the other collection are detected.
            </summary>
            <param name="other">The source collection.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.#ctor">
            <summary>
            Initializes a new empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.Reset">
            <summary>
            Resets the collection to its default state. If the collection is bound to a <see cref="T:Syncfusion.Grouping.TableDescriptor"/>,
            the collection will autopopulate itself the next time an item inside the collection is accessed.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.LoadDefault">
            <summary>
            Resets the collection to its default state, autopopulates the collection, and marks the collection
            as modified. Call this method if you want to load the default items for the collection and then
            modify them (e.g. remove members from the auto-populated list).
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.AddRange(Syncfusion.Grouping.RelationDescriptor[])">
            <summary>
            Adds multiple elements at the end of the collection.
            </summary>
            <param name="relationDescriptors">The array whose elements should be added to the end of the collection.
            The array and its elements cannot be NULL references (Nothing in Visual Basic).
            </param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.OnChanged(Syncfusion.Collections.ListPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.RelationDescriptorCollection.Changed"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Collections.ListPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.OnChanging(Syncfusion.Collections.ListPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.RelationDescriptorCollection.Changing"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Collections.ListPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="F:Syncfusion.Grouping.RelationDescriptorCollection.VerboseEnsureInitialized">
            <summary>
            Debug Helper. Set this true if you want to have verbose output to Debug window for lazy population.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.ContainsNestedRelation(System.Data.DataTable,System.String)">
            <summary>
            Checks if the relatedTable has MasterDetailsRelation with MappingName equal to constraintName
            or if other related tables have a MasterDetailsRelation with MappingName equal to constraintName.
            </summary>
            <param name="relatedTable">The DataTable</param>
            <param name="constraintName">The constraint name</param>
            <returns>returns boolean value to check if relatedTable has MasterDetailsRelation with MappingName equal to constraintName</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.Clone">
            <summary>
            Creates a copy of the collection and all its elements.
            </summary>
            <returns>A copy of the collection and all its elements.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.Equals(System.Object)">
            <summary>Determines if the specified object and current object are equal.</summary>
            <param name="obj">An object to compare.</param>
            <returns>True if both objects are equal; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.GetHashCode">
            <summary>Serves as a hash function.</summary>
            <returns>Hash code.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.Contains(Syncfusion.Grouping.RelationDescriptor)">
            <overload>
            Determines if the element belongs to this collection.
            </overload>
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.Contains(System.String)">
            <summary>
            Determines if an element with the specified name belongs to this collection.
            </summary>
            <param name="name">The name of the element to locate in the collection. </param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.IndexOf(Syncfusion.Grouping.RelationDescriptor)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.IndexOf(System.String)">
            <summary>
            Searches for the element with the specified name.
            </summary>
            <param name="name">The name of the element to locate in the collection. </param>
            <returns>The zero-based index of the occurrence of the element with matching name within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.CopyTo(Syncfusion.Grouping.RelationDescriptor[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection.
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.Insert(System.Int32,Syncfusion.Grouping.RelationDescriptor)">
            <summary>
            Inserts a descriptor element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="value">The element to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.Remove(Syncfusion.Grouping.RelationDescriptor)">
            <summary>
            Removes the specified descriptor element from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection the method will do nothing.</param>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.Add(Syncfusion.Grouping.RelationDescriptor)">
            <summary>
            Adds RelationDescriptor to the end of the collection.
            </summary>
            <param name="value">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.Remove(System.String)">
            <summary>
            Removes the specified descriptor element with the specified name from the collection.
            </summary>
            <param name="name">The name of the element to remove from the collection. If no element with that name is found
            in the collection, the method will do nothing.</param>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove. </param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.Dispose">
            <summary>
            Disposes the object and collection items.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptorCollection.ShouldPopulate">
            <summary>
            Gets or sets whether collection should check for changes
            in engine schema or underlying datasource schema when EnsureInitialized gets called.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.RelationDescriptorCollection.Changed">
            <summary>
            Occurs after a property in a nested element or the collection is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.RelationDescriptorCollection.Changing">
            <summary>
            Occurs before a property in a nested element or the collection is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptorCollection.InsideCollectionEditor">
            <summary>
            Gets / sets whether the collection is manipulated inside a collection editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptorCollection.NestedCount">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptorCollection.ParentTableDescriptor">
            <summary>
            The parent TableDescriptor this descriptor belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptorCollection.HasSelfRelation">
            <summary>
            Determines if a self-relation was found when the collection was auto-populated.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptorCollection.Version">
            <summary>
            The version number of this collection. The version is increased each time the
            collection or an element within the collection was modified.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptorCollection.IsModified">
            <summary>
            Determines if the collection was modified from its default state.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptorCollection.Item(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptorCollection.Item(System.String)">
            <summary>
            Gets / sets the element with the specified name.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptorCollection.IsReadOnly">
            <summary>
            Determines if the collection is Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptorCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptorCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptorCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. The property also
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            </summary>
            <remarks>
            The method calls <see cref="M:Syncfusion.Grouping.RelationDescriptorCollection.EnsureInitialized(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="T:Syncfusion.Grouping.RelationDescriptorCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.RelationDescriptor"/> elements of a <see cref="T:Syncfusion.Grouping.RelationDescriptorCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollectionEnumerator.#ctor(Syncfusion.Grouping.RelationDescriptorCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptorCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RelationDescriptorTypeConverter">
            <summary>
            The type converter for <see cref="T:Syncfusion.Grouping.RelationDescriptor"/> objects. <see cref="T:Syncfusion.Grouping.RelationDescriptorTypeConverter"/>
            is a <see cref="T:Syncfusion.Grouping.DescriptorBaseConverter"/>. It overrides the default behavior of the
            ConvertTo method and adds support for design-time code serialization.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <override/>
            <summary>
            Returns a collection of properties for the specified type.
            </summary>
            <param name="context">Format context.</param>
            <param name="value">Object type.</param>
            <param name="attributes">An array of objects of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>Property descriptor collection.</returns>
        </member>
        <member name="T:Syncfusion.Grouping.RelationDescriptorNameComparer">
            <summary>
            An IComparer implementation for comparing the names of
            two <see cref="T:Syncfusion.Grouping.RelationDescriptor"/> objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptorNameComparer.Compare(System.Object,System.Object)">
            <summary>
            Casts the objects to <see cref="T:Syncfusion.Grouping.RelationDescriptor"/> and compares
            the <see cref="P:Syncfusion.Grouping.RelationDescriptor.Name"/> of both objects.
            </summary>
            <param name="x">The first object.</param>
            <param name="y">The second object.</param>
            <returns>True if both have the same name; False otherwise.</returns>
        </member>
        <member name="T:Syncfusion.Grouping.RelationDescriptor">
            <summary>
            A RelationDescriptor defines constraints for a relation
            between two tables and schema information of child tables.
            RelationDescriptors are managed by the <see cref="T:Syncfusion.Grouping.RelationDescriptorCollection"/> which
            is returned by the <see cref="P:Syncfusion.Grouping.TableDescriptor.Relations"/> property
            of a <see cref="T:Syncfusion.Grouping.TableDescriptor"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.#ctor">
            <summary>
            Initializes a new empty relation descriptor.
            </summary>
            <summary>
            Initializes a new empty relation descriptor.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new relation descriptor with the given name.
            </summary>
            <param name="relationName">Name of the relation.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.ResetMappingName">
            <summary>
            Resets the mapping name.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.ShouldSerializeRelationKind">
            <summary>
            Determines if <see cref="P:Syncfusion.Grouping.RelationDescriptor.RelationKind"/> property was modified.
            </summary>
            <returns>True if the property was modified.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.ResetRelationKind">
            <summary>
            Resets the relation kind to RelationDescriptor.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.ShouldSerializeAllowCacheChildList">
            <summary>
            Determines if <see cref="P:Syncfusion.Grouping.RelationDescriptor.AllowCacheChildList"/> property was modified.
            </summary>
            <returns>True if the property was modified.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.ResetAllowCacheChildList">
            <summary>
            Resets the AllowCacheChildList property.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.ShouldSerializeRelationKeys">
            <summary>
            Determines if RelationKeys have been added.
            </summary>
            <returns>True if the RelationKeys have been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.ResetRelationKeys">
            <summary>
            Clears <see cref="P:Syncfusion.Grouping.RelationDescriptor.RelationKeys"/>.
            </summary>     
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.EnsureInitialized">
            <summary>
            Ensures relation keys are properly initialized after changes to the parent table descriptor.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.OnPropertyChanging(Syncfusion.Grouping.DescriptorPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.RelationDescriptor.PropertyChanging"/> event.
            </summary>
            <param relationName="e" name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.OnPropertyChanged(Syncfusion.Grouping.DescriptorPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.RelationDescriptor.PropertyChanged"/> event.
            </summary>
            <param relationName="e" name="e">A <see cref="T:Syncfusion.Grouping.DescriptorPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.Reset">
            <summary>Resets the relation.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.InitializeFrom(Syncfusion.Grouping.RelationDescriptor)">
            <summary>
            Initializes this object and copies properties from another object. <see cref="E:Syncfusion.Grouping.RelationDescriptor.PropertyChanging"/>
            and <see cref="E:Syncfusion.Grouping.RelationDescriptor.PropertyChanged"/> events are raised for every property that is modified. If both
            objects are equal, no events are raised.
            </summary>
            <param name="other">The source object.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.CopyMembersFrom(Syncfusion.Grouping.RelationDescriptor)">
            <summary>
            Copies all properties from another element without raising Changing or Changed events.
            </summary>
            <param name="other">The source object.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.Clone">
            <summary>
            Creates a copy of this descriptor and copies also the child table descriptor.
            </summary>
            <returns>A copy of this descriptor.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.Equals(System.Object)">
            <summary>Determines if the specified object is equivalent to the current object.</summary>
            <param name="obj">An object to compare.</param>
            <returns>True if the objects are equivalent; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.GetHashCode">
            <summary>Serves as a hash function.</summary>
            <returns>Hash code.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.GetName">
            <summary>Returns descriptor name.</summary>
            <returns>Descriptor name.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.ShouldSerializeName">
            <summary>
            Determines if relation name was modified from default.
            </summary>
            <returns>True if relation name was modified.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.ResetName">
            <summary>
            Resets the relation name back to default.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.ShouldSerializeChildTableDescriptor">
            <summary>
            Determines if the child table descriptor or any of its inner properties was modified.
            </summary>
            <returns>True if the child table descriptor was modified.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.ResetChildTableDescriptor">
            <summary>
            Resets the child table descriptor back to its default state.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.IsChildTableDescriptorCreated">
            <summary>
            Determines if an instance for the ChildTableDescriptor has been created.
            </summary>
            <returns>true if TableDescriptor was created,</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.CreateChildTableDescriptor">
            <summary>
            Called to create the <see cref="T:Syncfusion.Grouping.TableDescriptor"/> for the child table.
            </summary>
            <returns>A new <see cref="T:Syncfusion.Grouping.TableDescriptor"/>.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.GetStandardValues(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns an array of standard values used by <see cref="T:Syncfusion.Grouping.StandardValuesCollectionConverter"/>.
            </summary>
            <param name="propertyDescriptor">The context.PropertyDescriptor of a TypeConverter.GetStandardValues method.</param>
            <returns>An array of standard values used by <see cref="T:Syncfusion.Grouping.StandardValuesCollectionConverter"/>.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.ShouldSerializeChildTableName">
            <summary>
            Determines if a ChildTableName was specified.
            </summary>
            <returns>True if the ChilTableName was specified.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.ResetChildTableName">
            <summary>
            Resets the name of the child table.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.ResetHeaderText">
            <summary>
            Resets the header text.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.ToString">
            <summary>Returns a string holding the current object.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationDescriptor.GetCustomPDC(System.ComponentModel.PropertyDescriptorCollection)">
            <summary>
            Used to represents the collection of property descriptor
            </summary>
            <param name="baseprops">PropertyDescriptorCollection</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptor.DisposedId">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptor.MappingName">
            <summary>
            The name of a PropertyDescriptor in the parent table that contains details
            about this relation. With a DataTable for example, there will be a DataRelation
            with such a MappingName. The MappingName can also be the name of child-collection
            when the main table is a strong-typed collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptor.RelationKind">
            <summary>
            The type of relation this descriptor defines.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptor.AllowCacheChildList">
            <summary>
            If RelationKind.UniformChildList was specified, this value indicates whether
            the ChildList / Related View that is associated with a view can be cached or
            if it should be requeried each time by calling PropertyDescriptor.GetValue(MappingName).
            Note that a DataView will always create a new DataRelatedView in such case and
            therefore it is recommended to allow cache the child list.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptor.RelationKeys">
            <summary>
            A collection of <see cref="T:Syncfusion.Grouping.RelationKeyDescriptor"/> that defines the mapping between parent and child columns in a master details relation.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptor.Collection">
            <summary>
            The collection this descriptor belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptor.ParentTableDescriptor">
            <summary>
            The parent TableDescriptor this descriptor belongs to.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.RelationDescriptor.PropertyChanged">
            <summary>
            Occurs when a property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.RelationDescriptor.PropertyChanging">
            <summary>
            Occurs before a property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptor.Name">
            <summary>
            The name of this relation.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptor.ChildTableDescriptor">
            <summary>
            The TableDescriptor that describes the child table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptor.ChildTableName">
            <summary>
            The name of the child table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationDescriptor.HeaderText">
            <summary>
            The header text to be displayed in the column header.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.QueryAddRelationEventHandler">
            <summary>
            Represents a method that handles an event with <see cref="T:Syncfusion.Grouping.QueryAddRelationEventArgs"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Syncfusion.Grouping.QueryAddRelationEventArgs">
            <summary>
            The Engine.QueryAddRelation event affects the autopopulation of the RelationDescriptorCollection. <para/>
            It is called for each relation that is found in a DataView. You can set e.Cancel = True to avoid specific relations
            being added.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.QueryAddRelationEventArgs.#ctor(Syncfusion.Grouping.TableDescriptor,Syncfusion.Grouping.RelationDescriptor)">
            <summary>
            Initializes the event args
            </summary>
            <param name="tableDescriptor">The table descriptor.</param>
            <param name="column">The relation descriptor.</param>
        </member>
        <member name="P:Syncfusion.Grouping.QueryAddRelationEventArgs.TableDescriptor">
            <summary>
            The TableDescriptor
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.QueryAddRelationEventArgs.Relation">
            <summary>
            The Relation
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RelationKeyDescriptor">
            <summary>
            A RelationKeyDescriptor defines the mapping between parent and child columns in a master details relation.
            RelationKeyDescriptor are managed by the <see cref="T:Syncfusion.Grouping.RelationKeyDescriptorCollection"/> which
            is returned by the <see cref="P:Syncfusion.Grouping.RelationDescriptor.RelationKeys"/> property
            of a <see cref="T:Syncfusion.Grouping.RelationDescriptor"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptor.#ctor">
            <summary>
            Initializes a new object.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptor.InitializeFrom(Syncfusion.Grouping.RelationKeyDescriptor)">
            <summary>
            Initializes this object and copies properties from another object. 
            </summary>
            <param name="other">The source object.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptor.GetName">
            <summary>Gets the key field name.</summary>
            <returns>Key field name.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptor.Clone">
            <summary>
            Creates a copy of this descriptor.
            </summary>
            <returns>A copy of this descriptor.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptor.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptor.Equals(System.Object)">
            <summary>Determines if the specified object and current object are equal.</summary>
            <param name="obj">An object to compare.</param>
            <returns>True if both objects are equal; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptor.GetHashCode">
            <summary>Serves as a hash function for a particular type.</summary>
            <returns>Hash code for the current object type.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptor.ToString">
            <summary>Returns a string holding the current object.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptor.ShouldSerializeChildKeyFieldName">
            <summary>
            Determines if a key column for the child table was specified.
            </summary>
            <returns>True if a key column for the child table was specified; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptor.ShouldSerializeParentKeyFieldName">
            <summary>
            Determines if a key column for the parent table was specified.
            </summary>
            <returns>True if a key column for the parent table was specified; False otherwise.</returns>
        </member>
        <member name="P:Syncfusion.Grouping.RelationKeyDescriptor.ChildKeyFieldName">
            <summary>
            The name of the key column in the child table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationKeyDescriptor.ChildKeyField">
            <summary>
            The <see cref="T:Syncfusion.Grouping.FieldDescriptor"/> for the the key column of the child table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationKeyDescriptor.ParentKeyFieldName">
            <summary>
            The name of the key column in the parent table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationKeyDescriptor.ParentKeyField">
            <summary>
            The <see cref="T:Syncfusion.Grouping.FieldDescriptor"/> for the the key column of the parent table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationKeyDescriptor.ParentRelationDescriptor">
            <summary>
            The RelationDescriptor this key descriptor belongs to.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RelationKeyDescriptorCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Grouping.RelationKeyDescriptor"/> that are children of a <see cref="T:Syncfusion.Grouping.RelationDescriptor"/>.
            A RelationKeyDescriptor defines the mapping between parent and child columns in a master details relation.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.RelationDescriptor.RelationKeys"/> property
            of a <see cref="T:Syncfusion.Grouping.RelationDescriptor"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptorCollection.#ctor">
            <summary>
            Initializes a new empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptorCollection.InitializeFrom(Syncfusion.Grouping.RelationKeyDescriptorCollection)">
            <summary>
            Copies settings from another collection.
            </summary>
            <param name="other">The source collection.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptorCollection.AddRange(Syncfusion.Grouping.RelationKeyDescriptor[])">
            <summary>
            Adds multiple elements at the end of the collection.
            </summary>
            <param name="values">The array whose elements should be added to the end of the collection.
            The array and its elements cannot be NULL references (Nothing in Visual Basic).
            </param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptorCollection.Contains(Syncfusion.Grouping.RelationKeyDescriptor)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptorCollection.IndexOf(Syncfusion.Grouping.RelationKeyDescriptor)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptorCollection.CopyTo(Syncfusion.Grouping.RelationKeyDescriptor[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptorCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading of the data in the collection.
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptorCollection.Insert(System.Int32,Syncfusion.Grouping.RelationKeyDescriptor)">
            <summary>
            Inserts a descriptor element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="value">The element to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptorCollection.Remove(Syncfusion.Grouping.RelationKeyDescriptor)">
            <summary>
            Removes the specified descriptor element from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptorCollection.Add(Syncfusion.Grouping.RelationKeyDescriptor)">
            <summary>
            Adds a RelationKeyDescriptor to the end of the collection.
            </summary>
            <param name="value">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptorCollection.Add(System.String,System.String)">
            <summary>
            Adds a RelationChildColumnDescriptor to the end of the collection.
            </summary>
            <param name="parentKeyFieldName">The name of the index field in the parent table.</param>
            <param name="childKeyFieldName">The name of the index field in the child table.</param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptorCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove. </param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptorCollection.Dispose">
            <summary>
            Disposes of the object and collection items.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptorCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptorCollection.Equals(System.Object)">
            <summary>Determines if the specified object and current object are equal.</summary>
            <param name="obj">An object to compare.</param>
            <returns>True if both objects are equal; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptorCollection.GetHashCode">
            <summary>Serves as a hash function for a particular type.</summary>
            <returns>Hash code for the current object type.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.RelationKeyDescriptorCollection.Item(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationKeyDescriptorCollection.IsReadOnly">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationKeyDescriptorCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationKeyDescriptorCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RelationKeyDescriptorCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. The property also
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            </summary>
            <remarks>
            If changes in the RelationDescriptor or TableDescriptor are detected, the
            method will reinitialize the collection before returning the count.
            </remarks>
        </member>
        <member name="T:Syncfusion.Grouping.RelationKeyDescriptorCollectionEnumerator">
            <summary>
            Enumerator class for the <see cref="T:Syncfusion.Grouping.RelationKeyDescriptor"/> elements of a <see cref="T:Syncfusion.Grouping.RelationKeyDescriptorCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptorCollectionEnumerator.#ctor(Syncfusion.Grouping.RelationKeyDescriptorCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptorCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RelationKeyDescriptorCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.RelationKeyDescriptorCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.IGroupByColumnCategorizer">
            <summary>
            Implement this interface if you want to implement a custom categorizer.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.IGroupByColumnCategorizer.GetGroupByCategoryKey(Syncfusion.Grouping.SortColumnDescriptor,System.Boolean,Syncfusion.Grouping.Record)">
            <summary>
            Return a key for the specified column and record.
            </summary>
            <param name="column">The column descriptor.</param>
            <param name="isForeignKey">True if this is a foreign key field.</param>
            <param name="record">The record to be evaluated.</param>
            <returns>A key identifying the category this record belongs to.</returns>
            <remarks>
            When categorizing records, all records are first sorted and then looped through
            in the order they were sorted. Only neighboring records in that sort order
            can have the same category key.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.IGroupByColumnCategorizer.CompareCategoryKey(Syncfusion.Grouping.SortColumnDescriptor,System.Boolean,System.Object,Syncfusion.Grouping.Record)">
            <summary>
            Determines if this record belongs to the same category as the previous record.
            </summary>
            <param name="column">The column descriptor.</param>
            <param name="isForeignKey">True if this is a foreign key field.</param>       
            <param name="category">The category of the previous record.</param>
            <param name="record">The record to be evaluated.</param>
            <returns>True if this record belongs to the same category; False otherwise.</returns>
        </member>
        <member name="T:Syncfusion.Grouping.SortColumnDescriptorCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.SortColumnDescriptor"/> elements of a <see cref="T:Syncfusion.Grouping.SortColumnDescriptorCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollectionEnumerator.#ctor(Syncfusion.Grouping.SortColumnDescriptorCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.SortColumnDescriptorCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.SortColumnDescriptorTypeConverter">
            <summary>
            The type converter for <see cref="T:Syncfusion.Grouping.SortColumnDescriptor"/> objects. <see cref="T:Syncfusion.Grouping.SortColumnDescriptorTypeConverter"/>
            is a <see cref="T:Syncfusion.Grouping.DescriptorBaseConverter"/>. It overrides the default behavior of the
            <see cref="M:Syncfusion.Grouping.SortColumnDescriptorTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/> method and adds support for design-time code serialization.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <override/>
            <summary>Determines whether this object can be converted to the specified type, using the given format.</summary>
            <param name="context">Format context.</param>
            <param name="destinationType">Target type.</param>
            <returns>True if this conversion is supported; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <override/>
            <summary>Converts the given value to the specified type, using the given format and culture.</summary>
            <param name="context">Format context.</param>
            <param name="culture">The CultureInfo.</param>
            <param name="value">The Value.</param>
            <param name="destinationType">Target type.</param>
            <returns>Converted object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SortColumnDescriptorTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <override/>
            <summary>
            Returns a collection of properties for the specified object type.
            </summary>
            <param name="context">Format context.</param>
            <param name="value">Object type.</param>
            <param name="attributes">An array of System.Attribue objects that will be used as a filter.</param>
            <returns>Property descriptor collection.</returns>
        </member>
        <member name="T:Syncfusion.Grouping.GroupSortOrderSummaryComparer">
            <summary>For internal use.</summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Grouping.IGroupSortOrderComparer">
            <summary>
            Defines an interface to be used for the <see cref="P:Syncfusion.Grouping.SortColumnDescriptor.GroupSortOrderComparer"/>
            of a <see cref="T:Syncfusion.Grouping.SortColumnDescriptor"/>. The GetDependantFields method is called from the engine
            to determine the fields a GroupSortOrder is dependant on. When the engine gets notified of changes
            from the underlying datasource it will loop through the modified fields of a record and see if any of the modified
            field names matches the names returned by this methods and in such case recalculate the group sort order.
            GetDependantFields is only called once when the table is initialized and the results array is then 
            internally cached.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.IGroupSortOrderComparer.GetDependantFields(Syncfusion.Grouping.TableDescriptor)">
            <summary>
            The GetDependantFields method is called from the engine
            to determine the fields a GroupSortOrder is dependant on. When the engine gets notified of changes
            from the underlying datasource it will loop through the modified fields of a record and see if any of the modified
            field names matches the names returned by this methods and in such case recalculate the group sort order.
            GetDependantFields is only called once when the table is initialized and the results array is then 
            internally cached.
            </summary>
            <param name="td">The TableDescriptor</param>
            <returns>returns dependant fields</returns>
        </member>
        <member name="M:Syncfusion.Grouping.GroupSortOrderSummaryComparer.#ctor(System.String,System.String,System.ComponentModel.ListSortDirection)">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Syncfusion.Grouping.GroupSortOrderSummaryComparer.Compare(System.Object,System.Object)">
            <summary>For internal use.</summary>
        </member>
        <member name="M:Syncfusion.Grouping.GroupSortOrderSummaryComparer.GetDependantFields(Syncfusion.Grouping.TableDescriptor)">
            <summary>For internal use.</summary>
        </member>
        <member name="P:Syncfusion.Grouping.GroupSortOrderSummaryComparer.SummaryDescriptorName">
            <summary>For internal use.</summary>
        </member>
        <member name="T:Syncfusion.Grouping.SourceListDescriptor">
            <summary>
            Extracts and manages properties schema information from an underlying list and maintains an
            <see cref="P:Syncfusion.Grouping.SourceListDescriptor.ItemPropertiesVersion"/> counter that is increased every time the
            underlying collection of <see cref="T:System.ComponentModel.PropertyDescriptor"/> objects is changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListDescriptor.#ctor">
            <summary>
            Initializes a new empty SourceListDescriptor.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListDescriptor.#ctor(System.Type)">
            <summary>
            Initializes a new SourceListDescriptor and initalializes the <see cref="P:Syncfusion.Grouping.SourceListDescriptor.ItemProperties"/>
            collection from properties of the specified type.
            </summary>
            <param name="type">The Type value.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListDescriptor.#ctor(System.Object)">
            <summary>
            Initializes a new SourceListDescriptor and initializes the <see cref="P:Syncfusion.Grouping.SourceListDescriptor.ItemProperties"/>
            collection from properties of the specified list.
            </summary>
            <param name="list">A list from which the collection has to be created.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListDescriptor.#ctor(System.String,System.ComponentModel.PropertyDescriptorCollection)">
            <summary>
            Initializes a new SourceListDescriptor and initializes the <see cref="P:Syncfusion.Grouping.SourceListDescriptor.ItemProperties"/>
            collection from properties of the specified <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/>.
            </summary>
            <param name="name">The name value.</param>
            <param name="itemProperties">A collection of properties.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListDescriptor.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListDescriptor.GetName">
            <summary>Gets the descriptor name.</summary>
            <returns>Descriptor name.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListDescriptor.ShouldSerializeName">
            <summary>
            Determines if the <see cref="P:Syncfusion.Grouping.SourceListDescriptor.Name"/>  was modified from its default value.
            </summary>
            <returns>True if it was modified.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListDescriptor.ResetName">
            <summary>
            Resets the <see cref="P:Syncfusion.Grouping.SourceListDescriptor.Name"/> to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListDescriptor.ShouldSerializeItemProperties">
            <summary>
            Determines if the <see cref="P:Syncfusion.Grouping.SourceListDescriptor.ItemProperties"/> was initalized.
            </summary>
            <returns>True if the object should be serialized; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListDescriptor.ResetItemProperties">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListDescriptor.SetItemProperties(System.ComponentModel.PropertyDescriptorCollection)">
            <summary>
            Initializes the <see cref="P:Syncfusion.Grouping.SourceListDescriptor.ItemProperties"/> collection.
            </summary>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListDescriptor.SetItemProperties(System.Type)">
            <summary>
            Initializes the <see cref="P:Syncfusion.Grouping.SourceListDescriptor.ItemProperties"/> collection from the properties of the specified type.
            </summary>
            <param name="type">The type with public properties.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListDescriptor.SetItemProperties(System.Object)">
            <summary>
            Initializes the <see cref="P:Syncfusion.Grouping.SourceListDescriptor.ItemProperties"/> collection from the instance properties of the specified list.
            </summary>
            <param name="list">The list with properties.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListDescriptor.OnListChanging(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.SourceListDescriptor.ListChanging"/> event.
            </summary>      
        </member>
        <member name="M:Syncfusion.Grouping.SourceListDescriptor.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.SourceListDescriptor.ListChanged"/> event.
            </summary>      
        </member>
        <member name="M:Syncfusion.Grouping.SourceListDescriptor.OnNameChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.SourceListDescriptor.NameChanged"/> event.
            </summary>    
        </member>
        <member name="M:Syncfusion.Grouping.SourceListDescriptor.OnNameChanging(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.SourceListDescriptor.NameChanging"/> event.
            </summary>   
        </member>
        <member name="M:Syncfusion.Grouping.SourceListDescriptor.OnItemPropertiesChanging(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.SourceListDescriptor.ItemPropertiesChanging"/> event.
            </summary>     
        </member>
        <member name="M:Syncfusion.Grouping.SourceListDescriptor.OnItemPropertiesChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.SourceListDescriptor.ItemPropertiesChanged"/> event.
            </summary>      
        </member>
        <member name="M:Syncfusion.Grouping.SourceListDescriptor.Reset">
            <summary>
            Resets this object and clears cached properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListDescriptor.OnInitializeItemProperties(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.SourceListDescriptor.InitializeItemProperties"/> event.
            </summary>    
        </member>
        <member name="E:Syncfusion.Grouping.SourceListDescriptor.ListChanging">
            <summary>
            Occurs before the underlying collection is changed. When an <see cref="E:System.ComponentModel.IBindingList.ListChanged"/>
            event is handled, this event is raised before the <see cref="P:Syncfusion.Grouping.SourceListDescriptor.ItemProperties"/> collection is updated.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.SourceListDescriptor.ListChanged">
            <summary>
            Occurs after the underlying collection was changed. When an <see cref="E:System.ComponentModel.IBindingList.ListChanged"/>
            event is handled, this event is raised after the <see cref="P:Syncfusion.Grouping.SourceListDescriptor.ItemProperties"/> collection is updated.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.SourceListDescriptor.NameChanging">
            <summary>
            Occurs before the <see cref="P:Syncfusion.Grouping.SourceListDescriptor.Name"/> of this table is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.SourceListDescriptor.NameChanged">
            <summary>
            Occurs after the <see cref="P:Syncfusion.Grouping.SourceListDescriptor.Name"/> of this table is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.SourceListDescriptor.ItemPropertiesChanging">
            <summary>
            Occurs before the <see cref="P:Syncfusion.Grouping.SourceListDescriptor.ItemProperties"/> collection of this table is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.SourceListDescriptor.ItemPropertiesChanged">
            <summary>
            Occurs after the <see cref="P:Syncfusion.Grouping.SourceListDescriptor.ItemProperties"/> collection of this table was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.SourceListDescriptor.InitializeItemProperties">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Grouping.SourceListDescriptor.ItemProperties"/> is accessed for the first time and has not
            been initialized before.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SourceListDescriptor.SourceListSet">
            <summary>
            Gets / sets a reference to a <see cref="P:Syncfusion.Grouping.SourceListDescriptor.SourceListSet"/>. A <see cref="P:Syncfusion.Grouping.SourceListDescriptor.SourceListSet"/>
            manages multiple <see cref="T:Syncfusion.Grouping.SourceListDescriptor"/> objects (or TableDescriptor objects) that belong to the same
            <see cref="T:Syncfusion.Grouping.Engine"/> object.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SourceListDescriptor.Name">
            <summary>
            Gets / sets the name of this table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SourceListDescriptor.ItemProperties">
            <summary>
            Gets / sets the <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with properties for
            each record in the table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SourceListDescriptor.ItemPropertiesVersion">
            <summary>
            Gets / sets the version of the <see cref="P:Syncfusion.Grouping.SourceListDescriptor.ItemProperties"/> collection. This value
            is increased each time the <see cref="P:Syncfusion.Grouping.SourceListDescriptor.ItemProperties"/> collection is modified.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SourceListDescriptor.IgnoreSetItemProperties">
            <summary>
            Gets or sets a property indicating whether subsequent calls to SetItemProperties on
            this TableDescriptor should be ignored. The default is false. You should set this property
            true if you manually want to add/merge PropertyDescriptors. It will prevent that
            the grid does not reinitialize the ItemProperties with results from calls to 
            ITypedList.GetItemProperties later on.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.SummaryType">
            <summary>
            Pre-defined summary types to be used in <see cref="T:Syncfusion.Grouping.SummaryDescriptor"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.SummaryType.Count">
            <summary>
            Count items.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.SummaryType.BooleanAggregate">
            <summary>
            Count number of False and / or True items for boolean fields.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.SummaryType.ByteAggregate">
            <summary>
            Count, Minimum, Maximum, Total, and Average for byte fields.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.SummaryType.CharAggregate">
            <summary>
            Count, Minimum, and Maximum for char fields.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.SummaryType.DistinctCount">
            <summary>
            The distinct count of elements.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.SummaryType.DoubleAggregate">
            <summary>
            Count, Minimum, Maximum, Total, and Average for double fields.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.SummaryType.Int32Aggregate">
            <summary>
            Count, Minimum, Maximum, Total, and Average for int32 fields.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.SummaryType.MaxLength">
            <summary>
            Maximum length for text fields.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.SummaryType.StringAggregate">
            <summary>
            Maximum length and count for text fields.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.SummaryType.Vector">
            <summary>
            Collects all entries of a column in a sorted vector.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.SummaryType.DoubleVector">
            <summary>
            Collects all entries of a column in a sorted vector. Statistical functions for
            Median, Percentile25, Percentile75, and PercentileQ.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.SummaryType.Custom">
            <summary>
            A custom summary type. See the Grid / Grouping / CustomSummaries example.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.CreateSummaryDelegate">
            <summary>
            Create an ISummary object for the given record and SummaryDescriptor.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.CreateSummaryFromElementDelegate">
            <summary>
            Create an ISummary object for the given element and SummaryDescriptor.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.SummaryDescriptorTypeConverter">
            <summary>
            The type converter for <see cref="T:Syncfusion.Grouping.SummaryDescriptor"/> objects. <see cref="T:Syncfusion.Grouping.SummaryDescriptorTypeConverter"/> 
            is a <see cref="T:Syncfusion.Grouping.DescriptorBaseConverter"/>. It overrides the default behavior of the 
            ConvertTo method and adds support for design-time code serialization.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <override/>
            <summary>
            Returns a collection of properties for the specified object type.
            </summary>
            <param name="context">Format context.</param>
            <param name="value">Object type.</param>
            <param name="attributes">An array of System.Attribute objects that will be used as a filter.</param>
            <returns>A collection of properties.</returns>
        </member>
        <member name="T:Syncfusion.Grouping.SummaryDescriptor">
            <summary>
            A SummaryDescriptor
            declares summaries for groups in a table.
            SummaryDescriptors are managed by the <see cref="T:Syncfusion.Grouping.SortColumnDescriptorCollection"/> which
            is returned by the <see cref="P:Syncfusion.Grouping.TableDescriptor.Summaries"/> property
            of a <see cref="P:Syncfusion.Grouping.SummaryDescriptor.TableDescriptor"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptor.ToString">
            <summary>Returns a string holding the current object.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptor.#ctor">
            <summary>
            Initializes a new empty object.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptor.#ctor(System.String,Syncfusion.Grouping.SummaryType)">
            <summary>
            Initializes a new descriptor for the specified field (mappingName) in the parent table
            and summary type.
            </summary>
            <param name="mappingName">The underlying field name on which calculations are based.</param>
            <param name="summaryType">The summary type.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptor.#ctor(System.String,System.String,Syncfusion.Grouping.SummaryType)">
            <summary>
            Initializes a new descriptor for the specified field (mappingName) in the parent table
            and summary type.
            </summary>
            <param name="name">The descriptor name.</param>
            <param name="mappingName">The underlying field name on which calculations are based.</param>
            <param name="summaryType">The summary type.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptor.#ctor(System.String,System.String,Syncfusion.Grouping.SummaryType,System.Boolean)">
            <summary>
            Used for the summary descriptor.
            </summary>
            <param name="name">Name of the summary</param>
            <param name="mappingName">mapping name of the summary</param>
            <param name="summaryType">type of the summary</param>
            <param name="isPagesummary">Represents the boolean value.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptor.#ctor(System.String,System.String,Syncfusion.Grouping.CreateSummaryDelegate)">
            <summary>
            Initializes a new descriptor for the specified field (mappingName) in the parent table
            and a custom summary.
            </summary>
            <param name="name">The descriptor name.</param>
            <param name="mappingName">The underlying field name on which calculations are based on.</param>
            <param name="createSummary">The static summary method that creates a summary object.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptor.#ctor(System.String,System.String,Syncfusion.Grouping.CreateSummaryFromElementDelegate)">
            <summary>
            Initializes a new descriptor for the specified field (mappingName) in the parent table
            and a custom summary.
            </summary>
            <param name="name">The descriptor name.</param>
            <param name="mappingName">The underlying field name on which calculations are based.</param>
            <param name="createSummary">The static summary method that creates a summary object.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptor.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptor.InitializeFrom(Syncfusion.Grouping.SummaryDescriptor)">
            <summary>
            Initializes this object and copies properties from another object. <see cref="E:Syncfusion.Grouping.SummaryDescriptor.PropertyChanging"/>
            and <see cref="E:Syncfusion.Grouping.SummaryDescriptor.PropertyChanged"/> events are raised for every property that is modified. If both
            objects are equal, no events are raised.
            </summary>
            <param name="other">The source object.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptor.GetValue(Syncfusion.Grouping.Record)">
            <summary>
            Gets the value from the record for the field specified with <see cref="P:Syncfusion.Grouping.SummaryDescriptor.MappingName"/>. If record
            is an <see cref="T:Syncfusion.Grouping.AddNewRecord"/>, a NULL value is returned. If MappingName is empty, a reference to
            the underlying record data is returned (good for counting RecordCount).
            </summary>
            <param name="record">The record to be evaluated.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptor.OnPropertyChanging(Syncfusion.Grouping.DescriptorPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.SummaryDescriptor.PropertyChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.DescriptorPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptor.OnPropertyChanged(Syncfusion.Grouping.DescriptorPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.SummaryDescriptor.PropertyChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.DescriptorPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptor.Clone">
            <summary>
            Creates a copy of this descriptor.
            </summary>
            <returns>A copy of this descriptor.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptor.Equals(System.Object)">
            <summary>Determines if the specified object and current object are equal.</summary>
            <param name="obj">An object to compare.</param>
            <returns>True if the objects are equal.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptor.GetHashCode">
            <summary>Serves as a hash function.</summary>
            <returns>Hash code.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptor.GetName">
            <summary>Returns the descriptor name.</summary>
            <returns>Descriptor name.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptor.CreateSummary(Syncfusion.Grouping.Element)">
            <summary>
            Creates an <see cref="T:Syncfusion.Collections.BinaryTree.ITreeTableSummary"/> for the specified element. 
            </summary>
            <param name="element">The element or record.</param>
            <returns>A new <see cref="T:Syncfusion.Collections.BinaryTree.ITreeTableSummary"/> object.</returns>
            <remarks>
            If the element is a record and <see cref="P:Syncfusion.Grouping.SummaryDescriptor.IgnoreRecordFilterCriteria"/> is False,
            the method checks Record.MeetsFilterCriteria(). If it returns False,
            an empty summary is returned. In that case the CreateSummary delegate will 
            be called called with a NULL object.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.SummaryDescriptor.PropertyChanged">
            <summary>
            Occurs when a property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.SummaryDescriptor.PropertyChanging">
            <summary>
            Occurs before a property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SummaryDescriptor.TableDescriptor">
            <summary>
            The TableDescriptor that this descriptor belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SummaryDescriptor.Collection">
            <summary>
            The collection this descriptor belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SummaryDescriptor.Name">
            <summary>
            The name of this descriptor. This name is used to look up the summary in the
            <see cref="T:Syncfusion.Grouping.SummaryDescriptorCollection"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SummaryDescriptor.IsPageLevelSummary">
            <summary>
            Gets or sets the value of page level summary
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SummaryDescriptor.MappingName">
            <summary>
            The mapping name which identifies a field in the parent table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SummaryDescriptor.FieldDescriptor">
            <summary>
            The field descriptor found for the <see cref="P:Syncfusion.Grouping.SummaryDescriptor.MappingName"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SummaryDescriptor.SummaryType">
            <summary>
            The type of summary.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SummaryDescriptor.IgnoreRecordFilterCriteria">
            <summary>
            Specifies whether RecordFilter criteria should be ignored and
            the summary should be calculated for all records.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SummaryDescriptor.CreateSummaryMethod">
            <summary>
            Gets / sets a method that creates ISummary objects for a given record and SummaryDescriptor.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SummaryDescriptor.CreateSummaryFromElementMethod">
            <summary>
            Gets / sets a method that creates ISummary objects for a given element and SummaryDescriptor.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.SummaryDescriptorCollection">
            <summary>
            A collection from the <see cref="T:Syncfusion.Grouping.SummaryDescriptor"/> that declares summaries for groups in a table.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.TableDescriptor.Summaries"/> property
            of a <see cref="T:Syncfusion.Grouping.TableDescriptor"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.ToString">
            <summary>Returns a sring holding the current object.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.InitializeFrom(Syncfusion.Grouping.SummaryDescriptorCollection)">
            <summary>
            Copies settings from another collection and raises <see cref="E:Syncfusion.Grouping.SummaryDescriptorCollection.Changing"/> and <see cref="E:Syncfusion.Grouping.SummaryDescriptorCollection.Changed"/>
            events if differences to the other collection are detected.
            </summary>
            <param name="other">The source collection.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.InitializeFrom(Syncfusion.Grouping.SummaryDescriptorCollection,System.Boolean)">
            <summary>
            Copies settings from another collection and raises <see cref="E:Syncfusion.Grouping.SummaryDescriptorCollection.Changing"/> and <see cref="E:Syncfusion.Grouping.SummaryDescriptorCollection.Changed"/>
            events if differences to the other collection are detected.
            </summary>
            <param name="other">The source collection.</param>
            <param name="raiseChangeEvents">Indicates if change events should be raised.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.#ctor">
            <summary>
            Initializes a new empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.CopyAllMembersTo(Syncfusion.Grouping.SummaryDescriptorCollection)">
            <summary>
            Copies all members to another collection.
            </summary>
            <param name="coll">The target collection.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.Clone">
            <summary>
            Creates a copy of the collection and all its elements.
            </summary>
            <returns>A copy of the collection and all its elements.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.Equals(System.Object)">
            <summary>Determines if the specified object and current object are equal.</summary>
            <param name="obj">An object to compare.</param>
            <returns>True if both objects are equal.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.GetHashCode">
            <override/>
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.CreateSummaries(Syncfusion.Grouping.Element)">
            <summary>
            Helper routine that loops through all SummaryDescriptors of this collection,
            calls SummaryDescriptor.CreateSummary(element), and returns all results in an array.
            </summary>
            <param name="element">The element on which ISummary objects should be based.</param>
            <returns>An array of ISummary objects, one for each SummaryDescriptor in this collection.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.Contains(Syncfusion.Grouping.SummaryDescriptor)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.Contains(System.String)">
            <summary>
            Determines if the element with the specified name belongs to this collection.
            </summary>
            <param name="name">The name of the element to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.IndexOf(Syncfusion.Grouping.SummaryDescriptor)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.IndexOf(System.String)">
            <summary>
            Searches for the element with the specified name.
            </summary>
            <param name="name">The name of the element to locate in the collection. </param>
            <returns>The zero-based index of the occurrence of the element with matching name within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.CopyTo(Syncfusion.Grouping.SummaryDescriptor[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading of the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.Insert(System.Int32,Syncfusion.Grouping.SummaryDescriptor)">
            <summary>
            Inserts a descriptor element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="value">The element to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.Remove(Syncfusion.Grouping.SummaryDescriptor)">
            <summary>
            Removes the specified descriptor element from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.Add(Syncfusion.Grouping.SummaryDescriptor)">
            <summary>
            Adds a SummaryDescriptor to the end of the collection.
            </summary>
            <param name="value">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.Add(System.String,System.String,Syncfusion.Grouping.SummaryType)">
            <summary>
            Creates a SummaryDescriptor and adds it to the end of the collection.
            </summary>
            <param name="name">The descriptor name.</param>
            <param name="mappingName">The underlying field name on which calculations are based on.</param>
            <param name="summaryType">The summary type.</param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.Add(System.String,System.String,Syncfusion.Grouping.CreateSummaryDelegate)">
            <summary>
            Creates a SummaryDescriptor and adds it to the end of the collection.
            </summary>
            <param name="name">The descriptor name.</param>
            <param name="mappingName">The underlying field name on which calculations are based.</param>
            <param name="createSummary">The static summary method that creates a summary object.</param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.AddRange(Syncfusion.Grouping.SummaryDescriptor[])">
            <summary>
            Adds multiple elements at the end of the collection.
            </summary>
            <param name="values">The array with elements that should be added to the end of the collection.
            The array and its elements cannot be NULL references (Nothing in Visual Basic).
            </param>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.Remove(System.String)">
            <summary>
            Removes the specified descriptor element with the specified name from the collection.
            </summary>
            <param name="name">The name of the element to remove from the collection. If no element with that name is found
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove. </param>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.Dispose">
            <summary>
            Disposes of the object and collection items.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.OnChanging(Syncfusion.Collections.ListPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.SummaryDescriptorCollection.Changing"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Collections.ListPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollection.OnChanged(Syncfusion.Collections.ListPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.SummaryDescriptorCollection.Changed"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Collections.ListPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="E:Syncfusion.Grouping.SummaryDescriptorCollection.Changed">
            <summary>
            Occurs after a property in a nested element or collection is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.SummaryDescriptorCollection.Changing">
            <summary>
            Occurs before a property in a nested element or the collection is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SummaryDescriptorCollection.AnyDescriptorIgnoreRecordFilter">
            <summary>
            Gets whether any summary descriptor has <see cref="P:Syncfusion.Grouping.SummaryDescriptor.IgnoreRecordFilterCriteria"/> set to True.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SummaryDescriptorCollection.InsideCollectionEditor">
            <summary>
            Gets / sets whether the collection is manipulated inside a collection editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SummaryDescriptorCollection.Version">
            <summary>
            The version number of this collection. The version is increased each time the
            collection or an element within the collection is modified.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SummaryDescriptorCollection.Item(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SummaryDescriptorCollection.Item(System.String)">
            <summary>
            Gets / sets the element with the specified name.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SummaryDescriptorCollection.EmptySummaries">
            <summary>
            Gets an array of empty <see cref="T:Syncfusion.Collections.BinaryTree.ITreeTableSummary"/> objects. For each SummaryDescriptor in this
            collection, an ISummary is created by calling the SummaryDescriptor.CreateSummary method
            and passing in NULL as record. 
            </summary>
            <returns>An array of ISummary objects, one for each SummaryDescriptor in this collection.</returns>
        </member>
        <member name="P:Syncfusion.Grouping.SummaryDescriptorCollection.IsReadOnly">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SummaryDescriptorCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SummaryDescriptorCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SummaryDescriptorCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. The property also
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            </summary>
            <remarks>
            If changes in the TableDescriptor are detected, the
            method will reinitialize the field descriptors before returning the count.
            </remarks>
        </member>
        <member name="T:Syncfusion.Grouping.SummaryDescriptorCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.SummaryDescriptor"/> elements of a <see cref="T:Syncfusion.Grouping.SummaryDescriptorCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollectionEnumerator.#ctor(Syncfusion.Grouping.SummaryDescriptorCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryDescriptorCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.SummaryDescriptorCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.TableDescriptor">
            <summary>
            Maintains schema information for a table. Collections define fields, expressions,
            sorted, grouped columns, and related tables.
            </summary>
            <remarks>
            TableDescriptor has several collections that can either be auto-populated from the underlying datasource
            or manually modified.
            <para/>
            <list type="table">
            <listheader><term>Collection</term><description>Descriptions</description></listheader>
            <para/>
            <item><term>Fields</term><description>
            The Fields collection is auto-populated from the underlying sourcelists columns. Normally you will not
            modify this collection and just use it in its default auto-populated state. A fieldDescriptor holds a
            name, mapping name, and type of the column in the list.
            </description></item>
            <para/>
            <item><term>Relations</term><description>
            The Relations collection is auto-populated from the underlying sourcelist's relations. It will extract
            its information from an ADO.NET datasource. If you have other IList collections that are related, you can
            add RelationDescriptor manually to this collection and specify the primary and foreign key between the
            two lists.
            </description></item>
            <para/>
            <item><term>ExpressionFields</term><description>
            The ExpressionFields collection has ExpressionFields. You need to manually add ExpressionFields. This
             collection is not auto-populated from the datasource. A fieldDescriptor holds a name and the formula
             expression of the column.
            </description></item>
            <para/>
            <item><term>GroupedColumns</term><description>
            The GroupedColumns collections contains SortColumnDescriptor objects. It defines the grouping of the
             table. Each SortColumnDescriptor has a name that identifies a field in the Fields or ExpressionFields
             collection, a SortDirection property, and a FieldDescriptor property. The FieldDescriptor is Read-only
             and looked up in the Fields or ExpressionFields collection using the Name of the SortColumnDescriptor.
             A custom categorizer can be specified that allows you to group records into ranges of data, e.g. if
             you want to group by month.
            </description></item>
            <para/>
            <item><term>Sortedcolumns</term><description>
            The Sortedcolumns collection contains SortColumnDescriptor objects. It specifies the sort order of
            records within a group.
            </description></item>
            <para/>
            <item><term>RecordFilters</term><description>
            The RecordFilters collection has RecordFilterDescriptor objects. RecordFilters define selection
            criteria to hide or show records based on criteria.
            </description></item>
            <para/>
            <item><term>Summaries</term><description>
            The Summaries collection holds SummaryDescriptors. A SummaryDescriptor has a name, a mapping name
             that identifies the field (Fields or ExpressionFields collection) for which summaries should be
             calculated for, and a SummaryType property that defines the type of calculations to be performed.
            Possible SummaryTypes are: Count, BooleanAggregate, ByteAggregate, CharAggregate, DistinctCount,
            DoubleAggregate, Int32Aggregate, MaxLength, StringAggregate, Vector, DoubleVector, and Custom.
            When you specify the SummaryType.Custom type, you need to set the custom method through the
            CreateSummaryMethod property of the SummaryDescriptor. It is of type CreateSummaryDelegate and
            is called to create a instance of a summary object.
            </description></item>
            <para/>
            </list>
            <para/>
            The Field and Relations collections feature auto-population on demand
            and reflect changes from the collection they depend on. The auto-population will happen when
            you access the contents of the collection, e.g. if you query its Count.
            <para/>
            GroupedColumns and SortedColumns need to be manually initialized. They are not auto-populated.
            <para/>
            SortedColumnDescriptor also lets you specify a custom comparer that implements the IComparer
            interface.
            </remarks>
        </member>
        <member name="T:Syncfusion.Grouping.ITableEventsTarget">
            <summary>
            Defines an interface for an object that handles events raised by <see cref="T:Syncfusion.Grouping.Table"/> objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnExceptionRaised(Syncfusion.Grouping.ExceptionRaisedEventArgs)">
            <summary>
            Occurs when an unknown exception has been catched while modifying underlying data in the datasource.
            </summary>
            <remarks>
            If necessary, you can rethrow the exception in your event handler.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnGroupCollapsing(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Occurs before a group is collapsed.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnGroupCollapsed(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Occurs after a group is collapsed.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnGroupExpanding(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Occurs before a group is expanded.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnGroupExpanded(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Occurs after a group is expanded.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnRecordCollapsing(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Occurs before a record with nested tables is collapsed.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnRecordCollapsed(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Occurs after a record with nested tables is collapsed.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnRecordExpanding(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Occurs before a record with nested tables is expanded.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnRecordExpanded(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Occurs after a record with nested tables is expanded.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnRecordDeleting(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Occurs before a record is deleted.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnRecordDeleted(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Occurs after a record is deleted.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnCurrentRecordContextChange(Syncfusion.Grouping.CurrentRecordContextChangeEventArgs)">
            <summary>
            Occurs before and after the status of the current record was changed. Check the <see cref="P:Syncfusion.Grouping.CurrentRecordContextChangeEventArgs.Action"/>
            of the <see cref="T:Syncfusion.Grouping.CurrentRecordContextChangeEventArgs"/> to get information which current record state was changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnCurrentRecordManagerReset(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Occurs when the <see cref="M:Syncfusion.Grouping.CurrentRecordManager.Reset"/> method of the <see cref="T:Syncfusion.Grouping.CurrentRecordManager"/> was called.
            </summary>
            <remarks>
            The GridGroupingControl listens to this event and resets any "Current Cell" state when this
            event was raised.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnGroupSummaryInvalidated(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Occurs when a summary has been marked dirty.
            </summary>
            <remarks>
            The GridGroupingControl listens to this event will force a repaint of the specified summary if it is visible
            when this event was raised.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnSourceListListChanged(Syncfusion.Grouping.TableListChangedEventArgs)">
            <summary>
            Occurs before the <see cref="T:Syncfusion.Grouping.Table"/> processes the <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> event
            of an attached source list. More detailed <see cref="E:Syncfusion.Grouping.Table.SourceListRecordChanged"/> events will be
            raised after this event.
            </summary>
            <remarks>
            The reason for firing this event is to give a programmer a chance to react to an <see cref="E:System.ComponentModel.IBindingList.ListChanged"/>
            event before the engine since there is otherwise no order guaranteed when an IBindingList raises a ListChanged
            event.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnSourceListListChangedCompleted(Syncfusion.Grouping.TableListChangedEventArgs)">
            <summary>
            Occurs after the <see cref="T:Syncfusion.Grouping.Table"/> processes the <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> event
            of an attached source list.
            </summary>
            <remarks>
            The reason for firing this event is to give a programmer the chance to react to an <see cref="E:System.ComponentModel.IBindingList.ListChanged"/>
            event right after the engine since there is otherwise no order guaranteed when an IBindingList raises a ListChanged
            event.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnSourceListRecordChanging(Syncfusion.Grouping.RecordChangedEventArgs)">
            <summary>
            Occurs when a record in the underlying data source is added, removed, or changed and before
            the <see cref="T:Syncfusion.Grouping.Table"/> is updated with that change.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnSourceListRecordChanged(Syncfusion.Grouping.RecordChangedEventArgs)">
            <summary>
            Occurs before the <see cref="T:Syncfusion.Grouping.Table"/> processes the <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> event
            of an attached source list. More detailed <see cref="E:Syncfusion.Grouping.Table.SourceListRecordChanged"/> events will be
            raised after this event.
            </summary>
            <remarks>
            The reason for firing this event is to give a programmer chance to react to an <see cref="E:System.ComponentModel.IBindingList.ListChanged"/>
            event before the engine since there is otherwise no order guaranteed when an IBindingList raises a ListChanged
            event.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnGroupAdded(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Occurs when a new group was added in a table after the table was categorized and when a record was changed. The event does not
            occur during categorization of the table. See the <see cref="E:Syncfusion.Grouping.Table.CategorizedRecords"/> elements to when categorization
            finished.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnGroupRemoving(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Occurs when a group was removed from a table after the table was categorized and when a record was changed. The event does not
            occur during categorization of the table. See the <see cref="E:Syncfusion.Grouping.Table.CategorizedRecords"/> elements to when categorization
            finished.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnSortingItemsInGroup(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Occurs before the records for a group are sorted.
            </summary>
            <remarks>
            The engine has a built-in optimization for sorting columns that allows it to perform the sorting
            on an on-demand basis group-by-group. Suppose you have a table with 200 different countries and
            you change the sort order of the cities. It is not necessary to sort the whole table. Instead,
            the individual groups can be sorted when they are scrolled into view. SortingItemsInGroup and
            SortedItemsInGroup  events are fired in such case when a specific group was sorted on demand.
            <para/>
            If the whole table was set dirty (see <see cref="P:Syncfusion.Grouping.Table.TableDirty"/>), then the whole table
            is simply recategorized. In that case, only a CategorizedElements event is raised but no
            SortingItemsInGroup event.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnSortedItemsInGroup(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Occurs after the records for a group were sorted.
            </summary>
            <remarks>
            The engine has a built-in optimization for sorting columns that allows it to perform the sorting
            on an on-demand basis group-by-group. Suppose you have a table with 200 different countries and
            you change the sort order of the cities. It is not necessary to sort the whole table. Instead,
            the individual groups can be sorted when they are scrolled into view. SortingItemsInGroup and
            SortedItemsInGroup  events are fired in such case when a specific group was sorted on demand.
            <para/>
            If the whole table was set dirty (see <see cref="P:Syncfusion.Grouping.Table.TableDirty"/>), then the whole table
            is simply recategorized. In that case, only a CategorizedElements event is raised but no
            SortingItemsInGroup event.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnInvalidatingCounters(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Occurs when the <see cref="M:Syncfusion.Grouping.Table.InvalidateCounterTopDown(System.Boolean)"/> of a <see cref="T:Syncfusion.Grouping.Table"/> is called
            and before all counters are marked dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnInvalidatingSummaries(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Occurs when the <see cref="M:Syncfusion.Grouping.Table.InvalidateSummariesTopDown"/> of a <see cref="T:Syncfusion.Grouping.Table"/> is called
            and before all summaries in that table are marked dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnCategorizingRecords(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Occurs before records are categorized after a table is marked dirty (<see cref="P:Syncfusion.Grouping.Table.TableDirty"/>).
            </summary>
            <remarks>
            When <see cref="P:Syncfusion.Grouping.Table.TableDirty"/> is set to True, e.g. because schema information for a table was changed
            or because the grouped columns were changed, the table will categorize records on demand the first time
            information about a record is accessed. At that time, the <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/> of the <see cref="T:Syncfusion.Grouping.Table"/>
            will start categorization.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnCategorizedRecords(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Occurs after records are categorized after a table is marked dirty (<see cref="P:Syncfusion.Grouping.Table.TableDirty"/>).
            </summary>
            <remarks>
            When <see cref="P:Syncfusion.Grouping.Table.TableDirty"/> is set to True, e.g. because schema information for a table was changed
            or because the grouped columns were changed, the table will categorize records on demand the first time
            information about a record is accessed. At that time, the <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/> will start
            categorization.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnTableSourceListChanged(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Occurs after the data source is replaced.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnRecordValueChanging(Syncfusion.Grouping.RecordValueChangingEventArgs)">
            <summary>
            Occurs when a RecordFieldCell cell's value is changed and before Record.SetValue is called.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnRecordValueChanged(Syncfusion.Grouping.RecordValueChangedEventArgs)">
            <summary>
            Occurs when a RecordFieldCell cell's value is changed and after Record.SetValue returned.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnDisplayElementChanging(Syncfusion.Grouping.DisplayElementChangingEventArgs)">
            <summary>
            When number of visible elements are changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnDisplayElementChanged(Syncfusion.Grouping.DisplayElementChangedEventArgs)">
            <summary>
            After number of visible elements were changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnSelectedRecordsChanging(Syncfusion.Grouping.SelectedRecordsChangedEventArgs)">
            <summary>
            Occurs before the <see cref="P:Syncfusion.Grouping.Table.SelectedRecords"/> collection was modified.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableEventsTarget.OnSelectedRecordsChanged(Syncfusion.Grouping.SelectedRecordsChangedEventArgs)">
            <summary>
            Occurs after the <see cref="P:Syncfusion.Grouping.Table.SelectedRecords"/> collection was modified.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.#ctor">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Grouping.TableDescriptor"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.#ctor(Syncfusion.Grouping.RelationDescriptor)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Grouping.TableDescriptor"/> that is a child of
            a <see cref="T:Syncfusion.Grouping.RelationDescriptor"/>.
            </summary>
            <param name="parentRelation">Parent relation.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.#ctor(Syncfusion.Grouping.Engine,Syncfusion.Grouping.RelationDescriptor)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Grouping.TableDescriptor"/> that is a child of
            a <see cref="T:Syncfusion.Grouping.RelationDescriptor"/>.
            </summary>
            <param name="engine">Grouping engine.</param>
            <param name="parentRelation">Parent relation.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.GetSortDescriptors">
            <summary>
            Returns a combined array of RelationChildColumns, GroupedColumns and SortedColumns
            </summary>
            <returns>Relatin child columns, grouped columns and sorted columns.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.GetSortInfo(System.Boolean@,Syncfusion.Grouping.SortColumnDescriptor[]@,System.ComponentModel.PropertyDescriptor[]@)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ShouldSortByDisplayMember(Syncfusion.Grouping.SortColumnDescriptor)">
            <summary>
            Determines if the specified column should be sorted by the DisplayMember.
            Default behavior of the method is to return false.
            GridGroupingControl overrides this method and checks whether the GridColumnDescriptor
            associated with column has its GridColumnDescriptor.SortByDisplayMember 
            property set to true.
            </summary>
            <param name="cd">The column.</param>
            <returns>returns False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.InitSortByDisplayMemberCols">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.GetPrimaryKeySortDescriptors">
            <summary>
            Returns an array of PrimaryKeyColumns
            </summary>
            <returns>Primary key columns.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.GetPrimaryKeySortInfo(System.Boolean@,Syncfusion.Grouping.SortColumnDescriptor[]@,System.ComponentModel.PropertyDescriptor[]@)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ResetSortInfoCache">
            <summary>For internal use.</summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.InitializeFrom(Syncfusion.Grouping.TableDescriptor)">
            <summary>
            Initializes this object and copies properties from another object. <see cref="E:Syncfusion.Grouping.TableDescriptor.PropertyChanging"/>
            and <see cref="E:Syncfusion.Grouping.TableDescriptor.PropertyChanged"/> events are raised for every property that is modified. If both
            objects are equal, no events are raised.
            </summary>
            <param name="other">The source object.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ResetTableDescriptor">
            <summary>
            Resets all properties to default settings.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.GetModified">
            <summary>
            Determines if any properties have been modified.
            </summary>
            <returns>True if any property was modified.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ShouldSerializeName">
            <override/>
            <summary>
            Determines if the <see cref="P:Syncfusion.Grouping.TableDescriptor.Name"/>  was modified from its default value.
            </summary>
            <returns>True if the name was modified.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnPropertyChanged(Syncfusion.Grouping.DescriptorPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.PropertyChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.DescriptorPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnPropertyChanging(Syncfusion.Grouping.DescriptorPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.PropertyChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.DescriptorPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ToString">
            <summary>Returns a string holding the current object.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ShouldSerializeRelations">
            <summary>
            Determines if the <see cref="P:Syncfusion.Grouping.TableDescriptor.Relations"/> collection or child objects have been modified from its
            default state.
            </summary>
            <returns>True if the objects have been modified.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ResetRelations">
            <summary>
            Resets the <see cref="P:Syncfusion.Grouping.TableDescriptor.Relations"/> collection back to its
            default state.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.PopulateDynamicPropertiesandTypes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Retrieves the dynamic properties and its design time types for internal usage.
            </summary>
            <param name="obj">dynamic item</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ShouldSerializeFields">
            <summary>
            Determines if the <see cref="P:Syncfusion.Grouping.TableDescriptor.Fields"/> collection has been modified from its
            default state.
            </summary>
            <returns>True if it is modified; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ResetFields">
            <summary>
            Resets the <see cref="P:Syncfusion.Grouping.TableDescriptor.Fields"/> collection back to its
            default state.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ShouldSerializeUnboundFields">
            <summary>
            Determines if the <see cref="P:Syncfusion.Grouping.TableDescriptor.UnboundFields"/> collection has been modified from its
            default state.
            </summary>
            <returns>True if the collection has been modified.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ResetUnboundFields">
            <summary>
            Resets the <see cref="P:Syncfusion.Grouping.TableDescriptor.UnboundFields"/> collection back to its
            default state.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ShouldSerializeExpressionFields">
            <summary>
            Determines if the <see cref="P:Syncfusion.Grouping.TableDescriptor.ExpressionFields"/> collection contains values.
            </summary>
            <returns>True if the collection is not empty.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ResetExpressionFields">
            <summary>
            Clears the <see cref="P:Syncfusion.Grouping.TableDescriptor.ExpressionFields"/> collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ShouldSerializeGroupedColumns">
            <summary>
            Determines if the <see cref="P:Syncfusion.Grouping.TableDescriptor.GroupedColumns"/> collection contains values.
            </summary>
            <returns>True if the collection is not empty.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ResetGroupedColumns">
            <summary>
            Clears the <see cref="P:Syncfusion.Grouping.TableDescriptor.GroupedColumns"/> collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ShouldSerializePrimaryKeyColumns">
            <summary>
            Determines if the <see cref="P:Syncfusion.Grouping.TableDescriptor.PrimaryKeyColumns"/> collection contains values.
            </summary>
            <returns>True if the collection contains values.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ResetPrimaryKeyColumns">
            <summary>
            Clears the <see cref="P:Syncfusion.Grouping.TableDescriptor.PrimaryKeyColumns"/> collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ShouldSerializeSummaries">
            <summary>
            Determines if the <see cref="P:Syncfusion.Grouping.TableDescriptor.Summaries"/> collection contains values.
            </summary>
            <returns>True if it contains values.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ResetSummaries">
            <summary>
            Clears the <see cref="P:Syncfusion.Grouping.TableDescriptor.Summaries"/> collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ShouldSerializeRecordFilters">
            <summary>
            Determines if the <see cref="P:Syncfusion.Grouping.TableDescriptor.RecordFilters"/> collection contains values.
            </summary>
            <returns>True if it contains values; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ResetRecordFilters">
            <summary>
            Clears the <see cref="P:Syncfusion.Grouping.TableDescriptor.RecordFilters"/> collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ShouldSerializeSortedColumns">
            <summary>
            Determines if the <see cref="P:Syncfusion.Grouping.TableDescriptor.SortedColumns"/> collection contains values.
            </summary>
            <returns>True if it contains values.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ResetSortedColumns">
            <summary>
            Clears the <see cref="P:Syncfusion.Grouping.TableDescriptor.SortedColumns"/> collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnAllowNewChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.AllowNewChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnAllowRemoveChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.AllowRemoveChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnAllowEditChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.AllowEditChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ShouldSerializeRelationChildColumns">
            <summary>
            Determines if the <see cref="P:Syncfusion.Grouping.TableDescriptor.RelationChildColumns"/> collection was manually modified.
            </summary>
            <returns>True if it was modified.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.ResetRelationChildColumns">
            <summary>
            Resets the <see cref="P:Syncfusion.Grouping.TableDescriptor.RelationChildColumns"/> collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.InitializePropertyDescriptors">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnNameChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnNameChanging(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.EnableOneTimePopulate">
            <summary>
            Populates TableDescriptor collections with new data   
            </summary>   
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnEnableOneTimePopulate">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.EnsureSummaryDescriptors">
            <summary>
            Repeatedly called from SummaryDescriptorCollection. Lets you
            recreate the Summaries collection if fields or columns have changed
            and you have internal summaries (e.g. GridGroupingControl adds a summary
            for each column to determine maximum length of a column).
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnItemPropertiesChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnItemPropertiesChanging(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnInitializeItemProperties(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.CreateRelationDescriptor">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.RelationDescriptor"/> object.
            </summary>
            <returns>The new relation descriptor.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.CreateChildTable(Syncfusion.Grouping.Element,System.Boolean,Syncfusion.Grouping.Table,Syncfusion.Grouping.SortColumnDescriptorCollection)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.ChildTable"/> object and initializes it.
            </summary>
            <param name="parent">The parent element.</param>
            <param name="hasRecords">Specifies if group will be filled with records or nested groups.</param>
            <param name="table">The table.</param>     
            <param name="fields">The sortColumns that define the category of the group.</param>
            <returns>The new child table..</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.CreateGroup(Syncfusion.Grouping.Section,System.Boolean,Syncfusion.Grouping.Table,Syncfusion.Grouping.SortColumnDescriptor)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.Group"/> object and initializes it.
            </summary>
            <param name="parentSection">The parent section.</param>        
            <param name="hasRecords">Specifies if group will be filled with records or nested groups.</param>
            <param name="table">The table.</param>
            <param name="cd">The sortColumn that defines the category of the group.</param>
            <returns>The new group.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.CreateGroup(Syncfusion.Grouping.Section,System.Boolean,Syncfusion.Grouping.Table,Syncfusion.Grouping.SortColumnDescriptorCollection)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.Group"/> object and initializes it.
            </summary>
            <param name="parentSection">The parent section.</param>       
            <param name="hasRecords">Specifies if group will be filled with records or nested groups.</param>
            <param name="table">The table.</param>
            <param name="fields">The sortColumns that define the category of the group.</param>
            <returns>The new group.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.CreateSortColumnDescriptorCollection(Syncfusion.Grouping.SortColumnDescriptor)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.SortColumnDescriptorCollection"/> collection with one <see cref="T:Syncfusion.Grouping.SortColumnDescriptor"/> entry.
            </summary>
            <param name="cd">The sort column.</param>
            <returns>A new SortColumnDescriptorCollection.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.CreateCaptionSection(Syncfusion.Grouping.Group)">
            <summary>
            Creates a new <see cref="T:Syncfusion.Grouping.Section"/> for a caption area within a group.
            </summary>
            <param name="group">The Group.</param>
            <returns>A new section for caption area.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.CreateFilterBarSection(Syncfusion.Grouping.Group)">
            <summary>
            Creates a new <see cref="T:Syncfusion.Grouping.Section"/> for a filter bar area within a group.
            </summary>
            <param name="group">The Group.</param>
            <returns>The new filter bar section.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.CreateColumnHeaderSection(Syncfusion.Grouping.Group)">
            <summary>
            Creates a new <see cref="T:Syncfusion.Grouping.Section"/> for a column header area within a group.
            </summary>
            <param name="group">The Group.</param>
            <returns>The new column header.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.CreateAddNewRecordSection(Syncfusion.Grouping.Group)">
            <summary>
            Creates a new <see cref="T:Syncfusion.Grouping.AddNewRecordSection"/> for an add new record area within a group.
            </summary>
            <param name="group">The Group.</param>
            <returns>A new AddNewRecordSection.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.CreateRecordsDetails(Syncfusion.Grouping.Group,Syncfusion.Grouping.SortColumnDescriptorCollection)">
            <summary>
            Creates a new <see cref="T:Syncfusion.Grouping.RecordsDetails"/> section for a records area within a group.
            </summary>
            <param name="group">The parent group.</param>
            <param name="fields">The sortColumns that define the category of the group.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.CreateGroupsDetails(Syncfusion.Grouping.Group,Syncfusion.Grouping.SortColumnDescriptorCollection)">
            <summary>
            Creates a new <see cref="T:Syncfusion.Grouping.GroupsDetails"/> section for a groups area with nested groups within a group
            </summary>
            <param name="group">The parent group.</param>
            <param name="fields">The sortColumns that define the category of the group.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.CreateSummarySection(Syncfusion.Grouping.Group)">
            <summary>
            Creates a new <see cref="T:Syncfusion.Grouping.Section"/> section for a summary area within a group.
            </summary>
            <param name="group">The Group.</param>
            <returns>The new summary section.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.CreateRecord(Syncfusion.Grouping.Table)">
            <summary>
            Creates a new <see cref="T:Syncfusion.Grouping.Record"/> object.
            </summary>
            <param name="table">The table.</param>
            <returns>The new record.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.CreateRelatedTable(Syncfusion.Grouping.TableDescriptor,Syncfusion.Grouping.Table)">
            <summary>
            Creates a new <see cref="T:Syncfusion.Grouping.Table"/> object for a related table.
            </summary>
            <param name="td">Table descriptor.</param>
            <param name="relationParentTable">Related parent table.</param>
            <returns>The new table.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnQueryValue(Syncfusion.Grouping.FieldValueEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.QueryValue"/> event
            </summary>
            <param name="e">The <see cref="T:Syncfusion.Grouping.FieldValueEventArgs"/> with event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.RaiseQueryValue(Syncfusion.Grouping.FieldValueEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.QueryValue"/> event.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.Grouping.FieldValueEventArgs"/> with event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnSaveValue(Syncfusion.Grouping.FieldValueEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.SaveValue"/> event.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.Grouping.FieldValueEventArgs"/> with event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.RaiseSaveValue(Syncfusion.Grouping.FieldValueEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.SaveValue"/> event.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.Grouping.FieldValueEventArgs"/> with event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.IsForeignKeyRelationChildTableDescriptor">
            <summary>
            Determines if this is the ChildTableDescriptor of a parent relation and also if the
            RelationDescriptor.RelationKind of the parent relations is ForeignKeyReference,
            RelatedMasterDetails, or ForeignKeyKeyWords.
            </summary>
            <returns>True if this is child and the relation kind is ForeignKeyReference,
            RelatedMasterDetails, or ForeignKeyKeyWords. </returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.IsChildOf(Syncfusion.Grouping.TableDescriptor)">
            <summary>
            Determines if this is the ChildTableDescriptor of a specified parent TableDescriptor.
            </summary>
            <param name="parent">The parent.</param>
            <returns>True if this is child; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.IsDesignTime">
            <summary>
            Returns true if engine is used by a parent control in design-time.
            </summary>
            <returns>returns False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnExceptionRaised(Syncfusion.Grouping.ExceptionRaisedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.ExceptionRaised"/> event.
            </summary>
            <param name="e">An <see cref="T:Syncfusion.Grouping.ExceptionRaisedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnGroupCollapsing(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the  <see cref="E:Syncfusion.Grouping.TableDescriptor.GroupCollapsing"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnGroupCollapsed(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the  <see cref="E:Syncfusion.Grouping.TableDescriptor.GroupCollapsed"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnGroupExpanding(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the  <see cref="E:Syncfusion.Grouping.TableDescriptor.GroupExpanding"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnGroupExpanded(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the  <see cref="E:Syncfusion.Grouping.TableDescriptor.GroupExpanded"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnRecordCollapsing(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Raises the  <see cref="E:Syncfusion.Grouping.TableDescriptor.RecordCollapsing"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnRecordCollapsed(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.RecordCollapsed"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnRecordExpanding(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.RecordExpanding"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnRecordExpanded(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.RecordExpanded"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnRecordDeleting(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.RecordDeleting"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnRecordDeleted(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.RecordDeleted"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnCurrentRecordContextChange(Syncfusion.Grouping.CurrentRecordContextChangeEventArgs)">
            <summary>
            Raises the  <see cref="E:Syncfusion.Grouping.TableDescriptor.CurrentRecordContextChange"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.CurrentRecordContextChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnCurrentRecordManagerReset(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Raises the  <see cref="E:Syncfusion.Grouping.TableDescriptor.CurrentRecordManagerReset"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.TableEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnGroupSummaryInvalidated(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.GroupSummaryInvalidated"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnSourceListListChanged(Syncfusion.Grouping.TableListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.SourceListListChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.TableListChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnSourceListListChangedCompleted(Syncfusion.Grouping.TableListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.SourceListListChangedCompleted"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.TableListChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnSourceListRecordChanged(Syncfusion.Grouping.RecordChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.SourceListRecordChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnSourceListRecordChanging(Syncfusion.Grouping.RecordChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.SourceListRecordChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnGroupAdded(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the  <see cref="E:Syncfusion.Grouping.TableDescriptor.GroupAdded"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnGroupRemoving(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.GroupRemoving"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnSortingItemsInGroup(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.SortingItemsInGroup"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnSortedItemsInGroup(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the  <see cref="E:Syncfusion.Grouping.TableDescriptor.SortedItemsInGroup"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnInvalidatingCounters(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.InvalidatingCounters"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.TableEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnInvalidatingSummaries(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.InvalidatingSummaries"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.TableEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnCategorizingRecords(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.CategorizingRecords"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.TableEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnCategorizedRecords(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Raises the  <see cref="E:Syncfusion.Grouping.TableDescriptor.CategorizedRecords"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.TableEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnTableSourceListChanged(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Raises the  <see cref="E:Syncfusion.Grouping.TableDescriptor.TableSourceListChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.TableEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnRecordValueChanging(Syncfusion.Grouping.RecordValueChangingEventArgs)">
            <summary>
            Raises the  <see cref="E:Syncfusion.Grouping.TableDescriptor.RecordValueChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordValueChangingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnRecordValueChanged(Syncfusion.Grouping.RecordValueChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.RecordValueChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordValueChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnDisplayElementChanging(Syncfusion.Grouping.DisplayElementChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.DisplayElementChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.DisplayElementChangingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnDisplayElementChanged(Syncfusion.Grouping.DisplayElementChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.DisplayElementChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.DisplayElementChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnSelectedRecordsChanging(Syncfusion.Grouping.SelectedRecordsChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.SelectedRecordsChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.SelectedRecordsChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableDescriptor.OnSelectedRecordsChanged(Syncfusion.Grouping.SelectedRecordsChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.TableDescriptor.SelectedRecordsChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.SelectedRecordsChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.Engine">
            <summary>
            Gets a reference to the <see cref="P:Syncfusion.Grouping.TableDescriptor.Engine"/> object that this table descriptor belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.ParentRelation">
            <summary>
            Gets a reference to the parent <see cref="T:Syncfusion.Grouping.RelationDescriptor"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.ParentTableDescriptor">
            <summary>
            Gets a reference to the parent <see cref="T:Syncfusion.Grouping.TableDescriptor"/> which has a <see cref="T:Syncfusion.Grouping.RelationDescriptor"/>
            that references this object.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.Name">
            <summary>Gets or sets the name of the table descriptor.</summary>
            <override/>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.PropertyChanged">
            <summary>
            Occurs when a property or child object has been changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.PropertyChanging">
            <summary>
            Occurs before a property or child object is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.Relations">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Grouping.RelationDescriptor"/> objects defining relations
            to other tables.
            </summary>
            <remarks>
            The default state of this collection and child objects is auto-populated from relation descriptors
            found in the underlying source list for this table. <para/>
            If you assign a <see cref="T:System.Data.DataView"/> or <see cref="T:System.Data.DataSet"/> to <see cref="M:Syncfusion.Grouping.Engine.SetSourceList(System.Collections.IEnumerable)"/>,
            the <see cref="P:Syncfusion.Grouping.TableDescriptor.Relations"/> collection is auto-populated from <see cref="T:System.Data.DataRelation"/> objects
            found in the <see cref="T:System.Data.DataSet"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.ForceEmptyRelations">
            <summary>
            Gets or sets whether the <see cref="P:Syncfusion.Grouping.TableDescriptor.Relations"/> collection should not be autopopulated. When you set this property true 
            <see cref="P:Syncfusion.Grouping.TableDescriptor.Relations"/>will be called. When you set this property false, <see cref="M:Syncfusion.Grouping.TableDescriptor.ResetRelations"/>
            will be called.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.Fields">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Grouping.FieldDescriptor"/> objects defining fields that
            represent bound or unbound values for each row in the table.
            </summary>
            <remarks>
            The default state of this collection and child objects is auto-populated from property descriptors
            found in the underlying source list for this table and expression fields that have been defined
            for this table. <para/>
            If you assign a <see cref="T:System.Data.DataView"/> or <see cref="T:System.Data.DataTable"/> to <see cref="M:Syncfusion.Grouping.Engine.SetSourceList(System.Collections.IEnumerable)"/>,
            the <see cref="T:Syncfusion.Grouping.FieldDescriptorCollection"/> collection is auto-populated from <see cref="T:System.Data.DataColumn"/> objects
            found in the <see cref="T:System.Data.DataView"/>. Expression fields will be appended to the collection.
            <para/>
            Bound fields do have a <see cref="P:Syncfusion.Grouping.FieldDescriptor.MappingName"/> that identifies a column in the underlying list.
            <para/>
            Unbound field do have an empty <see cref="P:Syncfusion.Grouping.FieldDescriptor.MappingName"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.ItemProperties">
            <summary>
            Gets / sets the <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with properties for
            each record in the table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.ItemPropertyTypes">
            <summary>
            For dynamic datasource only. Returns null for other type sources.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.UnboundFields">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Grouping.FieldDescriptor"/> objects defining unbound fields that
            are filled by the user.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.ExpressionFields">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Grouping.ExpressionFieldDescriptor"/> objects defining expression fields that
            represent values for each row in the table. Expression fields can reference other fields and
            support arithmetic calculatations and boolean expressions.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.GroupedColumns">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Grouping.SortColumnDescriptor"/> objects defining group by
            state of the table. Each <see cref="T:Syncfusion.Grouping.SortColumnDescriptor"/> in the collection references
            a <see cref="T:Syncfusion.Grouping.FieldDescriptor"/> of the <see cref="P:Syncfusion.Grouping.TableDescriptor.Fields"/> collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.PrimaryKeyColumns">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Grouping.SortColumnDescriptor"/> objects defining the primary key(s)
            for records of the table. Each <see cref="T:Syncfusion.Grouping.SortColumnDescriptor"/> in the collection references
            a <see cref="T:Syncfusion.Grouping.FieldDescriptor"/> of the <see cref="P:Syncfusion.Grouping.TableDescriptor.Fields"/> collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.Summaries">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Grouping.SummaryDescriptor"/> objects defining summaries
            of the table. Each <see cref="T:Syncfusion.Grouping.SummaryDescriptor"/> in the collection references
            a <see cref="T:Syncfusion.Grouping.FieldDescriptor"/> of the <see cref="P:Syncfusion.Grouping.TableDescriptor.Fields"/> collection. Based
            on the summaries defined in this collection each group in the table will have
            summaries calculated.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.RecordFilters">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Grouping.RecordFilterDescriptor"/> objects defining filter criteria
            for records in the table. Each <see cref="T:Syncfusion.Grouping.RecordFilterDescriptor"/> in the collection references
            one or multiple <see cref="T:Syncfusion.Grouping.FieldDescriptor"/> of the <see cref="P:Syncfusion.Grouping.TableDescriptor.Fields"/> collection. Multiple
            criteria can be combined with logical "And" or "Or" operations.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.SortedColumns">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Grouping.SortColumnDescriptor"/> objects defining sort state
            of the table. Each <see cref="T:Syncfusion.Grouping.SortColumnDescriptor"/> in the collection references
            a <see cref="T:Syncfusion.Grouping.FieldDescriptor"/> of the <see cref="P:Syncfusion.Grouping.TableDescriptor.Fields"/> collection. Multiple
            columns can be specified for sorting with the first column having the highest sort precedence.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.AllowNew">
            <summary>
            Gets / sets a value if adding new records should be allowed when the the underlying
            source list supports adding records.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.AllowNewChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Grouping.TableDescriptor.AllowNew"/> property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.AllowRemove">
            <summary>
            Gets / sets a value if removing records should be allowed when the the underlying
            source list supports removing records.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.AllowRemoveChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Grouping.TableDescriptor.AllowRemove"/> property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.AllowEdit">
            <summary>
            Gets / sets a value if editing records should be allowed when the the underlying
            source list supports editing records.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.AllowEditChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Grouping.TableDescriptor.AllowEdit"/> property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.ExpressionFieldEvaluator">
            <summary>
            Gets the <see cref="P:Syncfusion.Grouping.TableDescriptor.ExpressionFieldEvaluator"/> for this table which provides
            methods for parsing and calculating formulas that can reference fields of the
            <see cref="P:Syncfusion.Grouping.TableDescriptor.Fields"/> collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.RelationChildColumns">
            <summary>
            A collection from <see cref="T:Syncfusion.Grouping.RelationChildColumnDescriptor"/> that are children of a <see cref="T:Syncfusion.Grouping.TableDescriptor"/>.
            A RelationChildColumnDescriptor defines the sort order of a related table which is defined by the child columns in a 
            a master details relation. 
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.RowsPerRecord">
            <summary>
            Called to get the number of rows that should be added to each
            record. These are the rows that are visible when a record is
            expanded.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.PreviewRowsPerRecord">
            <summary>
            Called to get the number of preview rows that should be added to each
            record. Preview rows are the rows that are visible when a record is
            collapsed.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.IsSorted">
            <summary>
            Determines if table is sorted. Returns True if any SortedColumns or
            GroupedColumns are specified or if the table is a child table in
            a relation and has relation child columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.IsGrouped">
            <summary>
            Determines if table is grouped. Returns True if
            GroupedColumns are specified or if the table is a child table in
            a relation and has relation child columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.InOnInitializeItemProperties">
            <summary>
            Returns True when SetItemProperties is called from within OnInitializeItemProperties. Once SetItemProperties
            returns, the property will be reset to False.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.QueryValue">
            <summary>
            Occurs when a value for a field descriptor and record is returned. See the Grid\Grouping\Samples\CustomSummary
            sample how to use this event with unbound field descriptors.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.SaveValue">
            <summary>
            Occurs when a value for a field descriptor and record is saved. See the Grid\Grouping\Samples\CustomSummary
            sample how to use this event with unbound field descriptors.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.ExceptionRaised">
            <summary>
            Occurs when an unknown exception has been cached while modifying underlying data in the data source.
            </summary>
            <remarks>
            If necessary, you can rethrow the exception in your event handler.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.GroupCollapsing">
            <summary>
            Occurs before a group is collapsed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.GroupCollapsed">
            <summary>
            Occurs before a group is collapsed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.GroupExpanding">
            <summary>
            Occurs before a group is expanded.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.GroupExpanded">
            <summary>
            Occurs after a group is expanded.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.RecordCollapsing">
            <summary>
            Occurs before a record with nested tables is collapsed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.RecordCollapsed">
            <summary>
            Occurs after a record with nested tables is collapsed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.RecordExpanding">
            <summary>
            Occurs before a record with nested tables is expanded.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.RecordExpanded">
            <summary>
            Occurs after a record with nested tables is expanded.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.RecordDeleting">
            <summary>
            Occurs before a record is deleted.
            </summary>
            <remarks>
            This event is raised only when the <see cref="T:Syncfusion.Grouping.Table"/> or <see cref="T:Syncfusion.Grouping.Record"/> triggers the deletion. If
            the underlying source list deletes the record, a <see cref="E:Syncfusion.Grouping.Table.SourceListListChanged"/> event is raised instead.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.RecordDeleted">
            <summary>
            Occurs after a record is deleted.
            </summary>
            <remarks>
            This event is raised only when the <see cref="T:Syncfusion.Grouping.Table"/> or <see cref="T:Syncfusion.Grouping.Record"/> triggers the deletion. If
            the underlying source list deletes the record, a <see cref="E:Syncfusion.Grouping.Table.SourceListListChanged"/> event is raised instead.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.CurrentRecordContextChange">
            <summary>
            Occurs before and after the status of the current record is changed. Check the <see cref="P:Syncfusion.Grouping.CurrentRecordContextChangeEventArgs.Action"/>
            of the <see cref="T:Syncfusion.Grouping.CurrentRecordContextChangeEventArgs"/> to get information which current record state was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.CurrentRecordManagerReset">
            <summary>
            Occurs when the <see cref="M:Syncfusion.Grouping.CurrentRecordManager.Reset"/> method of the <see cref="T:Syncfusion.Grouping.CurrentRecordManager"/> was called.
            </summary>
            <remarks>
            The GridGroupingControl listens to this event and resets any "Current Cell" state when this
            event is raised.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.GroupSummaryInvalidated">
            <summary>
            Occurs when a summary has been marked dirty.
            </summary>
            <remarks>
            The GridGroupingControl listens to this event and will force a repaint of the specified summary if it is visible
            when this event is raised.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.SourceListListChanged">
            <summary>
            Occurs before the <see cref="T:Syncfusion.Grouping.Table"/> processes the <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> event
            of an attached source list. More detailed <see cref="E:Syncfusion.Grouping.TableDescriptor.SourceListRecordChanged"/> events will be
            raised after this event.
            </summary>
            <remarks>
            The reason for firing this event is to give a programmer chance to react to an <see cref="E:System.ComponentModel.IBindingList.ListChanged"/>
            event before the engine since there is otherwise no order guaranteed when an IBindingList raises a ListChanged
            event.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.SourceListListChangedCompleted">
            <summary>
            Occurs after the <see cref="T:Syncfusion.Grouping.Table"/> processes the <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> event
            of an attached source list.
            </summary>
            <remarks>
            The reason for firing this event is to give a programmer the chance to react to an <see cref="E:System.ComponentModel.IBindingList.ListChanged"/>
            event right after the engine since there is otherwise no order guaranteed when an IBindingList raises a ListChanged
            event.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.SourceListRecordChanged">
            <summary>
            Occurs when a record in the underlying datasource was added, removed, or changed and after
            the <see cref="T:Syncfusion.Grouping.Table"/> was updated with that change.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.SourceListRecordChanging">
            <summary>
            Occurs when a record in the underlying datasource was added, removed, or changed and before
            the <see cref="T:Syncfusion.Grouping.Table"/> is updated with that change.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.InvalidateAllWhenListChanged">
            <exclude/>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.GroupAdded">
            <summary>
            Occurs when a new group is added in a table after the table was categorized and when a record was changed. The event does not
            occur during categorization of the table. See the <see cref="E:Syncfusion.Grouping.TableDescriptor.CategorizedRecords"/> elements to when categorization
            finished.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.GroupRemoving">
            <summary>
            Occurs when a group was removed from a table after the table was categorized and when a record was changed. The event does not
            occur during categorization of the table. See the <see cref="E:Syncfusion.Grouping.TableDescriptor.CategorizedRecords"/> elements to when categorization
            finished.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.SortingItemsInGroup">
            <summary>
            Occurs before the records for a group are sorted.
            </summary>
            <remarks>
            The engine has a built-in optimization for sorting columns that allows it to perform the sorting
            on an on-demand basis group-by-group. Suppose you have a table with 200 different countries and
            you change the sort order of city. It is not necessary to sort the whole table. Instead
            the individual groups can be sorted when they are scrolled into view. SortingItemsInGroup and
            SortedItemsInGroup events are fired in such case when a specific group is sorted on demand.
            <para/>
            If the whole table was set dirty (see <see cref="P:Syncfusion.Grouping.Table.TableDirty"/>), then the whole table
            is simply recategorized. In that case, only a CategorizedElements event is raised but no
            SortingItemsInGroup event.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.SortedItemsInGroup">
            <summary>
            Occurs after the records for a group were sorted.
            </summary>
            <remarks>
            The engine has a built-in optimization for sorting columns that allows it to perform the sorting
            on an on-demand basis group-by-group. Suppose you have a table with 200 different countries and
            then you change the sort order of city, it is not necessary to sort the whole table. Instead,
            the individual groups can be sorted when they are scrolled into view. SortingItemsInGroup and
            SortedItemsInGroup events are fired in such cases when a specific group was sorted on demand.
            <para/>
            If the whole table was set dirty (see <see cref="P:Syncfusion.Grouping.Table.TableDirty"/>), then the whole table
            is simply recategorized. In that case, only a CategorizedElements event is raised but no
            SortedItemsInGroup event.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.InvalidatingCounters">
            <summary>
            Occurs when the <see cref="M:Syncfusion.Grouping.Table.InvalidateCounterTopDown(System.Boolean)"/> of a <see cref="T:Syncfusion.Grouping.Table"/> is called
            and before all counters are marked dirty.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.InvalidatingSummaries">
            <summary>
            Occurs when the <see cref="M:Syncfusion.Grouping.Table.InvalidateSummariesTopDown"/> of a <see cref="T:Syncfusion.Grouping.Table"/> is called
            and before all summaries in that table are marked dirty.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.CategorizingRecords">
            <summary>
            Occurs before records are categorized after a table was marked dirty (<see cref="P:Syncfusion.Grouping.Table.TableDirty"/>).
            </summary>
            <remarks>
            When <see cref="P:Syncfusion.Grouping.Table.TableDirty"/> is set True, e.g. because schema information for a table was changed
            or because the grouped columns were changed, the table will categorize records on demand the first time
            information about a record is accessed. At that time, the <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object)"/> of the <see cref="T:Syncfusion.Grouping.Table"/> will start
            categorization.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.CategorizedRecords">
            <summary>
            Occurs after records were categorized after a table was marked dirty (<see cref="P:Syncfusion.Grouping.Table.TableDirty"/>).
            </summary>
            <remarks>
            When <see cref="P:Syncfusion.Grouping.Table.TableDirty"/> is set True, e.g. because schema information for a table was changed
            or because the grouped columns were changed, the table will categorize records on demand the first time
            information about a record is accessed. At that time, the <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object)"/> of the <see cref="T:Syncfusion.Grouping.Table"/>
            will start
            categorization.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.TableSourceListChanged">
            <summary>
            Occurs after the data source is replaced.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.RecordValueChanging">
            <summary>
            Occurs when a RecordFieldCell cell's value is changed and before Record.SetValue is called.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.RecordValueChanged">
            <summary>
            Occurs when a RecordFieldCell cell's value is changed and after Record.SetValue returned.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.DisplayElementChanging">
            <summary>
            When number of visible elements is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.DisplayElementChanged">
            <summary>
            When number of visible elements is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.SelectedRecordsChanging">
            <summary>
            Occurs before the <see cref="P:Syncfusion.Grouping.Table.SelectedRecords"/> collection is modified.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.TableDescriptor.SelectedRecordsChanged">
            <summary>
            Occurs after the <see cref="P:Syncfusion.Grouping.Table.SelectedRecords"/> collection was modified.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableDescriptor.ForwardTableEvents">
            <summary>
            Gets / sets an object that handles events raised by the <see cref="T:Syncfusion.Grouping.Table"/> object.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.UnboundFieldDescriptorCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Grouping.FieldDescriptor"/> fields with unbound fields. 
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.TableDescriptor.UnboundFields"/> property
            of a <see cref="T:Syncfusion.Grouping.TableDescriptor"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.UnboundFieldDescriptorCollection.Empty">
            <summary>
            A Read-only and empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.UnboundFieldDescriptorCollection.EnsureInitialized(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.UnboundFieldDescriptorCollection.#ctor">
            <summary>
            Initializes a new empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.UnboundFieldDescriptorCollection.CreateCollection(Syncfusion.Grouping.TableDescriptor,Syncfusion.Grouping.FieldDescriptor[])">
            <summary>
            Called from InternalClone to create a new collection and attach it to the specified table descriptor
            and insert the specified fields. The fields have already been cloned.
            </summary>
            <param name="td">The table descriptor.</param>
            <param name="fieldDescriptors">The cloned field descriptors.</param>
            <returns>A new FieldDescriptorCollection.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.UnboundFieldDescriptorCollection.SuggestName(Syncfusion.Grouping.FieldDescriptor)">
            <override/>
        </member>
        <member name="T:Syncfusion.Grouping.GroupingCollectionEditor">
            <summary>
            Provides a user interface that can edit collections of descriptor elements at design-time.
            </summary>
            <remarks>
            GroupingCollectionEditor checks for the IInsideCollectionEditorProperty of an associated collection.
            This allows it to make a copy of the original collection and compare the two collections at the
            time the user closes the collection editor. Only if changes are detected is the underlying component
            updated with changes.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.GroupingCollectionEditor.#ctor(System.Type)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Grouping.GroupingCollectionEditor"/> with a
            type to create instances for collention items.
            </summary>
            <param name="type">Type for collection item.</param>
        </member>
        <member name="M:Syncfusion.Grouping.GroupingCollectionEditor.CancelChanges">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupingCollectionEditor.CreateCollectionForm">
            <summary>
            Creates a new form to display and edit the current collection.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.Design.CollectionEditor.CollectionForm"/> to provide as the user interface for editing the collection.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupingCollectionEditor.collectionForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            used to check whether user manually closing the collection editor form.
            </summary>
            <param name="sender">collection editor</param>
            <param name="e">formclosingeventargs</param>
        </member>
        <member name="M:Syncfusion.Grouping.GroupingCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>Edits the value of the specified object using the given service provider and context.</summary>
            <param name="context">Format context.</param>
            <param name="provider">Service provider.</param>
            <param name="value">The object to edit.</param>
            <returns>Edited value.</returns>
            <override/>
        </member>
        <member name="T:Syncfusion.Grouping.IGetItemProperties">
            <summary>
            Provides support for the <see cref="M:Syncfusion.Grouping.IGetItemProperties.GetItemProperties"/> method that returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.IGetItemProperties.GetItemProperties">
            <summary>
            Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/>.
            </summary>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/>.</returns>
        </member>
        <member name="T:Syncfusion.Grouping.GetItemPropertiesNameConverter">
            <summary>
            A type converter that utilizes the IGetItemProperties interface and provides standard
            values based on the properties returned by IGetItemProperties.GetItemProperties. These
            standard values can be dropped down in the PropertyGrid at design-time.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.GetItemPropertiesNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter is
            designed for when provided with a format context.
            </summary>
            <param name="context">Format context.</param>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/>
            that holds a standard set of valid values, or null if the data type does not
            support a standard set of values.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GetItemPropertiesNameConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> is an
            exclusive list of possible values, using the specified context.
            </summary>
            <param name="context">Format context. </param>
            <returns>
            true if the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/>
            returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> is an
            exhaustive list of possible values; false if other values are possible.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GetItemPropertiesNameConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked
            from a list, using the specified context.
            </summary>
            <param name="context">Format context. </param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/>
            should be called to find a common set of values the object supports; otherwise,
            false.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GetItemPropertiesNameConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the
            type of this converter, using the specified context.
            </summary>
            <param name="context">Format context. </param>
            <param name="sourceType">The type you want to convert from. </param>      
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GetItemPropertiesNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified
            context and culture information.
            </summary>
            <param name="context">Format context. </param>
            <param name="culture">The culture information. </param>
            <param name="value">The object value to convert. </param>       
            <returns>
            The converted value.
            </returns>
            <override/>
        </member>
        <member name="T:Syncfusion.Grouping.StandardValuesCollectionConverter">
            <summary>
            A type converter that utilizes the IStandardValuesProvider interface and provides standard
            values based on the names returned by IStandardValuesProvider.GetStandardValues. These
            standard values can be dropped down in the PropertyGrid at design-time.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.StandardValuesCollectionConverter.ShouldSortStandardValues(System.Object)">
            <summary>
            Determines whether the standard values should be sorted alphabetically by
            checking the Engine.SortMappingNames property.
            </summary>
            <param name="ips">The object instance</param>
            <returns>returns boolean value</returns>
        </member>
        <member name="M:Syncfusion.Grouping.StandardValuesCollectionConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
            <summary>
            Returns a collection of standard values for the data type this type converter is
            designed for when provided with a format context.
            </summary>
            <param name="context">An <see
            cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format
            context that can be used to extract additional information about the environment
            from which this converter is invoked. This parameter or properties of this
            parameter can be null. </param>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />
            that holds a standard set of valid values, or null if the data type does not
            support a standard set of values.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.StandardValuesCollectionConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
            <summary>
            Returns whether the collection of standard values returned from <see
            cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> is an
            exclusive list of possible values, using the specified context.
            </summary>
            <param name="context">An <see
            cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format
            context. </param>
            <returns>
            true if the <see
            cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />
            returned from <see
            cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> is an
            exhaustive list of possible values; false if other values are possible.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.StandardValuesCollectionConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
            <summary>
            Returns whether this object supports a standard set of values that can be picked
            from a list, using the specified context.
            </summary>
            <param name="context">An <see
            cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format
            context. </param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />
            should be called to find a common set of values the object supports; otherwise,
            false.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.StandardValuesCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <override/>
            <summary>
            Returns whether this converter can convert an object of the given type to the
            type of this converter, using the specified context.
            </summary>
            <param name="context">An <see
            cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format
            context. </param>
            <param name="sourceType">A <see cref="T:System.Type" /> that represents the type
            you want to convert from. </param>       
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.StandardValuesCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <override/>
            <summary>
            Converts the given object to the type of this converter, using the specified
            context and culture information.
            </summary>
            <param name="context">An <see
            cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format
            context. </param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to
            use as the current culture. </param>
            <param name="value">The <see cref="T:System.Object" /> to convert. </param>
            <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be
            performed. </exception>
        </member>
        <member name="T:Syncfusion.Grouping.CustomTypeDescriptorConverter">
            <summary>
            A ExpandableObjectConverter that lets users expand collections at design-time and list
            collection items similar to nested properties of a class.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CustomTypeDescriptorConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>Gets a collection of properties for the specified object type.</summary>
            <param name="context">Format context.</param>
            <param name="value">Array type for which to get the properties.</param>
            <param name="attributes">An array of type System.Attribute that will be used as a filter.</param>
            <returns>Property descriptor collection.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.CustomTypeDescriptorConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>Gets a value indicating whether this object supports properties using the specified context.</summary>
            <param name="context">Format context.</param>
            <returns>True when the properties are supported; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.CustomTypeDescriptorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Determines whether this object can be converted to the specified type, using the given format.</summary>
            <param name="context">Format context.</param>
            <param name="destinationType">Target type.</param>
            <returns>True if this conversion is supported; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.CustomTypeDescriptorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value to the specified type, using the given format and culture.</summary>
            <param name="context">Format context.</param>
            <param name="culture">The CultureInfo.</param>
            <param name="value">The value.</param>
            <param name="destinationType">The Target type.</param>
            <returns>Converted object.</returns>
            <override/>
        </member>
        <member name="T:Syncfusion.Grouping.DescriptorBasePropertyDescriptor">
            <summary>
            A custom PropertyDescriptor that adds design-time support for descriptor collections
            in the grouping enegine. DescriptorBasePropertyDescriptor objects help with adding support for
            expanding a collection similar to an expandable object in a property grid. 
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.DescriptorBasePropertyDescriptor.#ctor(System.String,Syncfusion.Grouping.DescriptorBase,System.Attribute[],System.Type)">
            <summary>
            Initializes a new DescriptorBasePropertyDescriptor object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="columnDescriptor">The descriptor element.</param>
            <param name="attributes">Property attributes (passed through to PropertyDescriptor ctor).</param>
            <param name="componentType">The component type (passed through to PropertyDescriptor ctor).</param>
        </member>
        <member name="M:Syncfusion.Grouping.DescriptorBasePropertyDescriptor.CanResetValue(System.Object)">
            <internalonly/>
            <summary>
               Determines if the the component will allow its value to be reset.
            </summary>
            <param name="comp">The component to reset.</param>
            <returns>
               True if the component supports resetting its value.
            <seealso cref="T:System.ComponentModel.PropertyDescriptor"/>
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.DescriptorBasePropertyDescriptor.GetValue(System.Object)">
            <internalonly/>
            <summary>
               Retrieves the value of the property for the given component. This will
               throw an exception if the component does not have this property.
            </summary>
            <param name="comp">The component.</param>
            <returns>
               The value of the property on comp. This can be cast
               to the property type.
            <seealso cref="T:System.ComponentModel.PropertyDescriptor"/>
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.DescriptorBasePropertyDescriptor.ResetValue(System.Object)">
            <internalonly/>
            <summary>
               Resets the value of this property on comp to the default value.
            </summary>
            <param name="comp">The component whose property is to be reset.</param>
            <seealso cref="T:System.ComponentModel.PropertyDescriptor"/>
        </member>
        <member name="M:Syncfusion.Grouping.DescriptorBasePropertyDescriptor.SetValue(System.Object,System.Object)">
            <internalonly/>
            <summary>
               Sets the value of this property on the given component.
            </summary>
            <param name="comp">The component whose property is to be set.</param>
            <param name="value">The new value of the property.</param>
            <seealso cref="T:System.ComponentModel.PropertyDescriptor"/>
        </member>
        <member name="M:Syncfusion.Grouping.DescriptorBasePropertyDescriptor.ShouldSerializeValue(System.Object)">
            <internalonly/>
            <summary>
               <para>Determines if this property should be persisted. A property is
                  to be persisted if it is marked as persistable through a
                  PersistableAttribute and if the property contains something other
                  than the default value. Note, however, that this method will
                  return True for design-time properties as well, so callers
                  should also check to see if a property is design-time only before
                  persisting to run-time storage.</para>
            </summary>
            <param name='comp'>The component on which the property resides.</param>
            <returns>
               <para>True if the property should be persisted to either
                  design-time or run-time storage.</para>
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.DescriptorBasePropertyDescriptor.ComponentType">
            <internalonly/>
            <summary>
               Retrieves the type of the component this PropertyDescriptor is bound to.
            </summary>
            <returns>
               The type of component.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.DescriptorBasePropertyDescriptor.DisplayName">
            <internalonly/>
            <summary>
               Retrieves the display name of the property. This is the name that will
               be displayed in a property browser. This will be the same as the property
               name for most properties.
            </summary>
            <returns>
               A string containing the name to display in the property browser.
            <seealso cref="T:System.ComponentModel.PropertyDescriptor"/>
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.DescriptorBasePropertyDescriptor.IsReadOnly">
            <internalonly/>
            <summary>
               Determines if the property can be written to.
            </summary>
            <returns>
               True if the property can be written to.
            <seealso cref="T:System.ComponentModel.PropertyDescriptor"/>
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.DescriptorBasePropertyDescriptor.PropertyType">
            <internalonly/>
            <summary>
               Retrieves the data type of the property.
            </summary>
            <returns>
               A class representing the data type of the property.
            <seealso cref="T:System.ComponentModel.PropertyDescriptor"/>
            </returns>
        </member>
        <member name="T:Syncfusion.Grouping.Diagnostics">
            <summary>Internal only</summary>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Grouping.Diagnostics.MaxLineLength">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Grouping.Diagnostics.MaxCount">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Diagnostics.DumpElement(Syncfusion.Grouping.Element)">
            <summary>Internal only.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Diagnostics.IterateThroughDisplayElement(Syncfusion.Grouping.Table)">
            <summary>Internal only.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Diagnostics.IterateThroughNestedDisplayElement(Syncfusion.Grouping.Table)">
            <summary>Internal only</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Diagnostics.IterateThroughAllElement(Syncfusion.Grouping.Table)">
            <summary>Internal only</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Diagnostics.IterateThroughNestedElements(Syncfusion.Grouping.Table)">
            <summary>Internal only</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Diagnostics.IterateThroughUnsortedRecords(Syncfusion.Grouping.Table)">
            <summary>Internal only</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Diagnostics.IterateThroughAllSortedRecords(Syncfusion.Grouping.Table)">
            <summary>Internal only</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Diagnostics.IterateThroughFilteredRecords(Syncfusion.Grouping.Table)">
            <summary>Internal only</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Diagnostics.IterateThroughGroups(Syncfusion.Grouping.Table)">
            <summary>Internal only</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Diagnostics.IterateThroughGroup(System.String,Syncfusion.Grouping.Group)">
            <summary>Internal only</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Diagnostics.DumpSummaries(Syncfusion.Grouping.Element)">
            <summary>Internal only</summary>
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Grouping.Switches">
            <summary>
               Provides predefined switches for enabling / disabling trace
               output or code instrumentation in the Syncfusion shared library.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.ExpressionFieldEvaluator">
            <summary>
            Encapsulates the code required to parse and compute formulas. Hashtable
            properties maintain a Formula Library of functions as well as a list
            of dependent cells.
            <para/>
            You can add and remove library functions.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldEvaluator.ToString">
            <summary>
            Displays information on the cell currently being calculated.
            </summary>
            <returns>String with information on the cell currently being calculated.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldEvaluator.#ctor(Syncfusion.Grouping.TableDescriptor)">
            <summary>
            Constructor for ExpressionFieldEvaluator.
            </summary>
            <param name="tableDescriptor">The table descriptor.</param>
        </member>
        <member name="F:Syncfusion.Grouping.ExpressionFieldEvaluator.FormulaErrorStrings">
            <summary>
            String array that holds the strings used in error messages within the Formula Engine.
            </summary>
            <remarks>If you want to change the error messages displayed within the Formula Engine,
            you can set your new strings into the appropriate position in the FormulaErrorStrings 
            array. Here is the code that shows the default settings. You should assign your new
            strings to the corresponding positions. 
            </remarks>
            <example>Here is the code that shows position of each string in FormulaErrorStrings.
            <code lang="C#">
                   public string[] FormulaErrorStrings = new string[]
                   {
                       "binary operators cannot start an expression",    //0
                       "cannot parse",                                    //1
                       "bad library",                                    //2
                       "invalid char in front of",                        //3
                       "number contains 2 decimal points",                //4
                       "expression cannot end with an operator",        //5
                       "invalid characters following an operator",        //6
                       "invalid character in number",                    //7
                       "mismatched parentheses",                        //8
                       "unknown formula name",                            //9
                       "requires a single argument",                    //10
                       "requires 3 arguments",                            //11
                       "invalid Math argument",                        //12
                       "requires 2 arguments",                            //13
                       "bad index",                                    //14
                       "too complex",                                    //15
                       "circular reference: ",                            //16
                       "missing formula",                                //17
                       "improper formula",                                //18
                       "invalid expression",                            //19
                       "cell empty",                                    //20
                       "empty expression",                                //21
                    "mismatched string tics",                        //22
                    "named functions not supported in expressions",    //23
                    "not a formula",                                //24
                    "missing operand"                                //25
                   };
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldEvaluator.InitializeTableFormulaTokens">
            <summary>
            Loads item properties from the table descriptor and creates tokens that can be used
            in compiled expressions.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldEvaluator.GetAlphaLabel(System.Int32)">
            <summary>
            Returns a string in the format "A, B, C, ... AA, AB ..." to be used for column labels.
            </summary>
            <param name="nCol">The column index.</param>
            <returns>
              <para>A string that contains the column label for the column index.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldEvaluator.PutTokensInFormula(System.String)">
            <summary>
            Replaces column references with tokens.
            </summary>
            <param name="formula">The formula expression.</param>
            <returns>A prepared expression string.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldEvaluator.ComputeFormulaValueAt(System.String,Syncfusion.Grouping.Record,System.String)">
            <summary>
            Compute values for the record in the datasource.
            </summary>
            <param name="formula">The pre-compiled formula expression.</param>
            <param name="position">The record.</param>
            <param name="expressionName">The name of the expression being computed.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldEvaluator.ComputeFormulaValueAt(System.String)">
            <summary>
            Compute values for the record of inner formulas.
            </summary>
            <param name="formula">The pre-compiled formula expression.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldEvaluator.ComputeFormulaValueAt(System.String,Syncfusion.Grouping.Record)">
            <summary>
            Compute values for the record in the datasource.
            </summary>
            <param name="formula">The pre-compiled formula expression.</param>
            <param name="position">The record.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldEvaluator.GetValueFromDataTable(System.String)">
            <summary>
            Returns the value for the specified field / token from the record.
            </summary>
            <param name="token">The column token.</param>
            <returns>The value from the record.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldEvaluator.MarkLibraryFormulas(System.String@)">
            <summary>
            It parse the formula for library fnction.
            </summary>
            <param name="formula">formula to compute</param>
            <returns>parsed formula with functions.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldEvaluator.AddFunction(System.String,Syncfusion.Grouping.ExpressionFieldEvaluator.LibraryFunction)">
            <summary>
            Adds a function to the Function Library.
            </summary>
            <param name="name">The name of the function to be added.</param>
            <param name="func">The function to be added.</param>
            <returns>True if successfully added, False otherwise.</returns>
            <remarks>
            LibraryFunction is a delegate the defines the signature of functions that
            you can add to the Function Library.
            Adding a custom function requires two steps. The first is to register a name
            and LibraryFunction delegate with the ExpressionFielEvaluator object. The second step
            is to add a method to your code that implements the LibraryFunction delegate to perform 
            the calculations you want done.
            <para/>
            There are restrictions on the use Functions within expressions. Functions can only be used 
            stand-alone. They cannot be used as part of a more complex expression. So, 
            "Func([Col1], 2*[Col2]+1)" is a valid use of a function named Func that accepts two
            arguments. But "2 * Func([Col1], 2*[Col2]+1) + 1" is not valid. If you need to use
            functions in algebraic expressions, then first add an Expression field that uses the 
            function stand-alone. Then in your algebraic expression, you can refer to this Expression
            field. Argument used in library function calls, can be any algebraic combination of 
            fields and constants, but they cannot contain function references. During calculations, the
            arguments are fully evaluated before being passed into the method you implement.
            </remarks>
            <example>  
            In the sample below,
            ComputeFunc is the name of the method we add to our code to compute the function value.
            Func is the string name that we use in an expression to reference the custom function as in
            "Func([Col1], [Col2])". 
            <code lang="C#">
            // step 1 - register the function name and delegate
            ExpressionFieldEvaluator evaluator = this.groupingEngine.TableDescriptor.ExpressionFieldEvaluator;//.CreateExpressionFieldEvaluator(this.groupingEngine.TableDescriptor);
            evaluator.AddFunction("Func", new ExpressionFieldEvaluator.LibraryFunction(ComputeFunc));
            <para/>
            //. . . 
             <para/>
            // step 1 - defining the method
            // Computes the absolute value of arg1-2*arg2
               // parameter s- a list of 2 arguments 
            // returns string holding computed value
            public string ComputeFunc(string s)
            {
                //get the list delimiter (for en-us, its is a comma)
                char comma = Convert.ToChar(this.gridGroupingControl1.Culture.TextInfo.ListSeparator);
                string[] ss = s.Split(comma);
                if(ss.GetLength(0) != 2)
                    throw new ArgumentException("Requires 2 arguments.");
                double arg1, arg2;
                if(double.TryParse(ss[0], System.Globalization.NumberStyles.Any, null, out arg1)
                    &amp;&amp; double.TryParse(ss[1], System.Globalization.NumberStyles.Any, null, out arg2))
                {
                    return Math.Abs(arg1 - 2 * arg2).ToString();
                }
                return "";
            }
            </code>
            <code lang="VB">
            ' step 1 - register the function name and delegate
            Dim evaluator As ExpressionFieldEvaluator = Me.groupingEngine.TableDescriptor.ExpressionFieldEvaluator
            evaluator.AddFunction("Func", New ExpressionFieldEvaluator.LibraryFunction(AddressOf ComputeFunc)) 
             <para/>
            '. . .
             <para/>
            ' step 1 - defining the method
            ' Computes the absolute value of arg1-2*arg2
            ' parameter s- a list of 2 arguments 
            ' returns string holding computed value
            Public Function ComputeFunc(s As String) As String
                'get the list delimiter (for en-us, its is a comma)
                Dim comma As Char = Convert.ToChar(Me.gridGroupingControl1.Culture.TextInfo.ListSeparator)
                Dim ss As String() = s.Split(comma)
                If ss.GetLength(0) &lt;&gt; 2 Then
                       Throw New ArgumentException("Requires 2 arguments.")
                End If
                 Dim arg1, arg2 As Double
                If Double.TryParse(ss(0), System.Globalization.NumberStyles.Any, Nothing, arg1) _ 
                       AndAlso Double.TryParse(ss(1), System.Globalization.NumberStyles.Any, Nothing, arg2) Then
                    Return Math.Abs((arg1 - 2 * arg2)).ToString()
                End If
                Return ""
            End Function 'ComputeFunc
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldEvaluator.RemoveFunction(System.String)">
            <summary>
            Removes a function from the Function Library.
            </summary>
            <param name="name">The name of the function to be removed.</param>
            <returns>True if successfully removed, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldEvaluator.ExpressionParseSimple(System.String)">
            <summary>
            Used to parse the formula text for IExpressionFieldEvaluator
            </summary>
            <param name="text">formula string that needs to parse</param>
            <returns>parsed formula string</returns>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldEvaluator.IsExpressionValid(System.String,System.String,Syncfusion.Grouping.Record,System.String@)">
            <summary>
            Checks if an expression formula is valid for a particular host expression based on the record.
            </summary>
            <param name="expressionFieldName">The name of the host ExpressionFieldDescriptor.</param>
            <param name="formula">The formula.</param>
            <param name="record">The record which has data to validate the expression.</param>
            <param name="errorString">Returns the error string if expression is invalid. </param>
            <returns>True if formula is valid, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.ExpressionFieldEvaluator.IsExpressionValid(System.String,System.String,System.String@)">
            <summary>
            Checks if an expression formula is valid for a particular host expression.
            </summary>
            <param name="expressionFieldName">The name of the host ExpressionFieldDescriptor.</param>
            <param name="formula">The formula.</param>
            <param name="errorString">Returns the error string, if any.</param>
            <returns>True if formula is valid, false otherwise.</returns>
        </member>
        <member name="P:Syncfusion.Grouping.ExpressionFieldEvaluator.Culture">
            <summary>
            Gets the culture information.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ExpressionFieldEvaluator.MaximumRecursiveCalls">
            <summary>
            Specifies the maximum number of recursive calls that can be used to compute a value.
            </summary>
            <remarks>This property comes into play when you have a calculated formula cell that depends on  
            another calculated formula that depends on another calculated formula and so on. If the number of
            'depends on another formula' exceeds MaximumRecursiveCalls, you will see a Too Complex message
            displayed in the cell. The default value is 20, but you can set it higher or lower depending upon 
            your expected needs. The purpose of the limit is to avoid a circular reference locking up your
            application.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.ExpressionFieldEvaluator.FunctionNames">
            <summary>
            A hashtable whose keys are function names and 
            whose values are LibraryFunction delgates.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.ExpressionFieldEvaluator.LibraryFunction">
            <summary>
            Delegate for custom functions used with <see cref="M:Syncfusion.Grouping.ExpressionFieldEvaluator.AddFunction(System.String,Syncfusion.Grouping.ExpressionFieldEvaluator.LibraryFunction)"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.Internals.TableRecordDataComparer">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Grouping.Internals.TablePrimaryKeyRecordDataComparer">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Grouping.Internals.RecordDataComparer">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Grouping.Internals.PrimaryKeyRecordDataComparer">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Grouping.Internals.IGroupByCategorizer">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Grouping.Internals.GroupedColumnCategorizer">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Grouping.Internals.GroupedColumnsComparer">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Grouping.Internals.SortColumnComparer">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Grouping.Internals.PrimaryKeyColumnComparer">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Grouping.Internals.GroupsDetailsSortColumnsComparer">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Grouping.Internals.RecordsDetailsSortColumnComparer">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Grouping.CompareColumns">
            <summary>
            Provides utilities for comparing two records or columns.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CompareColumns.CompareSortKeys(System.Boolean,Syncfusion.Grouping.SortColumnDescriptor[],System.Object,System.Object)">
            <summary>
            Compares the sort keys for the two records specified with x and y.
            </summary>
            <param name="isSorted">Spedifes whether the values are sorted.</param>
            <param name="arrayOfColumnDescriptors">Array of sort column descriptors.</param>
            <param name="x">First record to compare.</param>
            <param name="y">Second record to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater
            than zero x is greater than y.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.CompareColumns.CompareNullableObjects(Syncfusion.Grouping.SortColumnDescriptor,System.Object,System.Object)">
            <summary>
            Compares two nullbale objects.
            </summary>
            <param name="columnDescriptor">Sort column descriptor.</param>
            <param name="x">First object to compare.</param>
            <param name="y">Second object to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greatervthan
            zero x is greater than y.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.CompareColumns.CompareNullableObjects(System.Object,System.Object)">
            <summary>
            Compare two nullable objects.
            </summary>
            <param name="x">First object to compare.</param>
            <param name="y">Second object to compare.</param>
            <returns>Value Condition Less than zero x is less than y. Zero x equals y. Greatervthan zero x is greater than y.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CompareColumns.ComparePrimaryKeys(System.Boolean,Syncfusion.Grouping.SortColumnDescriptor[],System.Object,System.Object)">
            <summary>
            Compares the primary keys for the two records specified with x and y.
            </summary>
            <param name="isSorted">Spedifes whether the values are sorted.</param>
            <param name="arrayOfColumnDescriptors">Array of sort column descriptors.</param>
            <param name="x">First record to compare.</param>
            <param name="y">Second record to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater
            than zero x is greater than y.
            </returns>
        </member>
        <member name="F:Syncfusion.Grouping.Internals.FilteredRecordCounter.Empty">
            <summary>
            Gets an empty TreeTableVisibleCounter that represents 0 visible elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.FilteredRecordCounter.CreateCounter">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.FilteredRecordCounter.GetValue(System.Int32)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.FilteredRecordCounter.OnCombineCounters(Syncfusion.Collections.BinaryTree.ITreeTableCounter,Syncfusion.Collections.BinaryTree.ITreeTableCounter,System.Int32)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.FilteredRecordCounter.Compare(Syncfusion.Collections.BinaryTree.TreeTableVisibleCounter,System.Int32)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.FilteredRecordCounter.IsEmpty(System.Int32)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.FilteredRecordCounter.ToString">
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.FilteredRecordCounter.Kind">
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.FilteredRecordCounterWithKind.Kind">
            <override/>
        </member>
        <member name="F:Syncfusion.Grouping.Internals.YAmountCounter.Empty">
            <summary>
            Gets an empty TreeTableVisibleCounter that represents 0 visible elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.YAmountCounter.CreateCounter">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.YAmountCounter.GetValue(System.Int32)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.YAmountCounter.OnCombineCounters(Syncfusion.Collections.BinaryTree.ITreeTableCounter,Syncfusion.Collections.BinaryTree.ITreeTableCounter,System.Int32)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.YAmountCounter.Compare(Syncfusion.Collections.BinaryTree.TreeTableVisibleCounter,System.Int32)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.YAmountCounter.ToString">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.YAmountCounter.IsEmpty(System.Int32)">
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.YAmountCounter.Kind">
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.YAmountCounterWithKind.Kind">
            <override/>
        </member>
        <member name="F:Syncfusion.Grouping.Internals.Counter.Empty">
            <summary>
            Gets an empty TreeTableVisibleCounter that represents 0 visible elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.Counter.CreateCounter">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.Counter.GetValue(System.Int32)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.Counter.OnCombineCounters(Syncfusion.Collections.BinaryTree.ITreeTableCounter,Syncfusion.Collections.BinaryTree.ITreeTableCounter,System.Int32)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.Counter.Compare(Syncfusion.Collections.BinaryTree.TreeTableVisibleCounter,System.Int32)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.Counter.IsEmpty(System.Int32)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.Counter.ToString">
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.Counter.Kind">
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.CounterWithKind.Kind">
            <override/>
        </member>
        <member name="T:Syncfusion.Grouping.Internals.ElementTreeTableEntry">
            <summary>
            An entry within a tree buffer for an <see cref="P:Syncfusion.Grouping.Internals.ElementTreeTableEntry.Element"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.ElementTreeTableEntry.GetSortKey">
            <summary>
            By default, elements do not get sorted.
            </summary>
            <returns>returns null</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.ElementTreeTableEntry.InvalidateCounterBottomUp(System.Boolean)">
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.ElementTreeTableEntry.ElementTreeTable">
            <summary>
            The tree this entry belongs to.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.ElementTreeTable.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.ElementTreeTable.Insert(System.Int32,Syncfusion.Grouping.Internals.ElementTreeTableEntry)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="value">The element to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.ElementTreeTable.Remove(Syncfusion.Grouping.Internals.ElementTreeTableEntry)">
            <summary>
            Removes the specified element from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.ElementTreeTable.Contains(Syncfusion.Grouping.Internals.ElementTreeTableEntry)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.ElementTreeTable.IndexOf(Syncfusion.Grouping.Internals.ElementTreeTableEntry)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.ElementTreeTable.Add(Syncfusion.Grouping.Internals.ElementTreeTableEntry)">
            <summary>
            Adds a value to the end of the collection.
            </summary>
            <param name="value">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.ElementTreeTable.CopyTo(Syncfusion.Grouping.Internals.ElementTreeTableEntry[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.ElementTreeTable.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove. </param>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.ElementTreeTable.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.ElementTreeTable.Item(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.ElementTreeTable.IsReadOnly">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.ElementTreeTable.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.ElementTreeTable.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.ElementTreeTable.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.Internals.ElementTreeTableEnumerator">
            <summary>
            Strongly typed enumerator for the ElementTreeTable.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.Internals.VirtualElementTreeTableEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.Internals.ElementTreeTableEntry"/> elements of a <see cref="T:Syncfusion.Grouping.Internals.ElementTreeTable"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.VirtualElementTreeTableEnumerator.#ctor(Syncfusion.Grouping.Internals.ElementTreeTable)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.VirtualElementTreeTableEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.VirtualElementTreeTableEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.VirtualElementTreeTableEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.GroupCategoryTreeTableEntry.GetSortKey">
            <returns>returns Sort key</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.GroupCategoryTreeTable.WithoutCounter">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.GroupSortOrderTreeTableEntry.GetSortKey">
            <returns>returns Element</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.NestedTablesTreeTableEntry.GetSortKey">
            <summary>
            NestedTable doesn't get sorted.
            </summary>
            <returns>returns null</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.PrimaryKeySortedRecordsTreeEntry.GetSortKey">
            <summary>
            Returns the sort key of this leaf.
            </summary>
            <returns>returns the sort key</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.PrimaryKeySortedRecordsTree.Dispose">
            <summary>
            Disposes of the object.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.PrimaryKeySortedRecordsTree.Insert(System.Int32,Syncfusion.Grouping.Internals.PrimaryKeySortedRecordsTreeEntry)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="value">The element to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.PrimaryKeySortedRecordsTree.Remove(Syncfusion.Grouping.Internals.PrimaryKeySortedRecordsTreeEntry)">
            <summary>
            Removes the specified element from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.PrimaryKeySortedRecordsTree.Contains(Syncfusion.Grouping.Internals.PrimaryKeySortedRecordsTreeEntry)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.PrimaryKeySortedRecordsTree.IndexOf(Syncfusion.Grouping.Internals.PrimaryKeySortedRecordsTreeEntry)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.PrimaryKeySortedRecordsTree.Add(Syncfusion.Grouping.Internals.PrimaryKeySortedRecordsTreeEntry)">
            <summary>
            Adds a value to the end of the collection.
            </summary>
            <param name="value">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.PrimaryKeySortedRecordsTree.CopyTo(Syncfusion.Grouping.Internals.PrimaryKeySortedRecordsTreeEntry[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.PrimaryKeySortedRecordsTree.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove. </param>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.PrimaryKeySortedRecordsTree.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.PrimaryKeySortedRecordsTree.Item(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.PrimaryKeySortedRecordsTree.IsReadOnly">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.PrimaryKeySortedRecordsTree.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.PrimaryKeySortedRecordsTree.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.PrimaryKeySortedRecordsTree.Count">
            <summary>
            Gets the number of elements contained in the collection. 
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.RecordPartsTreeTableEntry.GetSortKey">
            <summary>
            By default, elements do not get sorted.
            </summary>
            <returns>returns null</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.RowElementsTreeTableEntry.GetSortKey">
            <summary>
            RowElement doesn't get sorted.
            </summary>
            <returns>returns null</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.SectionsTreeTableEntry.GetSortKey">
            <summary>
            By default, elements do not get sorted.
            </summary>
            <returns>returns null.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.SortedRecordsTreeTableEntry.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.SortedRecordsTreeTableEntry.GetCounterPosition">
            <summary>
            The cumulative position of this node.
            </summary>
            <returns>returns cumulative position</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.SortedRecordsTreeTableEntry.GetSortKey">
            <summary>
            By default, elements do not get sorted.
            </summary>
            <returns>returns the Element</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.UnsortedRecordsTreeEntry.GetSortKey">
            <summary>
            Returns the sort key of this leaf.
            </summary>
            <returns>returns null</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.UnsortedRecordsTree.Dispose">
            <summary>
            Disposes of the object.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.UnsortedRecordsTree.Insert(System.Int32,Syncfusion.Grouping.Internals.UnsortedRecordsTreeEntry)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="value">The element to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.UnsortedRecordsTree.Remove(Syncfusion.Grouping.Internals.UnsortedRecordsTreeEntry)">
            <summary>
            Removes the specified element from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.UnsortedRecordsTree.Contains(Syncfusion.Grouping.Internals.UnsortedRecordsTreeEntry)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.UnsortedRecordsTree.IndexOf(Syncfusion.Grouping.Internals.UnsortedRecordsTreeEntry)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.UnsortedRecordsTree.Add(Syncfusion.Grouping.Internals.UnsortedRecordsTreeEntry)">
            <summary>
            Adds a value to the end of the collection.
            </summary>
            <param name="value">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.UnsortedRecordsTree.CopyTo(Syncfusion.Grouping.Internals.UnsortedRecordsTreeEntry[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the  ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.UnsortedRecordsTree.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove. </param>
        </member>
        <member name="M:Syncfusion.Grouping.Internals.UnsortedRecordsTree.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.UnsortedRecordsTree.Item(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.UnsortedRecordsTree.IsReadOnly">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.UnsortedRecordsTree.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.UnsortedRecordsTree.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Internals.UnsortedRecordsTree.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.AddNewRecordSection">
            <summary>
            The section with the AddNewRecord:
            </summary>
            <remarks>
            This is the section within a group which provides the AddNewRecord that is shown above the
            table records and / or below the records for each group and implements logic to add new records.
            See the AddNewRecord class for more information.<para/>
            <para/>
            The AddNewRecordSection is a RecordsDetails section and thus also a container element. Normally,
             a RecordsDetails section has a collection of one or multiple records but with a
             AddNewRecordSection you only have exactly one child record, the AddNewRecord.<para/>
            <para/>
            If AddNewRecord(s) should be displayed at end of each group, then AddNewRecordSection(s) are
            created when the grouping for a table is initialized. The grouping engine loops through all
            sorted records and categorizes them. For each new group the virtual TableDescriptor.CreateGroup
            factory method is called. The TableDescriptor.CreateGroup method instantiates an AddNewRecordSection
            by calling the virtual TableDescriptor.CreateAddNewRecordSection factory method. <para/>
            <para/>
            One AddNewRecord is displayed at the top of the table below the column headers. It belongs
            to the AddNewRecordSection of the TopLevelGroup of a table. The TopLevelGroup is created
            with the virtual TableDescriptor.CreateGroup factory method. The TableDescriptor.CreateGroup
            method instantiates an AddNewRecordSection by calling the virtual
            TableDescriptor.CreateAddNewRecordSection factory method.<para/>
            <para/>
            Because the AddNewRecordSection is a container element and not a display element, it will not
            be an item returned by the Table.DisplayElements and Table.GroupedElements collection. Instead,
            AddNewRecordSection can be accessed only through the Group.Sections collection of its parent
            Group.<para/>
            <para/>
            See also:<para/>
            TableDescriptor.CreateGroup, TableDescriptor.CreateAddNewRecordSection, Table.TopLevelGroup,
            AddNewRecord, IContainerElement, Group.Sections.
            </remarks>
        </member>
        <member name="T:Syncfusion.Grouping.RecordsDetails">
            <summary>
            The details section of a group with records.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.DetailsSection">
            <summary>
            The section base class for the <see cref="T:Syncfusion.Grouping.RecordsInDetailsCollection"/> or <see cref="T:Syncfusion.Grouping.GroupsInDetailsCollection"/>. Instances of this
            class are accessed through the <see cref="P:Syncfusion.Grouping.Group.Details"/> property of a parent <see cref="T:Syncfusion.Grouping.Group"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.Section">
            <summary>
            An abstract base class for sections in a group. A group has
            multiple sections such as CaptionSection, SummarySection, GroupsDetailsSection,
            and RecordsDetailsSection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.Element">
            <summary>
            The base class for all elements in the grouping engine that represent the grouped
            structure of an underlying datasource.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetRowIndex">
            <exclude/>
            <summary>
            Returns row index of the element.
            </summary>
            <returns>Row index.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.SupportsId">
            <summary>
            Gets if this object can be uniquely identified with the <see cref="P:Syncfusion.Grouping.Element.Id"/>
            property. Internal caches use this id to look up objects.
            </summary>
            <returns>True if <see cref="P:Syncfusion.Grouping.Element.Id"/> property returns a unique identifier.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.#ctor">
            <summary>
            Initializes a new empty element.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Element.#ctor(Syncfusion.Grouping.Element)">
            <summary>
            Initializes a new empty element that belongs to the specified parent.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Element.Dispose">
            <overload>
            Disposes the object.
            </overload>
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Element.OnDisposed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Element.Disposed"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Element.Dispose(System.Boolean)">
            <summary>
            Called to clean up state of this object when it is disposed.
            </summary>
            <param name="disposing">True if called from <see cref="M:Syncfusion.Grouping.Element.Dispose(System.Boolean)"/>; False if called from Finalizer.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object)">
            <summary>
            Ensures the object and nested objects reflect any changes made to the engine or table descriptor. This is
            an integral part of the engine's "on-demand execution" of schema changes. Before elements
            in the engine are accessed, they call <see cref="M:Syncfusion.Grouping.Element.OnEnsureInitialized(System.Object)"/>. If changes were
            previously made that affect the queried element, all changes will be appllied at this time.
            </summary>
            <param name="sender">The object that triggered the call.</param>
            <returns>True if changes were detected and the object was updated; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)">
            <summary>
            Ensures the object, nested objects, and parent elements reflect any changes made to the engine or table descriptor. This is
            an integral part of the engine's "on-demand execution" of schema changes. Before elements
            in the engine are accessed, they call <see cref="M:Syncfusion.Grouping.Element.OnEnsureInitialized(System.Object)"/>. If changes were
            previously made that affect the queried element, all changes will be applied at this time.
            </summary>
            <param name="sender">The object that triggered the call.</param>
            <param name="notifyParent">Specifes if the parent elements <see cref="M:Syncfusion.Grouping.Element.OnEnsureInitialized(System.Object)"/>
            should also be called.</param>
            <returns>True if changes were detected and the object was updated; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.OnEnsureInitialized(System.Object)">
            <summary>
            This virtual method is called from <see cref="M:Syncfusion.Grouping.Element.OnEnsureInitialized(System.Object)"/> and
            lets derived elements implement element-specific logic to ensure object
            is up to data.
            </summary>
            <param name="sender">The object that triggered the <see cref="M:Syncfusion.Grouping.Element.OnEnsureInitialized(System.Object)"/> call.</param>
            <returns>True if changes were detected and the object was updated; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetCounter">
            <summary>For internal use.</summary>
            <returns>Returns ITreeTableCounter</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Element.InvalidateCounterTopDown(System.Boolean)">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Element.InvalidateCounterBottomUp">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Element.InvalidateCounter">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Element.OnElementTreeInvalidateCounterBottomUp">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetSummaries(Syncfusion.Grouping.Table)">
            <overload>
            Gets summary information for this element and child elements. The summaries
            are in the same order as the <see cref="P:Syncfusion.Grouping.TableDescriptor.Summaries"/> of the
            parent table descriptor.
            </overload>
            <summary>
            Gets summary information for this element and child elements. The summaries
            are in the same order as the <see cref="P:Syncfusion.Grouping.TableDescriptor.Summaries"/> of the
            parent table descriptor.
            </summary>
            <param name="parentTable">A reference to the parent table of this element.</param>
            <returns>An array of <see cref="T:Syncfusion.Collections.BinaryTree.ITreeTableSummary"/> objects.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetSummaries(Syncfusion.Grouping.Table,System.Boolean@)">
            <summary>
            Gets summary information for this element and child elements. The summaries
            are in the same order as the <see cref="P:Syncfusion.Grouping.TableDescriptor.Summaries"/> of the
            parent table descriptor.
            </summary>
            <param name="parentTable">A reference to the parent table of this element.</param>
            <param name="summaryChanged">Returns True if changes were detected.</param>
            <returns>An array of <see cref="T:Syncfusion.Collections.BinaryTree.ITreeTableSummary"/> objects.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.InvalidateSummariesTopDown">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Element.InvalidateSummary">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Element.InvalidateSummariesBottomUp">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetVisibleCount">
            <summary>
            Gets the number of visible elements in this group. Do not check parent's visible state when doing returning FilterCount in display elements.
            Only container elements behave different. They will ignore values returned form CounterTreeTable.
            </summary>
            <returns>Number of visible elements.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetElementCount">
            <summary>
            Gets the number of visible elements in this group.
            </summary>
            <returns>Element count.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetFilteredRecordCount">
            <summary>
            Gets the number of visible records (excluding records that do not meet filter criteria).
            </summary>
            <returns>Filtered record count.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetRecordCount">
            <summary>
            Gets the number of visible elements (0 for captions, groups etc. 1 for records).
            </summary>
            <returns>Record count.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetYAmountCount">
            <summary>
            Gets the height (e.g. screen pixels) for the element.
            </summary>
            <returns>Element height.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetCustomCount">
            <summary>
            Gets custom count for the element.
            </summary>
            <returns>returns 0.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetVisibleCustomCount">
            <summary>
            Gets custom count for visible elements.
            </summary>
            <returns>returns 0.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.IsChildVisible(Syncfusion.Grouping.Element)">
            <summary>
            Determines if the specified element is a direct child element of this element
            and if it should appear in visible display elements collection.
            </summary>
            <param name="el">The child element to be analyzed.</param>
            <returns>True if element is visible; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetVisibleInParent">
            <summary>
            Determines if this element is visible in the parent element it belongs to as returned
            by <see cref="M:Syncfusion.Grouping.Element.IsChildVisible(Syncfusion.Grouping.Element)"/> of the parent element.
            </summary>
            <returns>True if element is visible; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetVisibleInHierarchy">
            <summary>
            Determines if this element is visible (see <see cref="M:Syncfusion.Grouping.Element.IsChildVisible(Syncfusion.Grouping.Element)"/>) and if all
            of its parents are also visible. If this element belongs to a parent group that
            has been collapsed, it will return False.
            </summary>
            <returns>True if this element and all its parent elements are visible; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.ToString">
            <summary>Returns a string holding the element.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetChildCount">
            <summary>
            Gets the number of direct child elements that belong to this element's collection or 0 if this is not a container element. Good
            for determining the number of items to be displayed in a group's "(#) Items" caption.
            </summary>
            <returns>Number of childs.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetElementEntry">
            <summary>
            The ElementTreeTableEntry this element is associated with (either SectionsTreeTableEntry or SortedRecordsTreeTableEntry).
            <returns>returns ElementTreeTableEntry</returns>
            </summary>
            <returns>returns ElementTreeTableEntry</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetCustomPosition">
            <summary>
            Gets the position for the "Custom Counter" of this element. See the "Grid.Grouping\Samples\CustomSummaries"
            sample for example usage of custom counters.
            </summary>
            <returns>The custom counter position for this element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetVisibleCustomPosition">
            <summary>
            Gets the position for the "Visible Custom Counter" of this element. See the "Grid.Grouping\Samples\CustomSummaries"
            sample for example usage of custom counters.
            </summary>
            <returns>The visible custom counter position for this element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetData">
            <summary>
            If the element is a record, GetData returns a reference to the underlying data for the record, e.g. the DataRowView
            of a DataView.
            </summary>
            <returns>A reference to the underlying data for the record.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.OnBeginEditCalled">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.BeginEdit"/> is called.
            </summary>
            <returns>True if <see cref="M:Syncfusion.Grouping.CurrentRecordManager.BeginEdit"/> can proceed; False if it should abort.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.OnBeginEditComplete(System.Boolean)">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.BeginEdit"/> successfully finishes.
            </summary>
            <param name="success">True, if it is successfully finished; False, otherwise.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Element.OnEndEditCalled">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EndEdit"/> is called.
            </summary>
            <returns>True if <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EndEdit"/> can proceed; False if it should abort.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.OnEndEditComplete(System.Boolean)">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EndEdit"/> successfully finishes.
            </summary>
            <param name="success">True, if it is successfully finished; False, otherwise.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Element.OnCancelEditCalled">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.CancelEdit"/> is called.
            </summary>
            <returns>True if <see cref="M:Syncfusion.Grouping.CurrentRecordManager.CancelEdit"/> can proceed; False if it should abort.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.OnCancelEditComplete(System.Boolean)">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.CancelEdit"/> successfully finishes.
            </summary>
            <param name="success">True, if it is successfully finished; False, otherwise.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Element.OnLeaveRecordCalled">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.LeaveRecord(System.Boolean)"/> is called.
            </summary>
            <returns>True if <see cref="M:Syncfusion.Grouping.CurrentRecordManager.LeaveRecord(System.Boolean)"/> can proceed; False if it should abort.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.OnLeaveRecordComplete(System.Boolean)">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.LeaveRecord(System.Boolean)"/> successfully finishes.
            </summary>
            <param name="success">True, if it is successfully finished; False, otherwise.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Element.OnEnterRecordCalled">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EnterRecord(Syncfusion.Grouping.Element)"/> is called.
            </summary>
            <returns>True if <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EnterRecord(Syncfusion.Grouping.Element)"/> can proceed; False if it should abort.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.OnEnterRecordComplete(System.Boolean)">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EnterRecord(Syncfusion.Grouping.Element)"/> successfully finishes.
            </summary>
            <param name="success">True, if it is successfully finished; False, otherwise.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Element.IsCaption(Syncfusion.Grouping.Element)">
            <summary>
            Checks if this is a caption element
            </summary>
            <returns>True if this is a caption; False, otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.IsRecord(Syncfusion.Grouping.Element)">
            <summary>
            Checks if this is a record element
            </summary>
            <returns>True if this is a record; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.IsColumnHeader(Syncfusion.Grouping.Element)">
            <summary>
            Checks if this is a column header element
            </summary>
            <returns>True if this is a column header; False, otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.IsFilterBar(Syncfusion.Grouping.Element)">
            <summary>
            Checks if this is a filterbar element
            </summary>
            <returns>True if this is a filter bar; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.IsCaption">
            <summary>
            Checks if this is a caption element
            </summary>
            <returns>True if this is a caption; False, otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.IsRecord">
            <summary>
            Checks if this is a record element
            </summary>
            <returns>True if this is a record; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.IsColumnHeader">
            <summary>
            Checks if this is a column header element
            </summary>
            <returns>True if this is a column header; False, otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.IsFilterBar">
            <summary>
            Checks if this is a filterbar element
            </summary>
            <returns>True if this is a filter bar; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetCaptionSection(Syncfusion.Grouping.Element)">
            <summary>
            Gets the CaptionSection this element belongs to or the element itsself if it is a CaptionSection.
            </summary>
            <returns>Caption section.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetRecord(Syncfusion.Grouping.Element)">
            <summary>
            Gets the Record this element belongs to or the element itsself if it is a Record.
            </summary>
            <returns>returns Record.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetColumnHeaderSection(Syncfusion.Grouping.Element)">
            <summary>
            Gets the ColumnHeaderSection this element belongs to or the element itsself if it is a ColumnHeaderSection.
            </summary>
            <returns>Column header section.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetFilterBar(Syncfusion.Grouping.Element)">
            <summary>
            Gets the FilterBarSection this element belongs to or the element itsself if it is a FilterBarSection.
            </summary>      
            <returns>returns FilterBarSection</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetCaptionSection">
            <summary>
            Gets the CaptionSection this element belongs to or the element itsself if it is a CaptionSection.
            </summary>
            <returns>Caption section.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetRecord">
            <summary>
            Gets the Record this element belongs to or the element itsself if it is a Record.
            </summary>
            <returns>returns Record.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetColumnHeaderSection">
            <summary>
            Gets the ColumnHeaderSection this element belongs to or the element itsself if it is a ColumnHeaderSection.
            </summary>
            <returns>Column header section.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Element.GetFilterBar">
            <summary>
            Gets the FilterBarSection this element belongs to or the element itsself if it is a FilterBarSection.
            </summary>
            <returns>returns FilterBarSection</returns>
        </member>
        <member name="P:Syncfusion.Grouping.Element.Engine">
            <summary>
            The <see cref="P:Syncfusion.Grouping.Element.Engine"/> this element belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Element.EngineTable">
            <summary>
            A reference to the main <see cref="P:Syncfusion.Grouping.Engine.Table"/> of the <see cref="P:Syncfusion.Grouping.Element.Engine"/>
            this element belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Element.ParentTable">
            <summary>
            Gets a reference to the parent <see cref="T:Syncfusion.Grouping.Table"/> this element belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Element.TableLevel">
            <summary>
            Returns the table hierarchy level of this element. It is -1 for
            the root element. 0 for elements belonging to the main table and
            greater than 0 for elements that belong to nested table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Element.Id">
            <summary>
            Internal caches use this id to look up objects.
            </summary>
            <returns>A unique integer <see cref="P:Syncfusion.Grouping.Element.Id"/>.</returns>
        </member>
        <member name="P:Syncfusion.Grouping.Element.Reserved1">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.Element.Reserved2">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.Element.Reserved3">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.Element.Reserved4">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.Element.Reserved5">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.Element.Reserved6">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.Element.Reserved7">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.Element.Reserved8">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.Element.Reserved9">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.Element.Reserved10">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.Element.Reserved11">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.Element.Reserved16a">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.Element.Reserved16b">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.Element.Reserved16c">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.Element.Info">
            <summary>
            Gets debug text information about the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Element.Kind">
            <summary>
            The kind of element.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Element.Disposing">
            <summary>
            Returns True if object is executing a <see cref="M:Syncfusion.Grouping.Element.Dispose(System.Boolean)"/> method call.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Element.IsDisposed">
            <summary>
            Gets if object has been disposed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Element.InDisposed">
            <summary>
            Returns after object was disposed and object is executing a <see cref="E:Syncfusion.Grouping.Element.Disposed"/> event.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Element.Disposed">
            <summary>
            Occurs after the object is disposed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Element.ParentTableDescriptor">
            <summary>
            Returns the TableDescriptor the element belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Element.ParentElement">
            <summary>
            Returns the parent this element belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Element.ParentDisplayElement">
            <summary>
            Returns the parent this element belongs to. If this element is a <see cref="T:Syncfusion.Grouping.ChildTable"/>,
            the <see cref="T:Syncfusion.Grouping.NestedTable"/> that links the parent table with the child table is returned.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Element.ParentGroup">
            <summary>
            A reference to the parent <see cref="T:Syncfusion.Grouping.Group"/> this element belongs to. If the element is
            a toplevel group, then NULL is returned.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Element.ParentRecord">
            <summary>
            A reference to the parent <see cref="T:Syncfusion.Grouping.Record"/> this element belongs to. If the element
            is not a child of a record (e.g. a group), then NULL is returned.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Element.ParentChildTable">
            <summary>
            A reference to the child table this element belongs. A ChildTable is either a TopLevelGroup or a group that can be referenced
            as a nested table from a record in a parent table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Element.ParentSection">
            <summary>
            A reference to the parent <see cref="T:Syncfusion.Grouping.Section"/> this element belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Element.GroupLevel">
            <summary>
            Returns the level for a nested group.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Element.ChildTableGroupLevel">
            <summary>
            Returns the level for a nested child table.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Section.#ctor(Syncfusion.Grouping.Group)">
            <summary>
            Initializes a new section in the specified group.
            </summary>
            <param name="parent">The group this section is created in.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Section.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Section.GetElementEntry">
            <summary>
            The ElementTreeTableEntry this element is associated with (either SectionsTreeTableEntry or SortedRecordsTreeTableEntry).
            <returns>returns ElementTreeTableEntry</returns>
            </summary>
            <returns>returns ElementTreeTableEntry</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Section.InvalidateSummariesBottomUp">
            <summary>Walks up to the parent branches and resets the summaries.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Section.GetCounter">
            <summary>Creates a counter for the current element.</summary>
            <returns>A counter for the current element.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.Section.ParentElement">
            <summary>
            Gets / sets the group this elements belongs to.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.DetailsSection.#ctor(Syncfusion.Grouping.Group)">
            <summary>
            Initializes a new section in the specified group.
            </summary>
            <param name="parent">The group this section is created in.</param>
        </member>
        <member name="M:Syncfusion.Grouping.DetailsSection.InvalidateCounter">
            <summary>Resets the counter.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.DetailsSection.InvalidateCounterTopDown(System.Boolean)">
            <summary>Resets the counter for all the elements.</summary>
            <param name="notifyCounterSource">Indicates whether to notify the counter source.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.DetailsSection.InvalidateSummariesTopDown">
            <summary>Resets the summaries for all the elements.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.DetailsSection.InvalidateSummary">
            <summary>Resets the summary.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.DetailsSection.GetVisibleCount">
            <summary>Returns number of visible elements.</summary>
            <returns>Number of visible elements.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.DetailsSection.GetVisibleCustomCount">
            <summary>Returns custom count for visible elements.</summary>
            <returns>Visible custom count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.DetailsSection.GetCustomCount">
            <summary>Gets custom count for the element.</summary>
            <returns>Custom count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.DetailsSection.GetYAmountCount">
            <summary>Returns element height.</summary>
            <returns>Element height.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.DetailsSection.GetElementCount">
            <summary>Returns element count.</summary>
            <returns>Element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.DetailsSection.GetFilteredRecordCount">
            <summary>Returns filtered record count.</summary>
            <returns>Filtered record count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.DetailsSection.GetRecordCount">
            <summary>Returns number of records.</summary>
            <returns>Record count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.DetailsSection.ToString">
            <summary>Returns string representation of DetailsSection.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.DetailsSection.ParentTable">
            <summary>
            Gets the parent table this section belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DetailsSection.HasRecords">
            <summary>
            Determines if this section contains records or groups.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsDetails.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsDetails.#ctor(Syncfusion.Grouping.Group)">
            <summary>
            Initializes a new section in the specified group.
            </summary>
            <param name="parent">The group this section is created in.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsDetails.CompareSortedColumns">
            <summary>
            Determines whether the TableDescriptor.SortedColumns collection was
            modified since the group was sorted.
            </summary>
            <returns>True if sorted columns are modified; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsDetails.UpdateSortedColumns">
            <summary>
            Determines whether the TableDescriptor.SortedColumns collection was
            modified since the group was sorted and if this is the case the records
            in the group will be resorted.
            </summary>
            <returns>true if records needed sorting; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordsDetails.OnEnsureInitialized(System.Object)">
            <summary>
            This virtual method is called from <see cref="M:Syncfusion.Grouping.RecordsDetails.OnEnsureInitialized(System.Object)"/> and
            lets derived elements implement element-specific logic to ensure object
            is up to data.
            </summary>
            <param name="sender">The object that triggered the <see cref="M:Syncfusion.Grouping.RecordsDetails.OnEnsureInitialized(System.Object)"/> call.</param>
            <returns>
            True if changes were detected and the object was updated; False otherwise.
            </returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.RecordsDetails.RecordTreeEntries">
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.RecordsDetails.Records">
            <summary>
            Returns the collection of all records in this group. Records that do not meet
            filter criteria are included.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordsDetails.FilteredRecords">
            <summary>
            Returns the collection of records in this group that meet
            filter criteria.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.AddNewRecordSection.#ctor(Syncfusion.Grouping.Group)">
            <summary>
            Initializes a new section in the specified group.
            </summary>
            <param name="parent">The group this section is created in.</param>
        </member>
        <member name="M:Syncfusion.Grouping.AddNewRecordSection.ToString">
            <summary>Returns string representation of AddNewRecord.</summary>
            <returns>A string holding the current object.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.AddNewRecordSection.IsBeforeDetails">
            <summary>
            Gets or sets a value indicating whether this is the AddNewRecord that is shown above the DetailsSection
            or below.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.AddNewRecordSection.AddNewRecord">
            <summary>
            Returns reference to AddNewRecord.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.AddNewRecord">
            <summary>
            A record element for adding new records to the underlying datasource.
            This element represents the empty record that is shown above the table records and / or below
            the records for each group and implements logic to add new records.
            </summary>
            <remarks>
            This element represents the empty record that is shown above the table records and / or below
            the records for each group and implements logic to add new records. <para/>
            <para/>
            The class is derived from Record. It adds special behavior such that the AddNewRecord is
            not bound to a record in the underlying table. Instead all fields are initially empty (
            or default values based on parent group by criteria). When changes are made, the changes
            will be committed to the underlying table by adding a new record at the end of the
            underlying data source. The grouping engine will automatically insert the record into
            its sorted records collection and insert it into the group it belongs to. If no group
            is found where the record fits in, a new group will be created on the fly.<para/>
            <para/>
            AddNewRecord(s) can be optionally displayed at the start of table below the column headers
            and / or at the end of each group. <para/>
            <para/>
            AddNewRecord belongs to an AddNewRecordSection and is its only element.<para/>
            <para/>
            If AddNewRecord(s) should be displayed at end of each group (see also Engine.ShowAddNewRecordInGroups),
             then AddNewRecordSection(s) are created when the grouping for a table is initialized.
             The grouping engine loops through all sorted records and categorizes them. For each new
             group, the virtual TableDescriptor.CreateGroup factory method is called. The TableDescriptor.CreateGroup
             method instantiates an AddNewRecordSection by calling the virtual TableDescriptor.CreateAddNewRecordSection
             factory method. <para/>
            <para/>
            One AddNewRecord is displayed at the top of the table below the column headers. It belongs to
            the AddNewRecordSection of the TopLevelGroup of a table. The TopLevelGroup is created with the
            virtual TableDescriptor.CreateGroup factory method. The TableDescriptor.CreateGroup method
            instantiates an AddNewRecordSection by calling the virtual TableDescriptor.CreateAddNewRecordSection
            factory method. <para/>
            <para/>
            AddNewRecord is a container element. It contains one or multiple RecordParts. <para/>
            <para/>
            Because the AddNewRecord is a container element and not a display element, it will not be an
            item returned by the Table.DisplayElements and Table.GroupedElements collection. Instead,
            AddNewRecord is only returned by the RecordsDetails.Records collection of its parent
            AddNewRecordSection (or the Group.Records collection of its ParentGroup which is a shortcut
            instead of accessing it through AddNewRecordSection). <para/>
            <para/>
            See also the Engine.RecordAsDisplayElements how to make AddNewRecord be treated as a display
            element if you have no need for nested elements within a record., e.g. if you only want to
            display a single table and you do not need multiple row elements per record and / or nested tables.
             (However, do not change this setting if you intend to use the engine as grid data model.)<para/>
            <para/>
            The first record part is a RecordRowsPart. A RecordRowsPart contains one or multiple RecordRows
            displayed in a grid for the record. <para/>
            <para/>
            The second record part represents nested tables. If relations have been defined for the table
            (see TableDescriptor.Relations) and the the current table has a foreign key relationship setup
            to other tables, a table is added to the RecordPart[1].NestedTables collection for each relation.
            You can access nested tables in a record with the Record.NestedTables collection.<para/>
            <para/>
            AddNewRecord can be set as the current record in a table if you want to edit its data through
            the engine.<para/>
            <para/>
            The first time a value is changed by the grid, Record.BeginEdit is called before the value is assigned.
            When the user moves the current cell in the grid to a new record, the changes are committed with a
            Record.EndEdit call. If the user presses Escape, the changes are rolled back with a Record.CancelEdit
            call. If the user presses Enter, the changes are committed and the record's new display position is
            determined and the current cell is moved to the new display position of the record. If validation
            fails during EndEdit, the grid will try to identify the column which violated the record constraints
            and display a red error indicator for that column with a ToolTip text showing the exception text
            when the user hovers the mouse over the red arrow indicator. <para/>
            <para/>
            See the CurrentRecordManager class for a description of events raised when modifying columns in the
            AddNewRecord row or when BeginEdit, CancelEdit or EndEdit was called.<para/>
            <para/>
            See also: CurrentRecordManager, CurrentRecordManager.IsAddNewRecord, CurrentRecordManager.NavigateTo,
            Group.AddNewRecord, Table.AddNewRecord, TableDescriptor.CreateGroup, Table.TopLevelGroup,
            AddNewRecordSection, IContainerElement, RecordsDetails.Records, Group.Records
            </remarks>
            <example>The following example shows how you can add record and keep track of its sorted
            display position within the table:
            <code lang="C#">
                        // Add a record to Table table2.
                        Record r = table2.AddNewRecord;
                        r.SetCurrent();   // Makes it the current record, saving any pending changes previous current record.
                        if (r.IsCurrent)
                        {
                            r.BeginEdit();
                            if (r.IsEditing)
                            {
                                r.SetValue("Country", "USA");
                                r.SetValue("Region", "NC");
                                r.SetValue("CustomerID", "SYNC
                                r.SetValue("CompanyName", "Syncfusion");
                                r.EndEdit();
                            }
                        }
            <para/>
                        int displayPos = table.DisplayElements.IndexOf(r);
                        // Now, you can navigate the current cell of a grid to row displayPos and highlight the newly added row
                        // within its correct group category and sort order.
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Grouping.Record">
            <summary>
            Represents a record with data. Each record in the datasource has an associated <see cref="T:Syncfusion.Grouping.Record"/> object
            in the engine. Records are created when the datasource is assigned to a table and before it is sorted or filtered.
            When a new record is inserted in the datasource, a <see cref="T:Syncfusion.Grouping.Record"/> is created. When the grouping or sorting
            of a <see cref="T:Syncfusion.Grouping.Table"/> changes, all <see cref="T:Syncfusion.Grouping.Record"/> elements stay in sync with their underlying record-counterparts
            in the datasource.
            <para/>
            By default, a record will not appear in the <see cref="P:Syncfusion.Grouping.Table.DisplayElements"/>. Instead, a record serves as a container
            of multiple row elements and nested tables.
            </summary>
            <remarks>
            There are multiple ways to get access to a specific record. <para/>
            <list type="bullet">
            <item><term>
            The <see cref="P:Syncfusion.Grouping.Table.UnsortedRecords"/> collection of the <see cref="T:Syncfusion.Grouping.Table"/> class provides access to the records
            in the same order as they appear in the datasource. The <see cref="M:Syncfusion.Grouping.UnsortedRecordsCollection.IndexOf(Syncfusion.Grouping.Record)"/> method
            of an <see cref="T:Syncfusion.Grouping.UnsortedRecordsCollection"/> determines the index of any record in the underlying datasource.
            </term></item>
            <item><term>
            The <see cref="P:Syncfusion.Grouping.Table.Records"/> collection of the <see cref="T:Syncfusion.Grouping.Table"/> class provides access to the records
            in the order as they were sorted in the engine. The <see cref="M:Syncfusion.Grouping.RecordsInTableCollectionBase.IndexOf(Syncfusion.Grouping.Record)"/> method
            of a <see cref="T:Syncfusion.Grouping.RecordsInTableCollection"/> determines the index of any record in the Table.Records collection.
            </term></item>
            <item><term>
            The <see cref="P:Syncfusion.Grouping.Table.FilteredRecords"/> collection of the <see cref="T:Syncfusion.Grouping.Table"/> class provides access to records that
            meet filter criteria in the order they were sorted in the engine. The <see cref="M:Syncfusion.Grouping.RecordsInTableCollectionBase.IndexOf(Syncfusion.Grouping.Record)"/> method
            of a <see cref="T:Syncfusion.Grouping.RecordsInTableCollection"/> determines the index of any record in the Table.FilteredRecords collection.
            </term></item>
            <item><term>
            The <see cref="P:Syncfusion.Grouping.Group.Records"/> collection of the <see cref="T:Syncfusion.Grouping.Group"/> class provides access to the records
            in the order as they appear in the group. The <see cref="M:Syncfusion.Grouping.RecordsInDetailsCollection.IndexOf(System.String)"/> method
            of a <see cref="T:Syncfusion.Grouping.RecordsInDetailsCollection"/> determines the index of any record in the Group.Records collection.
            </term></item>
            <item><term>
            The <see cref="P:Syncfusion.Grouping.Group.FilteredRecords"/> collection of the <see cref="T:Syncfusion.Grouping.Group"/> class provides access to the records
            in the order as they appear in the group. The <see cref="M:Syncfusion.Grouping.FilteredRecordsInDetailsCollection.IndexOf(Syncfusion.Grouping.Record)"/> method
            of a <see cref="T:Syncfusion.Grouping.FilteredRecordsInDetailsCollection"/> determines the index of any record in the Group.FilteredRecords collection.
            </term></item>
            </list>
            <para/>
            Given a <see cref="T:Syncfusion.Grouping.RecordRow"/> or <see cref="T:Syncfusion.Grouping.NestedTable"/>, you can query its <see cref="P:Syncfusion.Grouping.Element.ParentRecord"/>
            property to determine which record these elements belong to.
            <para/>
            Since record elements always stay in sync with their underlying record-counterparts
            in the datasource, you can keep a bookmark (reference) to a record. For example, you can save a reference to a record,
            change the sort order of the table,and then later check Records.IndexOf to determine the new position where
            the record can be located after the sort.
            <para/>
            By default, a record will not appear in the <see cref="P:Syncfusion.Grouping.Table.DisplayElements"/>. Instead, a record serves as a container
            of multiple row elements and nested tables. One exception is if you specified <see cref="P:Syncfusion.Grouping.Engine.RecordAsDisplayElements"/>.
            You can set <see cref="P:Syncfusion.Grouping.Engine.RecordAsDisplayElements"/> to True if you do not want the engine to treat Record and ColumnHeaderSection
            elements as ContainerElements and instead have these elements be returned as a display element in the Table.DisplayElements collection.
            However, with a GridGroupingControl you must not change this property since a GridGroupingControl
            relies on the behavior that a record is not a display element but a container for rows
            and nested tables.
            <para/>
            The <see cref="M:Syncfusion.Grouping.Record.GetData"/> method will give return a reference to the original record with data in the datasource.
            <para/>
            A record can be navigated to a current record if you call its <see cref="M:Syncfusion.Grouping.Record.SetCurrent(System.String)"/> method.
            <para/>
            Individual field contents can be retrieved with the <see cref="M:Syncfusion.Grouping.Record.GetValue(Syncfusion.Grouping.SortColumnDescriptor)"/> method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.Record.SupportsId">
            <summary>Indicates whether this object can be uniquely identified by its Id.</summary>
            <returns>True if Id is supported.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.#ctor(Syncfusion.Grouping.Table)">
            <summary>
            Initializes a new record in the specified parent table.
            </summary>
            <param name="parentTable">The table this record belongs to.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Record.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetDisplayElementOffsetOfFirstNestedTable">
            <summary>
            Returns the relative row position where the first nested table is displayed.
            </summary>
            <returns>The relative row position where the first nested table is displayed (zero-based).</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetExpandedVisibleCount">
            <summary>
            Returns what the number of visible rows including rows in nested tables would be if the record is expanded.
            </summary>
            <returns>The number of visible rows including rows in nested tables if the record is expanded.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetCollapsedVisibleCount">
            <summary>
            Returns what the number of visible rows would be if the record is collapsed.
            </summary>
            <returns>The number of visible rows if the record is collapsed.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetNestedTablesVisibleCount">
            <summary>
            Returns what the number of visible rows in nested tables would be if the record is expanded.
            </summary>
            <returns>The number of visible rows in nested tables if the record is expanded.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetRecordRowsVisibleCount">
            <summary>
            Returns the number of visible record rows excluding nested tables.
            </summary>
            <returns>The number of visible record rows excluding nested tables.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetRecordPreviewRowsVisibleCount">
            <summary>
            Returns what the number of visible preview rows would be if the record is collapsed.
            </summary>
            <returns>The number of visible preview rows if the record is collapsed.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.ShouldCreateChildElementTreeTable">
            <summary>
            Shoulds the create child element tree table.
            </summary>
            <returns>returns boolean value</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.Delete">
            <summary>
            Deletes the record from the underlying data source.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Record.SetCurrent">
            <summary>
            Makes this record the current record in the parent table.
            </summary>
            <returns>True if record could be made current record; False if navigating to record failed.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.SetCurrent(System.String)">
            <summary>
            Makes this record the current record in the parent table.
            </summary>
            <returns>True if record could be made current record; False if navigating to record failed.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.BeginEdit">
            <summary>
            Makes this record the current record in the parent table and calls <see cref="M:Syncfusion.Grouping.CurrentRecordManager.BeginEdit"/>.
            </summary>
            <returns>True if record could be made current record and BeginEdit was successful; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.EndEdit">
            <summary>
            Saves pending changes to the datasource after <see cref="M:Syncfusion.Grouping.CurrentRecordManager.BeginEdit"/> was called.
            </summary>
            <returns>True if changes could be saved; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.EndEdit(Syncfusion.Grouping.Record@)">
            <summary>
            Saves pending changes to the datasource after <see cref="M:Syncfusion.Grouping.CurrentRecordManager.BeginEdit"/> was called.
            </summary>
            <param name="record">Returns the record that was changed. Normally this is a reference to the current record. But if the current
            record is an AddNewRecord, a new record will be added to the table and instead of returning the AddNewRecord, a reference
            to the newly created Record element is returned.</param>
            <returns>True if changes could be saved; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.CancelEdit">
            <summary>
            Discards pending changes after <see cref="M:Syncfusion.Grouping.CurrentRecordManager.BeginEdit"/> was called.
            </summary>
            <returns>True if changes could be discarded; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.SetValue(Syncfusion.Grouping.FieldDescriptor,System.Object)">
            <summary>
            Saves the value into the underlying datasource. If <see cref="M:Syncfusion.Grouping.Record.BeginEdit"/> was called, the value
            is saved as a pending change in the <see cref="T:Syncfusion.Grouping.CurrentRecordPropertyCollection"/>. If the field is
            an unbound field, a <see cref="E:Syncfusion.Grouping.TableDescriptor.SaveValue"/> event is raised.
            </summary>
            <param name="fieldDescriptor">The field to be saved.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetValue(Syncfusion.Grouping.SortColumnDescriptor)">
            <summary>
            Gets the value from the underlying datasource.
            </summary>
            <param name="cd">The field to be retrieved.</param>
            <returns>returns value from the underlying datasource.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetValue(Syncfusion.Grouping.FieldDescriptor)">
            <summary>
            Gets the value from the underlying datasource.
            </summary>
            <param name="fieldDescriptor">The field to be retrieved.</param>
            <returns>returns value from the underlying datasource.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.SetValue(System.String,System.Object)">
            <summary>
            Saves the value into the underlying datasource. If <see cref="M:Syncfusion.Grouping.Record.BeginEdit"/> was called, the value
            is saved as a pending change in the <see cref="T:Syncfusion.Grouping.CurrentRecordPropertyCollection"/>. If the field is
            an unbound field, a <see cref="E:Syncfusion.Grouping.TableDescriptor.SaveValue"/> event is raised.
            </summary>
            <param name="name">The field to be saved.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetValue(System.String)">
            <summary>
            Gets the value from the underlying datasource.
            </summary>
            <param name="name">The field to be retrieved.</param>
            <returns>returns value from the underlying datasource</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.InvalidateSummariesBottomUp">
            <summary>Resets the summaries for all the elements.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetSourceIndex">
            <summary>
            For internal use.
            </summary>
            <returns>returns source index</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.SetSourceIndex(System.Int32,System.Int32,System.Object)">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetUniformChildListSourceIndex">
            <summary>
            Returns the source index in the current child list if the record belongs
            to a UniformChildList relation. The index is zero-based for each ChildTable.
            </summary>
            <returns>The source index in the current child list.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.IsSelected">
            <summary>
            Determines if record is marked as selected.
            </summary>
            <returns>True if selected.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.SetSelected(System.Boolean)">
            <summary>
            Marks record as selected and adds it to the <see cref="T:Syncfusion.Grouping.SelectedRecordsCollection"/>.
            </summary>
            <param name="value">True if the record should be marked as selected.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Record.SetSelectedRecursive(System.Boolean)">
            <summary>
            Marks record and recursively all child records as selected and adds it to the <see cref="T:Syncfusion.Grouping.SelectedRecordsCollection"/>.
            </summary>
            <param name="value">True if the record should be marked as selected.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetData">
            <summary>Gets the record data.</summary>
            <returns>Record data.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.UpdateSortInfo(System.Boolean,Syncfusion.Grouping.SortColumnDescriptor[],System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Refreshed the SortKeys collection.
            </summary>
            <param name="isSorted">True if the list is sorted.</param>
            <param name="arrayOfColumnDescriptors">Array of column descriptors.</param>
            <param name="arrayOfPropertyDescriptor">array of property descriptors.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Record.UpdatePrimaryKeys(System.Boolean,Syncfusion.Grouping.SortColumnDescriptor[],System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Refreshed the PrimaryKeys collection.
            </summary>
            <param name="isSorted">True it the list is sorted.</param>
            <param name="arrayOfColumnDescriptors">Array of column descriptors.</param>
            <param name="arrayOfPropertyDescriptor">Array of property descriptors.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetElementEntry">
            <summary>
            The ElementTreeTableEntry this element is associated with (either SectionsTreeTableEntry or SortedRecordsTreeTableEntry).
            <returns>returns ElementTreeTableEntry</returns>
            </summary>
            <returns>returns ElementTreeTableEntry</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetSummaries(Syncfusion.Grouping.Table,System.Boolean@)">
            <summary>
            Gets summary information for this element and child elements. The summaries
            are in the same order as the <see cref="P:Syncfusion.Grouping.TableDescriptor.Summaries"/> of the
            parent table descriptor.
            </summary>
            <param name="parentTable">A reference to the parent table of this element.</param>
            <param name="summaryChanged">Returns True if changes were detected.</param>
            <returns>An array of <see cref="T:Syncfusion.Collections.BinaryTree.ITreeTableSummary"/> objects.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetNextRecord">
            <summary>
            Returns the next record in the Table.Records collection.
            </summary>
            <returns>Next record.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetPreviousRecord">
            <summary>
            Returns the previous record in the Table.Records collection.
            </summary>
            <returns>Previous record.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.DetachFromGroup">
            <summary>
            Detaches the record temporarily from the group and so that it can be reinserted
            at a new sort position with a call to AttachToGroup or ReinsertRecord.
            </summary>
            <returns>returns -1 value</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.AttachToGroup">
            <summary>
            Inserts the record into the same group at the correct sort position. 
            AttachToGroup inserts it into the same group the record used to belong to
            before it was detached. Call ReinsertRecord if the record should be 
            inserted into a different group.
            </summary>
            <returns>returns Index.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.ReinsertRecord">
            <summary>
            Determines the group the record belongs to and inserts it at the
            correct sort position. The record must have previously been
            detached from the engine with DetachRecord
            </summary>       
            <returns>returns Group</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetSavedMeetsFilterCriteria">
            <summary>
            For internal use.
            </summary>
            <returns>returns boolean value.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.MeetsFilterCriteria">
            <summary>
            Determines if the record meets filter criteria.
            </summary>
            <returns>True if the record meets filter criteria; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.InvalidateCounter">
            <summary>Resets the counter.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.OnElementTreeInvalidateCounterBottomUp">
            <summary>Called when the counters are reset.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetVisibleCount">
            <summary>
            Gets the number of visible elements in this group.
            </summary>
            <returns>Visible element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetCounter">
            <summary>Gets the counter.</summary>
            <returns>returns Counter.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetYAmountCount">
            <summary>
            Gets the height (e.g. screen pixels) for the element.
            </summary>
            <returns>Element height.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetCustomCount">
            <summary>Gets the custom count for the element.</summary>
            <returns>Custom count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetVisibleCustomCount">
            <summary>Gets the custom count for the visible elements.</summary>
            <returns>Visible custom count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.IsChildVisible(Syncfusion.Grouping.Element)">
            <summary>Determines if the child elements are visible.</summary>
            <param name="el">The Element.</param>
            <returns>True if the childs are visible.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.ShouldShowRecordPreviewRows">
            <summary>
            Called to determine if preview rows should be visible in <see cref="P:Syncfusion.Grouping.Table.DisplayElements"/>.
            </summary>
            <returns>True if preview rows should be visible in <see cref="P:Syncfusion.Grouping.Table.DisplayElements"/>; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.ShouldShowRecordRows">
            <summary>
            Called to determines if record rows should be visible in <see cref="P:Syncfusion.Grouping.Table.DisplayElements"/>.
            </summary>
            <returns>True if record rows should be visible in <see cref="P:Syncfusion.Grouping.Table.DisplayElements"/>; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.SetExpanded(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the record's expansion state and optionally invalidates counters and optionally raises <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanging"/>
            and <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanged"/> events.
            </summary>
            <param name="value">The new expansion state.</param>
            <param name="refreshCounters">True if counters should be invalidated; False otherwise.</param>
            <param name="raiseDisplayElementChangeEvents">True if <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanging"/>
            and <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanged"/> events should be raised; False otherwise.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetFilteredRecordCount">
            <summary>Gets the number of filtered records.</summary>
            <returns>Filtered record count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetRecordCount">
            <summary>Gets the number of records.</summary>
            <returns>Record count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.InvalidateCounterTopDown(System.Boolean)">
            <summary>Resets the counter for all elements.</summary>
            <param name="notifyCounterSource">Indicates whether to notify the counter source.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.InvalidateCounterBottomUp">
            <summary>Resets the counter for all elements.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.OnEnsureInitialized(System.Object)">
            <summary>
            This virtual method is called from <see cref="M:Syncfusion.Grouping.Record.OnEnsureInitialized(System.Object)"/> and
            lets derived elements implement element-specific logic to ensure object
            is up to data.
            </summary>
            <param name="sender">The object that triggered the <see cref="M:Syncfusion.Grouping.Record.OnEnsureInitialized(System.Object)"/> call.</param>
            <returns>
            True if changes were detected and the object was updated; False otherwise.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.InvalidateSummariesTopDown">
            <summary>Reset the summaries for all the elements.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.InvalidateSummary">
            <summary>Resets the summary.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.FieldsToString">
            <summary>
            Returns a concatenated string with fields and their values in the record.
            </summary>
            <returns>String with debug information.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.ToString">
            <summary>Returns a string holding the record data.</summary>
            <returns>String representation of the record object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.OnBeginEditCalled">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.BeginEdit"/> is called.
            </summary>
            <returns>True if <see cref="M:Syncfusion.Grouping.CurrentRecordManager.BeginEdit"/> can proceed; False if it should abort.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.OnBeginEditComplete(System.Boolean)">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.BeginEdit"/> successfully finishes.
            </summary>
            <param name="success">True, if it is successfully finished; False, otherwise.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.OnEndEditCalled">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EndEdit"/> is called.
            </summary>
            <returns>True if <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EndEdit"/> can proceed; False if it should abort.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.OnEndEditComplete(System.Boolean)">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EndEdit"/> successfully finishes.
            </summary>
            <param name="success">True, if it is successfully finished; False, otherwise.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.OnCancelEditCalled">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.CancelEdit"/> is called.
            </summary>
            <returns>True if <see cref="M:Syncfusion.Grouping.CurrentRecordManager.CancelEdit"/> can proceed; False if it should abort.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.OnCancelEditComplete(System.Boolean)">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.CancelEdit"/> successfully finishes.
            </summary>
            <param name="success">True, if it is successfully finished; False, otherwise.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.OnLeaveRecordCalled">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.LeaveRecord(System.Boolean)"/> is called.
            </summary>
            <returns>True if <see cref="M:Syncfusion.Grouping.CurrentRecordManager.LeaveRecord(System.Boolean)"/> can proceed; False if it should abort.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.OnLeaveRecordComplete(System.Boolean)">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.LeaveRecord(System.Boolean)"/> successfully finishes.
            </summary>
            <param name="success">True, if it is successfully finished; False, otherwise.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.OnEnterRecordCalled">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EnterRecord(Syncfusion.Grouping.Element)"/> is called.
            </summary>
            <returns>True if <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EnterRecord(Syncfusion.Grouping.Element)"/> can proceed; False if it should abort.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.OnEnterRecordComplete(System.Boolean)">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EnterRecord(Syncfusion.Grouping.Element)"/> successfully finishes.
            </summary>
            <param name="success">True, if it is successfully finished; False, otherwise.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetRelatedRecord(Syncfusion.Grouping.RelationDescriptor)">
            <overload>
            Returns a record from a related table with a RelationKind.ForeignKeyReference relation
            based on the foreign keys specified with RelationDescriptor.RelationKeys.
            </overload>
            <summary>
            Returns a record from a related table with a RelationKind.ForeignKeyReference relation
            based on the foreign keys specified with RelationDescriptor.RelationKeys and the values
            stored in this record's underlying data row.
            </summary>
            <param name="rd">The relation descriptor for relation keys.</param>
            <returns>The record from the related table.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetRelatedRecord(Syncfusion.Grouping.RelationDescriptor,Syncfusion.Grouping.FieldDescriptor,System.Object)">
            <summary>
            Returns a record from a related table with a RelationKind.ForeignKeyReference relation
            based on the foreign keys specified with RelationDescriptor.RelationKeys. This overload lets
            you dynamically specify the foreign key value as a parameter.
            </summary>
            <param name="rd">The relation descriptor for relation keys.</param>
            <param name="foreignKeyField">The field descriptor for which a value should be specified manually (and
            not be retrieved from underlying records data row).</param>
            <param name="foreignKeyValue">The foreign key value.</param>
            <returns>The record from the related table.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetRelatedChildTable(Syncfusion.Grouping.RelationDescriptor)">
            <summary>
            Returns a ChildTable from a related table with a RelationKind.ForeignKeyKeyWords relation
            based on the foreign keys specified with RelationDescriptor.RelationKeys.
            </summary>
            <param name="rd">The relation descriptor for relation keys.</param>
            <returns>The ChildTable from the related table.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetParentRecord(Syncfusion.Grouping.Element)">
            <summary>
            For internal use.
            </summary>       
            <returns>returns ParentRecord</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.AdjustRecordRowCount">
            <summary>
            Adjusts the record row count.
            </summary>
            <returns>returns Record RowCount</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetElementCount">
            <summary>Gets the number of elements.</summary>
            <returns>Element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetRecordDisplayElement">
            <summary>Gets the display element for the record.</summary>
            <returns>Display element.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.CompareTo(System.Object)">
            <summary>
            Compares to records unsorted source position.
            </summary>
            <param name="obj">Record object to compare.</param>
            <returns>0 if both are equal, ;gt 0 if current record has higher index, ;lt 0 if given record has higher index.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.EnsureValues">
            <summary>
            Ensures that record values are cached. The method is implemented only
            in the RecordWithValueCache class.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Record.ResetValues">
            <summary>
            Resets cached values. The method is implemented only
            in the RecordWithValueCache class. You should follow this
            call by a call to EnsureValues.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetOldValue(System.Int32)">
            <summary>
            Returns the old value for a record. The record class will
            look up changed values in the Table.ChangeFieldsArray
            </summary>
            <param name="fieldIndex">Field index.</param>
            <returns>Old value of the record.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.CompareAndUpdateValues">
            <summary>
            Returns an ArrayList with ChangedFieldInfo objects and updates
            the values in the record with changes found in underylying datasource.
            Only fields with a PropertyDescriptor are updated, others (unbound, expression fields) are ignored. The method is implemented only
            in the RecordWithValueCache class.
            </summary>
            <returns>The collection with detected changes.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Record.UpdateValues(System.Collections.IEnumerable)">
            <summary>
            Enumerates through values in the collection of ChangedFieldInfo objects
            and updates the old and new values in this record. The method is implemented only
            in the RecordWithValueCache class.
            </summary>
            <param name="changedFields">The changed fields.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetInternalYAmountCount">
            <summary>
            For internal use.
            </summary>
            <returns>returns YAmountCount</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.Record.GetInternalVisibleCount">
            <summary>
            For internal use.
            </summary>
            <returns>returns Internal Visible Count</returns>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Grouping.Record.Id">
            <summary>Gets or sets the key to identify this object.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.Record.Item(System.String)">
            <summary>
            Gets the value from the underlying datasource.
            </summary>
            <param name="columnName">The field to be retrieved.</param>
            <returns>returns value from the underlying datasource</returns>
        </member>
        <member name="P:Syncfusion.Grouping.Record.Kind">
            <override/>
            <summary>Gets the display element kind.</summary>
        </member>
        <member name="P:Syncfusion.Grouping.Record.RecordParts">
            <summary>
            Returns the collection of record parts which includes <see cref="T:Syncfusion.Grouping.RecordRowsPart"/>, <see cref="T:Syncfusion.Grouping.RecordNestedTablesPart"/>, and
            <see cref="T:Syncfusion.Grouping.RecordPreviewRowsPart"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Record.IsCurrent">
            <summary>
            Determines if this record is the current record in the parent table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Record.IsEditing">
            <summary>
            Determines if this record is the current record in the parent table and if BeginEdit was called.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Record.Parent">
            <summary>
            A reference to the parent record in a UnformChildList relation. Is not defined
            for other relation kinds.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Record.ParentDetails">
            <summary>
            The <see cref="T:Syncfusion.Grouping.RecordsDetails"/> this record belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Record.SortKeys">
            <summary>
            Gets the array of sort keys that define the sort-order of this record.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Record.PrimaryKeys">
            <summary>
            Gets the array of primary keys that define this record.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Record.IsInitialized">
            <summary>
            Determines if the record has been added to the table and inserted into a group.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Record.IsCollapsible">
            <summary>
            Gets if record can be collapsed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Record.IsExpanded">
            <summary>
            Gets / sets the records expansion state.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Record.HasNestedTables">
            <summary>
            Detemines if record has nested tables.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Record.RecordRows">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Grouping.RecordRow"/> elements that belong to this record.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Record.RecordPreviewRows">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Grouping.RecordPreviewRow"/> elements that belong to this record.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Record.NestedTables">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Grouping.NestedTable"/> elements that belong to this record.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.AddNewRecord.#ctor(Syncfusion.Grouping.AddNewRecordSection)">
            <summary>
            Initializes the new element in the specified AddNewRecordSection.
            </summary>
            <param name="parent">The parent that this element belongs to.</param>
        </member>
        <member name="M:Syncfusion.Grouping.AddNewRecord.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.AddNewRecord.GetData">
            <summary>Returns the record data.</summary>
            <returns>Record data.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.AddNewRecord.GetValue(Syncfusion.Grouping.FieldDescriptor)">
            <summary>Returns the value for the field specified.</summary>
            <param name="fieldDescriptor">The descriptor of the field whose value is to be fetched.</param>
            <returns>Requested field value.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.AddNewRecord.GetDefaultValue(Syncfusion.Grouping.FieldDescriptor)">
            <summary>
            Returns the default value for the specied field taking FieldDescriptor.DefaultValue and
            category keys of the child group into account.
            </summary>
            <param name="fieldDescriptor">The fieldDescriptor</param>
            <returns>returns the default value</returns>
        </member>
        <member name="M:Syncfusion.Grouping.AddNewRecord.SetValue(Syncfusion.Grouping.FieldDescriptor,System.Object)">
            <summary>Sets a value for the given field.</summary>
            <param name="fieldDescriptor">The field descriptor.</param>
            <param name="value">The Value.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.AddNewRecord.OnEnterRecordCalled">
            <summary>
            Determines if the source list allows adding new record.
            </summary>
            <returns>True if new record is allowed; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.AddNewRecord.OnBeginEditCalled">
            <summary>
            Addes support for adding new records.
            </summary>
            <returns>True if editing new record can proceed; False if it should abort.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.AddNewRecord.OnBeginEditComplete(System.Boolean)">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.BeginEdit"/> successfully finishes.
            </summary>
            <param name="success">True, if it is successfully finished; False, otherwise.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.AddNewRecord.OnCancelEditComplete(System.Boolean)">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.CancelEdit"/> successfully finishes.
            </summary>
            <param name="success">True, if it is successfully finished; False, otherwise.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.AddNewRecord.OnEndEditCalled">
            <override/>
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EndEdit"/> is called.
            </summary>
            <returns>True if <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EndEdit"/> can proceed; False if it should abort.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.AddNewRecord.OnEndEditComplete(System.Boolean)">
            <override/>
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EndEdit"/> successfully finishes.
            </summary>
            <param name="success">True, if it is successfully finished; False, otherwise.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.AddNewRecord.GetFilteredRecordCount">
            <summary>Returns the number of filtered records.</summary>
            <returns>Number of filtered records.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.AddNewRecord.GetRecordCount">
            <summary>Returns the number of records.</summary>
            <returns>Record count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.AddNewRecord.GetElementCount">
            <summary>Returns the number of elements.</summary>
            <returns>Element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.AddNewRecord.MeetsFilterCriteria">
            <summary>
            Determines whether the record meets filter criteria. Returns True.
            </summary>
            <returns>Returns True.</returns>
            <override />
        </member>
        <member name="M:Syncfusion.Grouping.AddNewRecord.IsSelected">
            <summary>
            Returns False.
            </summary>
            <returns>Returns boolean value false.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.AddNewRecord.SetSelected(System.Boolean)">
            <summary>
            Not supported for AddNewRecord.
            </summary>
            <param name="value">True if the record should be marked as selected.</param>
        </member>
        <member name="P:Syncfusion.Grouping.AddNewRecord.Kind">
            <summary>Gets the display element kind.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.AddNewRecord.UseDefaultValueInGetValue">
            <summary>
            Gets / sets if the AddNewRecord should retrieve the default value when its GetValue method is called.
            If UseDefaultValueInGetValue is false and also Engine.ShowDefaultValuesInAddNewRecord is false then
            the default values will only be assigned when AddNewRecord.BeginEdit is called. Prior calls to GetValue
            will return no value.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.CaptionSection">
            <summary>
            The section with the CaptionRow:
            </summary>
            <remarks>
            This is the first section within a group which provides the caption bar above the
            column headers. CaptionSection is a display element and will be an item returned by
            the Table.DisplayElements and Table.GroupedElements collection.<para/>
            <para/>
            CaptionSection is also a section that can be accessed through the Group.Sections
            collection of its parent group.
             <para/>
            If a caption should be displayed at the beginning of each group, then CaptionSection
            (s) are created when the grouping for a table is initialized. The grouping engine
            loops through all sorted records and categorizes them. For each new group, the virtual
            TableDescriptor.CreateGroup factory method is called. The TableDescriptor.CreateGroup method instantiates a CaptionSection by calling the
            virtual TableDescriptor.CreateCaptionSection factory method. <para/>
            </remarks>
            <example>The following example creates a string based on the CaptionSection's parent
            Group number of direct child elements (as usually shown in the caption element for a
             group in GroupingGrid). Use the ParentGroup property to get access to the parent
             Group of this CaptionSection:
            <code lang="C#">
                        CaptionSection cs;
                        object cat = cs.ParentGroup.Category;
                        if (cat == null)
                            cat = "(null)";
                        string caption = "{2} Item(s)";
                        string groupName = cs.ParentGroup.Name;
                        if (groupName != "")
                            caption = "{0}: {1} - " + caption;
                        return string.Format(caption, groupName, cat, cs.ParentGroup.GetChildCount());
            </code>
            <para/>
            See also:<para/>
            TableDescriptor.CreateGroup, TableDescriptor.CreateCaptionSection, Group.Caption,
            Group.Sections, IDisplayElement
            </example>
        </member>
        <member name="T:Syncfusion.Grouping.RowElementsSection">
            <summary>
            A base class for sections that can contain one or multiple row elements.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.IRowElementsContainer">
            <summary>
            Provides a <see cref="P:Syncfusion.Grouping.IRowElementsContainer.RowElements"/> property.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.IRowElementsContainer.RowElements">
            <summary>
            Returns the collection with row elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementsSection.#ctor(Syncfusion.Grouping.Group)">
            <summary>
            Initializes a new section in the specified group.
            </summary>
            <param name="parent">The group this section is created in.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementsSection.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementsSection.ShouldCreateChildElementTreeTable">
            <summary>
            Shoulds the create child element tree table.
            </summary>
            <returns>returns boolean value to indicate to create child element tree table.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementsSection.OnEnsureInitialized(System.Object)">
            <summary>
            This virtual method is called from <see cref="M:Syncfusion.Grouping.RowElementsSection.OnEnsureInitialized(System.Object)"/> and
            lets derived elements implement element-specific logic to ensure object
            is up to data.
            </summary>
            <param name="sender">The object that triggered the <see cref="M:Syncfusion.Grouping.RowElementsSection.OnEnsureInitialized(System.Object)"/> call.</param>
            <returns>
            True if changes were detected and the object was updated; False otherwise.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementsSection.GetSummaries(Syncfusion.Grouping.Table,System.Boolean@)">
            <override/>
            <summary>
            Gets summary information for the elements. 
            </summary>
            <param name="parentTable">A reference to parent table.</param>
            <param name="summaryChanged">Returns true if changes were detected.</param>
            <returns>Returns summary information.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementsSection.InvalidateSummariesBottomUp">
            <override/>
            <summary>Resets the summary for all elements.</summary>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementsSection.InvalidateCounterTopDown(System.Boolean)">
            <summary>Resets counter for all elements.</summary>
            <param name="notifyCounterSource">Indicates if the counter source should be notified.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementsSection.InvalidateSummariesTopDown">
            <summary>Resets summary for all elements.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementsSection.InvalidateSummary">
            <summary>Resets the summary.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementsSection.GetVisibleCount">
            <summary>Gets the number of visible elements.</summary>
            <returns>Visible element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementsSection.GetYAmountCount">
            <summary>Gets the element height.</summary>
            <returns>Element height.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementsSection.GetElementCount">
            <summary>Gets the number of elements.</summary>
            <returns>Element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementsSection.GetFilteredRecordCount">
            <summary>Gets the number of filtered records.</summary>
            <returns>Filtered record count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementsSection.GetRecordCount">
            <summary>Gets the number of records.</summary>
            <returns>Record count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementsSection.ToString">
            <summary>Returns a string holding the current object.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.RowElementsSection.RowElements">
            <summary>
            Returns the collection of <see cref="T:Syncfusion.Grouping.RowElement"/> elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionSection.#ctor(Syncfusion.Grouping.Group)">
            <summary>
            Initializes a new section in the specified group.
            </summary>
            <param name="parent">The group this section is created in.</param>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionSection.SupportsId">
            <summary>Determines if this object can be uniquely identified using its Id.</summary>
            <returns>True if Id is supported; False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionSection.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionSection.GetVisibleCount">
            <summary>Returns the number of visible elements.</summary>
            <returns>Visible element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionSection.GetYAmountCount">
            <summary>Returns the height of the caption.</summary>
            <returns>Caption height.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionSection.GetElementCount">
            <summary>Returns the number of elements.</summary>
            <returns>Element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionSection.GetFilteredRecordCount">
            <summary>Returns the number of filtered records.</summary>
            <returns>Filtered record count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionSection.GetRecordCount">
            <summary>Returns the number of records.</summary>
            <returns>Record count.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.CaptionSection.Id">
            <summary>Gets or sets the id used to lookup objects (used by internal caches).</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.CaptionSection.Kind">
            <summary>Gets the display element kind.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.CaptionSection.CaptionRows">
            <summary>
            The collection of <see cref="T:Syncfusion.Grouping.CaptionRow"/> elements.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.CaptionRow">
            <summary>
            Represents the row for the caption bar of a group.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RowElement">
            <summary>
            A base class for elements that can be added to a <see cref="T:Syncfusion.Grouping.RowElementCollection"/> in a <see cref="T:Syncfusion.Grouping.RowElementsSection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RowElement.#ctor(Syncfusion.Grouping.Element)">
            <summary>
            Initializes an object with the specified parent element.
            </summary>
            <param name="parent">The parent element.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RowElement.SupportsId">
            <summary>Determines whether this object can be uniquely identified using the Id.</summary>
            <returns>True if it supports id.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RowElement.GetElementCount">
            <summary>Gets the element count.</summary>
            <returns>Number of elements.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RowElement.GetFilteredRecordCount">
            <summary>Gets the number of filtered records.</summary>
            <returns>Filtered record count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RowElement.OnEnsureInitialized(System.Object)">
            <summary>
            This virtual method is called from <see cref="M:Syncfusion.Grouping.RowElement.OnEnsureInitialized(System.Object)"/> and
            lets derived elements implement element-specific logic to ensure object
            is up to data.
            </summary>
            <param name="sender">The object that triggered the <see cref="M:Syncfusion.Grouping.RowElement.OnEnsureInitialized(System.Object)"/> call.</param>
            <returns>
            True if changes were detected and the object was updated; False otherwise.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RowElement.GetRecordCount">
            <summary>Gets the number of records.</summary>
            <returns>Record count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RowElement.InvalidateCounterBottomUp">
            <override/>
            <summary>Walks up to the parent branches and resets the counters.</summary>
        </member>
        <member name="M:Syncfusion.Grouping.RowElement.InvalidateCounterTopDown(System.Boolean)">
            <summary>Walks down to the child branches and resets the counters.</summary>
            <param name="notifyCounterSource">Indicates if the counter source should be notified.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RowElement.InvalidateSummariesBottomUp">
            <summary>Walks up to the parent branches and resets the summaries.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RowElement.InvalidateSummariesTopDown">
            <summary>Walks down to the child branches and resets the summaries.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RowElement.InvalidateSummary">
            <summary>Resets the summary.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RowElement.GetElementEntry">
            <summary>
            The ElementTreeTableEntry this element is associated with (either SectionsTreeTableEntry or SortedRecordsTreeTableEntry).
            <returns>returns ElementTreeTableEntry</returns>
            </summary>
            <returns>returns ElementTreeTableEntry</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.RowElement.Id">
            <summary>Gets or sets the key to identify the current object.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionRow.#ctor(Syncfusion.Grouping.CaptionSection)">
            <summary>
            Initializes the new element in the specified CaptionSection.
            </summary>
            <param name="parent">The parent that this element belongs to.</param>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionRow.GetElementCount">
            <summary>Returns 1 (element count).</summary>
            <returns>Element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionRow.GetVisibleCount">
            <summary>Returns 1(visible elements count).</summary>
            <returns>Visible element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionRow.GetYAmountCount">
            <summary>Gets the height for the element.</summary>
            <returns>Returns height.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionRow.ToString">
            <summary>Returns the string representation of CaptionRow object.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.CaptionRow.Kind">
            <summary>Gets the display element kind.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.CaptionRow.ParentElement">
            <summary>
            Gets / sets the CaptionSection this elements belongs to.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.CaptionRowCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Grouping.CaptionRow"/> elements that are children of a <see cref="T:Syncfusion.Grouping.CaptionSection"/> in a <see cref="T:Syncfusion.Grouping.Group"/>.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.CaptionSection.CaptionRows"/> property
            of a <see cref="T:Syncfusion.Grouping.CaptionSection"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionRowCollection.Contains(Syncfusion.Grouping.CaptionRow)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionRowCollection.IndexOf(Syncfusion.Grouping.CaptionRow)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionRowCollection.CopyTo(Syncfusion.Grouping.CaptionRow[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionRowCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionRowCollection.Insert(System.Int32,Syncfusion.Grouping.CaptionRow)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="value">The element to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionRowCollection.Remove(Syncfusion.Grouping.CaptionRow)">
            <summary>
            Removes the specified element from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionRowCollection.Add(Syncfusion.Grouping.CaptionRow)">
            <summary>
            Adds a value to the end of the collection.
            </summary>
            <param name="value">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionRowCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove. </param>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionRowCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CaptionRowCollection.Item(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index.
            </summary>
            <param name="index">Key to identify the requested element.</param>
        </member>
        <member name="P:Syncfusion.Grouping.CaptionRowCollection.IsReadOnly">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CaptionRowCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CaptionRowCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CaptionRowCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. 
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.CaptionRowCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.CaptionRow"/> elements of a <see cref="T:Syncfusion.Grouping.CaptionRowCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionRowCollectionEnumerator.#ctor(Syncfusion.Grouping.CaptionRowCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionRowCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CaptionRowCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.CaptionRowCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.ChildTable">
            <summary>
            A ChildTable is either a TopLevelGroup or a group that can can be referenced
            as nested table from a record in a parent table. ChildTable groups are created
            for every new key found based on <see cref="P:Syncfusion.Grouping.RelationDescriptor.RelationKeys"/>.<para/>
            You can get access to a ChildTable through the <see cref="P:Syncfusion.Grouping.NestedTable.ChildTable"/>
            property of a <see cref="T:Syncfusion.Grouping.NestedTable"/> in a record.
            </summary>
            <remarks>
            A ChildTable defines a group of records that belong to a category specified with
            <see cref="P:Syncfusion.Grouping.RelationDescriptor.RelationKeys"/>.
            ChildTables are created similar tp regular groups when the records of the table are
            categorized or when a new record is inserted. The collection in the TableDescriptor that defines categorization is the
            <see cref="P:Syncfusion.Grouping.TableDescriptor.RelationChildColumns"/> collection. RelationChildColumns will be
            added when there is a parent-child relation between two tables. The child table of such relation must be
            sorted by the columns that are used to identify a record. These columns match the foreign key
            columns of the parent table. For every new category key with regards to RelationChildColumns
            a <see cref="T:Syncfusion.Grouping.ChildTable"/> is created. The ChildTable class is derived from <see cref="T:Syncfusion.Grouping.Group"/>.
            <para/>
            A child table can either be a final node with records or it can be a node with nested groups. If a
            group has records, its <see cref="P:Syncfusion.Grouping.Group.Groups"/> collection will be empty and the <see cref="P:Syncfusion.Grouping.Group.Records"/>
            collection will contain all records. If a group has nested groups, its <see cref="P:Syncfusion.Grouping.Group.Groups"/>
            collection will have the nested groups and the <see cref="P:Syncfusion.Grouping.Group.Records"/> collection will be empty.
            <para/>
            A child table can be expanded and collapsed with its <see cref="P:Syncfusion.Grouping.Group.IsExpanded"/> property. Expansion
            of child tables will show or hide nested elements of the group within the <see cref="P:Syncfusion.Grouping.Table.DisplayElements"/>
            and <see cref="P:Syncfusion.Grouping.Table.NestedDisplayElements"/> collection.
            <para/>
            A table has at least one child table. The <see cref="P:Syncfusion.Grouping.Table.TopLevelGroup"/> is a <see cref="T:Syncfusion.Grouping.ChildTable"/>
            which is derived from <see cref="T:Syncfusion.Grouping.Group"/>.
            </remarks>
        </member>
        <member name="T:Syncfusion.Grouping.Group">
            <summary>
            A group defines a set of records that belong to a category. A group has
            multiple sections such as CaptionSection, SummarySection, GroupsDetailsSection,
            and RecordsDetailsSection.
            </summary>
            <remarks>
            Groups are created when the records of a table are categorized or when a new record
            is inserted. Normally,
            the categories are based on the <see cref="P:Syncfusion.Grouping.TableDescriptor.GroupedColumns"/> but
            programmers can also provide their own categorization routines by implementing
            a <see cref="P:Syncfusion.Grouping.SortColumnDescriptor.Comparer"/>
            for a <see cref="T:Syncfusion.Grouping.SortColumnDescriptor"/>. Before groups are categorized, the records are
            sorted in the order as specified by <see cref="P:Syncfusion.Grouping.TableDescriptor.GroupedColumns"/>. After the
            records are sorted, the <see cref="T:Syncfusion.Grouping.Table"/> object loops through all records to determine
            the categories records belong to.
            <para/>
            Another collection in the TableDescriptor that defines categorization is the
            <see cref="P:Syncfusion.Grouping.TableDescriptor.RelationChildColumns"/> collection. RelationChildColumns will be
            added when there is a parent-child relation between two tables. The child table of such a relation must be
            sorted by the columns that are used to identify a record. These columns match the foreign key
            columns of the parent table. For every new category key with regards to RelationChildColumns
            a <see cref="T:Syncfusion.Grouping.ChildTable"/> is created. The ChildTable class is derived from the <see cref="T:Syncfusion.Grouping.Group"/>.
            <para/>
            A group can either be a final node with records or it can be a node with nested groups. If a
            group has records, its <see cref="P:Syncfusion.Grouping.Group.Groups"/> collection will be empty and the <see cref="P:Syncfusion.Grouping.Group.Records"/>
            collection will contain all records. If a group has nested groups, its <see cref="P:Syncfusion.Grouping.Group.Groups"/>
            collection will have the nested groups and the <see cref="P:Syncfusion.Grouping.Group.Records"/> collection will be empty.
            <para/>
            A group can be expanded and collapsed with its <see cref="P:Syncfusion.Grouping.Group.IsExpanded"/> property. Expansion
            of groups will show or hide nested elements of the group within the <see cref="P:Syncfusion.Grouping.Table.DisplayElements"/>
            collection.
            <para/>
            A table has at least one group. The <see cref="P:Syncfusion.Grouping.Table.TopLevelGroup"/> is a <see cref="T:Syncfusion.Grouping.ChildTable"/>
            which is derived from <see cref="T:Syncfusion.Grouping.Group"/>.
            <para/>
            The <see cref="P:Syncfusion.Grouping.Element.GroupLevel"/> property will return the group level how deep the group is nested.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.Group.#ctor(Syncfusion.Grouping.Element)">
            <summary>
            Initializes a new group and assigns the parent.
            </summary>
            <param name="parent">The parent element this object belongs to.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Group.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.SupportsId">
            <summary>Specifies whether this object can be uniquely idenfied with the id.</summary>
            <returns>returns True.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.FindAddNewRecord">
            <summary>
            Determines the <see cref="T:Syncfusion.Grouping.AddNewRecord"/> for the group within the <see cref="T:Syncfusion.Grouping.AddNewRecordSection"/>.
            </summary>
            <returns>A reference to the <see cref="T:Syncfusion.Grouping.AddNewRecord"/> or NULL if group has not such a record.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Group.InitializeDetails(System.Boolean,Syncfusion.Grouping.SortColumnDescriptorCollection,System.Boolean)">
            <summary>
            Initializes the sections for a new group.
            </summary>
            <param name="hasRecords">Specifies if group will be filled with records or nested groups.</param>
            <param name="sortColumns">The sortColumns that define the category of the group.</param>
            <param name="isExpanded">The initial expansion state for the group.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Group.OnInitializeSections(System.Boolean,Syncfusion.Grouping.SortColumnDescriptorCollection)">
            <summary>
            Called from <see cref="M:Syncfusion.Grouping.Group.InitializeDetails(System.Boolean,Syncfusion.Grouping.SortColumnDescriptorCollection,System.Boolean)"/> to initialize the sections for a new group. Override
            this method if you want to customize the sections that are available for a group.
            </summary>
            <param name="hasRecords">Specifies if group will be filled with records or nested groups.</param>
            <param name="sortColumns">The sortColumns that define the category of the group.</param>
            <example>
            <code lang="C#">
                    protected override void OnInitializeSections(bool hasRecords, SortColumnDescriptorCollection sortColumns)
                    {
                        this.Sections.Add(this.ParentTableDescriptor.CreateCaptionSection(this));
                        if (this.IsTopLevelGroup)
                            this.Sections.Add(this.ParentTableDescriptor.CreateAddNewRecordSection(this));
                        if (hasRecords)
                            this.Sections.Add(this.ParentTableDescriptor.CreateRecordsDetails(this, sortColumns));
                        else
                            this.Sections.Add(this.ParentTableDescriptor.CreateGroupsDetails(this, sortColumns));
                        this.Sections.Add(this.ParentTableDescriptor.CreateSummarySection(this));
                    }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Grouping.Group.BeginInit">
            <summary>
            Begins initialization of sections.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Group.EndInit">
            <summary>
            Ends initialization of sections.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Group.GetFirstRecord">
            <summary>
            Searches for the first record in the group. If the group has nested groups, they
            will be recursively searched.
            </summary>
            <returns>The first record in the group; NULL if group is empty.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Group.GetChildCount">
            <summary>Returns the child count for a given group.</summary>
            <returns>Child count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.ExpandAllGroups">
            <summary>
            Expands this group and all nested groups.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Group.ExpandAllGroups(System.Boolean)">
            <summary>
            Expands this group and all nested groups and only optionally raises the <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanging"/>
            and <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanged"/> events.
            </summary>
            <param name="raiseDisplayElementChangeEvents">True if <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanging"/>
            and <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanged"/> events should be raised; False otherwise.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Group.ExpandAllGroups(System.Boolean,System.Boolean)">
            <summary>
            Expands this group and all nested groups and only optionally raises the <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanging"/>
            and <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanged"/> events and only optionally invalidates counters.
            </summary>
            <param name="raiseDisplayElementChangeEvents">True if events should be raised.</param>
            <param name="refreshCounters">True if counters should be invalidated.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Group.ExpandAllRecords(System.Boolean)">
            <summary>
            Expands all records in this group and all nested groups and only optionally raises the <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanging"/>
            and <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanged"/> events.
            </summary>
            <param name="raiseDisplayElementChangeEvents">True if <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanging"/>
            and <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanged"/> events should be raised; False otherwise.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Group.ExpandAllRecords(System.Boolean,System.Boolean)">
            <summary>
            Expands all records in this group and all nested groups and only optionally raises the <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanging"/>
            and <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanged"/> events and only optionally invalidates counters.
            </summary>
            <param name="raiseDisplayElementChangeEvents">Specifies if DispalyElementChanged events should be raised.</param>
            <param name="refreshCounters">Specifies if the counters should be invalidated.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Group.CollapseAllGroups">
            <summary>
            Collapses this group and all nested groups.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Group.CollapseAllGroups(System.Boolean)">
            <summary>
            Collapses this group and all nested groups and only optionally raises the <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanging"/>
            and <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanged"/> events.
            </summary>
            <param name="raiseDisplayElementChangeEvents">True if <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanging"/>
            and <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanged"/> events should be raised; False otherwise.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Group.CollapseAllRecords">
            <summary>
            Collapses all records in this group and all nested groups.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Group.CollapseAllRecords(System.Boolean)">
            <summary>
            Collapses all records in this group and all nested groups and only optionally raises <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanging"/>
            and <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanged"/> events.
            </summary>
            <param name="raiseDisplayElementChangeEvents">True if <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanging"/>
            and <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanged"/> events should be raised; False otherwise.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Group.CreateGroupTypedListRecordsCollection">
            <summary>
            Creates the group typed list records collection.
            </summary>
            <returns>returns GroupTypedListRecordsCollection</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.GetSummaries(Syncfusion.Grouping.Table,System.Boolean@)">
            <summary>Gets summary information for this element and child elements.</summary>
            <param name="parentTable">A reference to the parent table.</param>
            <param name="summaryChanged">True if changes were detected.</param>
            <returns>Array of summaries.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.GetSummary(System.Int32)">
            <overload>
            Returns summary information for this group.
            </overload>
            <summary>
            Returns a summary at the specified index.
            </summary>
            <param name="indexOfSummaryDescriptor">The index of the summary in the <see cref="T:Syncfusion.Grouping.TableDescriptor"/>.<see cref="P:Syncfusion.Grouping.TableDescriptor.Summaries"/> collection.</param>
            <returns>An object that implements the <see cref="T:Syncfusion.Collections.BinaryTree.ITreeTableSummary"/>. You should cast the object to the
            correct runtime type depending on the <see cref="P:Syncfusion.Grouping.SummaryDescriptor.SummaryType"/>, e.g. <see cref="T:Syncfusion.Grouping.DoubleAggregateSummary"/> in case of a
            <see cref="T:Syncfusion.Grouping.SummaryType"/>.<see cref="F:Syncfusion.Grouping.SummaryType.DoubleAggregate"/>
            </returns>
            <example>
            <code lang="C#">
                  string GetAverageSummary(SummaryDescriptor summaryDescriptor, Group group)
                    {
                        Table table = group.ParentTable;
                        TableDescriptor td = table.TableDescriptor;
                        string summaryText = "";
            <para/> 
                        bool use31Code = true;
                        if (use31Code)
                        {
                            // Option 1: Strong typed access to DoubleAggregateSummary.
                            DoubleAggregateSummary summary1 = (DoubleAggregateSummary) group.GetSummary(summaryDescriptor);
                            summaryText = string.Format("{0:c}", summary1.Average);
             <para/> 
                            // or Option 2: Use reflection to get "Average" property of summary
                            summaryText = string.Format("{0:c}", group.GetSummaryProperty(summaryDescriptor, "Average"));
             <para/> 
                            // or Option 3: Use reflection to get "Average" property of summary and format it
                            summaryText = group.GetFormattedSummaryProperty(summaryDescriptor, "Average", "{0:c}");
                        }
             <para/> 
                        else
                        {
                            // This is the code you had to use in version 3.0 and earlier (still working but bit more complicate)
                            if (summaryDescriptor != null)
                            {
                                int indexOfSd1 = table.TableDescriptor.Summaries.IndexOf(summaryDescriptor);
             <para/> 
                                // strong typed - you have to cast to DoubleAggregateSummary.
             <para/> 
                                DoubleAggregateSummary summary1 = (DoubleAggregateSummary) group.GetSummaries(table)[indexOfSd1];
                                summaryText = string.Format("{0:c}", summary1.Average);
                            }
                        }
                        return summaryText;
                    }
            </code>
            <code lang="VB">
             <para/> 
                Function GetAverageSummary(ByVal summaryDescriptor As SummaryDescriptor, ByVal group As Group) As String
                    Dim table As Table = group.ParentTable
                    Dim td As TableDescriptor = table.TableDescriptor
                    Dim summaryText As String = ""
             <para/> 
                    Dim use31Code As Boolean = True
                    If use31Code Then
                        ' Option 1: Strong typed access to DoubleAggregateSummary.
                        Dim summary1 As DoubleAggregateSummary = CType(group.GetSummary(summaryDescriptor), DoubleAggregateSummary)
                        summaryText = String.Format("{0:c}", summary1.Average)
             <para/> 
                        ' or Option 2: Use reflection to get "Average" property of summary
                        summaryText = String.Format("{0:c}", group.GetSummaryProperty(summaryDescriptor, "Average"))
            <para/>  
                        ' or Option 3: Use reflection to get "Average" property of summary and format it
                        summaryText = group.GetFormattedSummaryProperty(summaryDescriptor, "Average", "{0:c}")
             <para/> 
                    Else
                        ' This is the code you had to use in version 3.0 and earlier (still working but bit more complicate)
                        If Not (summaryDescriptor Is Nothing) Then
                            Dim indexOfSd1 As Integer = table.TableDescriptor.Summaries.IndexOf(summaryDescriptor)
            <para/>  
                            ' strong typed - you have to cast to DoubleAggregateSummary.
                            Dim summary1 As DoubleAggregateSummary = CType(group.GetSummaries(table)(indexOfSd1), DoubleAggregateSummary)
                            summaryText = String.Format("{0:c}", summary1.Average)
                        End If
                    End If
                    Return summaryText
                End Function 'GetSummary
             <para/> 
            </code>
             <para/> 
            </example>
            <seealso cref="P:Syncfusion.Grouping.TableDescriptor.Summaries"/>
            <seealso cref="M:Syncfusion.Grouping.Group.GetSummaryProperty(System.String,System.String)"/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.GetSummary(Syncfusion.Grouping.SummaryDescriptor)">
            <summary>
            Returns the value of the specified summary.
            </summary>
            <param name="sd">A summary of the <see cref="T:Syncfusion.Grouping.TableDescriptor"/>.<see cref="P:Syncfusion.Grouping.TableDescriptor.Summaries"/> collection.</param>
            <returns>An object that implements the <see cref="T:Syncfusion.Collections.BinaryTree.ITreeTableSummary"/>. You should cast the object to the
            correct runtime type depending on the <see cref="P:Syncfusion.Grouping.SummaryDescriptor.SummaryType"/>, e.g. <see cref="T:Syncfusion.Grouping.DoubleAggregateSummary"/> in case of a
            <see cref="T:Syncfusion.Grouping.SummaryType"/>.<see cref="F:Syncfusion.Grouping.SummaryType.DoubleAggregate"/>
            </returns>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.GetSummary(System.String)">
            <summary>
            Returns the value of the summary with the specified name.
            </summary>
            <param name="summaryDescriptorName">A summary in the <see cref="T:Syncfusion.Grouping.TableDescriptor"/>.<see cref="P:Syncfusion.Grouping.TableDescriptor.Summaries"/> collection.</param>
            <returns>An object that implements the <see cref="T:Syncfusion.Collections.BinaryTree.ITreeTableSummary"/>. You should cast the object to the
            correct runtime type depending on the <see cref="P:Syncfusion.Grouping.SummaryDescriptor.SummaryType"/>, e.g. <see cref="T:Syncfusion.Grouping.DoubleAggregateSummary"/> in case of a
            <see cref="T:Syncfusion.Grouping.SummaryType"/>.<see cref="F:Syncfusion.Grouping.SummaryType.DoubleAggregate"/>
            </returns>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.GetSummaryProperty(Syncfusion.Grouping.SummaryDescriptor,System.String)">
            <overload>
            Returns the value of the specified summary.
            </overload>
            <summary>
            Returns the value of the specified summary.
            </summary>
            <param name="sd">A summary of the <see cref="T:Syncfusion.Grouping.TableDescriptor"/>.<see cref="P:Syncfusion.Grouping.TableDescriptor.Summaries"/> collection.</param>
            <param name="propertyName">The property in the summary. The value will be determined with reflection and converted to a string.</param>
            <returns>The specified property as string.</returns>
            <example>
            <code lang="C#">
                  string GetAverageSummary(SummaryDescriptor summaryDescriptor, Group group)
                    {
                        Table table = group.ParentTable;
                        TableDescriptor td = table.TableDescriptor;
                        string summaryText = "";
            <para/>  
                        bool use31Code = true;
                        if (use31Code)
                        {
                            // Option 1: Strong typed access to DoubleAggregateSummary.
                            DoubleAggregateSummary summary1 = (DoubleAggregateSummary) group.GetSummary(summaryDescriptor);
                            summaryText = string.Format("{0:c}", summary1.Average);
            <para/>  
                            // or Option 2: Use reflection to get "Average" property of summary
                            summaryText = string.Format("{0:c}", group.GetSummaryProperty(summaryDescriptor, "Average"));
            <para/>  
                            // or Option 3: Use reflection to get "Average" property of summary and format it
                            summaryText = group.GetFormattedSummaryProperty(summaryDescriptor, "Average", "{0:c}");
                        }
            <para/>  
                        else
                        {
                            // This is the code you had to use in version 3.0 and earlier (still working but bit more complicate)
                            if (summaryDescriptor != null)
                            {
                                int indexOfSd1 = table.TableDescriptor.Summaries.IndexOf(summaryDescriptor);
             <para/> 
                                // strong typed - you have to cast to DoubleAggregateSummary.
             <para/> 
                                DoubleAggregateSummary summary1 = (DoubleAggregateSummary) group.GetSummaries(table)[indexOfSd1];
                                summaryText = string.Format("{0:c}", summary1.Average);
                            }
                        }
                        return summaryText;
                    }
            </code>
            <code lang="VB">
             <para/> 
                Function GetAverageSummary(ByVal summaryDescriptor As SummaryDescriptor, ByVal group As Group) As String
                    Dim table As Table = group.ParentTable
                    Dim td As TableDescriptor = table.TableDescriptor
                    Dim summaryText As String = ""
             <para/> 
                    Dim use31Code As Boolean = True
                    If use31Code Then
                        ' Option 1: Strong typed access to DoubleAggregateSummary.
                        Dim summary1 As DoubleAggregateSummary = CType(group.GetSummary(summaryDescriptor), DoubleAggregateSummary)
                        summaryText = String.Format("{0:c}", summary1.Average)
             <para/> 
                        ' or Option 2: Use reflection to get "Average" property of summary
                        summaryText = String.Format("{0:c}", group.GetSummaryProperty(summaryDescriptor, "Average"))
             <para/> 
                        ' or Option 3: Use reflection to get "Average" property of summary and format it
                        summaryText = group.GetFormattedSummaryProperty(summaryDescriptor, "Average", "{0:c}")
             <para/> 
                    Else
                        ' This is the code you had to use in version 3.0 and earlier (still working but bit more complicate)
                        If Not (summaryDescriptor Is Nothing) Then
                            Dim indexOfSd1 As Integer = table.TableDescriptor.Summaries.IndexOf(summaryDescriptor)
            <para/>  
                            ' strong typed - you have to cast to DoubleAggregateSummary.
                            Dim summary1 As DoubleAggregateSummary = CType(group.GetSummaries(table)(indexOfSd1), DoubleAggregateSummary)
                            summaryText = String.Format("{0:c}", summary1.Average)
                        End If
                    End If
                    Return summaryText
                End Function 'GetSummary
             <para/> 
            </code>
             <para/> 
            </example>
            <seealso cref="P:Syncfusion.Grouping.TableDescriptor.Summaries"/>
            <seealso cref="M:Syncfusion.Grouping.Group.GetSummaryProperty(System.String,System.String)"/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.GetSummaryProperty(System.String,System.String)">
            <overload>
            Returns the value of the summary with the specified name.
            </overload>
            <summary>
            Returns the value of the summary with the specified name.
            </summary>
            <param name="summaryDescriptorName">A summary of the <see cref="T:Syncfusion.Grouping.TableDescriptor"/>.<see cref="P:Syncfusion.Grouping.TableDescriptor.Summaries"/> collection.</param>
            <param name="propertyName">The property in the summary. The value will be determined with reflection and converted to a string.</param>
            <returns>The specified property.</returns>
            <example>
            <code lang="C#">
                  string GetAverageSummary(SummaryDescriptor summaryDescriptor, Group group)
                    {
                        Table table = group.ParentTable;
                        TableDescriptor td = table.TableDescriptor;
                        string summaryText = "";
            <para/>  
                        bool use31Code = true;
                        if (use31Code)
                        {
                            // Option 1: Strong typed access to DoubleAggregateSummary.
                            DoubleAggregateSummary summary1 = (DoubleAggregateSummary) group.GetSummary(summaryDescriptor);
                            summaryText = string.Format("{0:c}", summary1.Average);
            <para/>  
                            // or Option 2: Use reflection to get "Average" property of summary
                            summaryText = string.Format("{0:c}", group.GetSummaryProperty(summaryDescriptor, "Average"));
            <para/>  
                            // or Option 3: Use reflection to get "Average" property of summary and format it
                            summaryText = group.GetFormattedSummaryProperty(summaryDescriptor, "Average", "{0:c}");
                        }
             <para/> 
                        else
                        {
                            // This is the code you had to use in version 3.0 and earlier (still working but bit more complicate)
                            if (summaryDescriptor != null)
                            {
                                int indexOfSd1 = table.TableDescriptor.Summaries.IndexOf(summaryDescriptor);
             <para/> 
                                // strong typed - you have to cast to DoubleAggregateSummary.
            <para/>  
                                DoubleAggregateSummary summary1 = (DoubleAggregateSummary) group.GetSummaries(table)[indexOfSd1];
                                summaryText = string.Format("{0:c}", summary1.Average);
                            }
                        }
                        return summaryText;
                    }
            </code>
            <code lang="VB">
             <para/> 
                Function GetAverageSummary(ByVal summaryDescriptor As SummaryDescriptor, ByVal group As Group) As String
                    Dim table As Table = group.ParentTable
                    Dim td As TableDescriptor = table.TableDescriptor
                    Dim summaryText As String = ""
             <para/> 
                    Dim use31Code As Boolean = True
                    If use31Code Then
                        ' Option 1: Strong typed access to DoubleAggregateSummary.
                        Dim summary1 As DoubleAggregateSummary = CType(group.GetSummary(summaryDescriptor), DoubleAggregateSummary)
                        summaryText = String.Format("{0:c}", summary1.Average)
             <para/> 
                        ' or Option 2: Use reflection to get "Average" property of summary
                        summaryText = String.Format("{0:c}", group.GetSummaryProperty(summaryDescriptor, "Average"))
             <para/> 
                        ' or Option 3: Use reflection to get "Average" property of summary and format it
                        summaryText = group.GetFormattedSummaryProperty(summaryDescriptor, "Average", "{0:c}")
             <para/> 
                    Else
                        ' This is the code you had to use in version 3.0 and earlier (still working but bit more complicate)
                        If Not (summaryDescriptor Is Nothing) Then
                            Dim indexOfSd1 As Integer = table.TableDescriptor.Summaries.IndexOf(summaryDescriptor)
             <para/> 
                            ' strong typed - you have to cast to DoubleAggregateSummary.
                            Dim summary1 As DoubleAggregateSummary = CType(group.GetSummaries(table)(indexOfSd1), DoubleAggregateSummary)
                            summaryText = String.Format("{0:c}", summary1.Average)
                        End If
                    End If
                    Return summaryText
                End Function 'GetSummary
             <para/> 
            </code>
             <para/> 
            </example>
            <seealso cref="P:Syncfusion.Grouping.TableDescriptor.Summaries"/>
            <seealso cref="M:Syncfusion.Grouping.Group.GetSummary(System.String)"/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.GetFormattedSummaryProperty(Syncfusion.Grouping.SummaryDescriptor,System.String,System.String)">
            <summary>
            Determines the value of the summary with the specified name and formats its output.
            </summary>
            <param name="sd">A summary of the <see cref="T:Syncfusion.Grouping.TableDescriptor"/>.<see cref="P:Syncfusion.Grouping.TableDescriptor.Summaries"/> collection.</param>
            <param name="propertyName">The property in the summary. The value will be determined with reflection and converted to a string.</param>
            <param name="format">The format to be used in <see cref="T:System.String"/>.<see cref="M:System.String.Format(System.String,System.Object)"/> for formmatting the result, e.g. "{0:c}". See also http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpconformattingtypes.asp</param>
            <returns>The specified property as formatted string.</returns>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.GetFormattedSummaryProperty(System.String,System.String,System.String)">
            <summary>
            Determines the value of the summary with the specified name and formats its output.
            </summary>
            <param name="summaryDescriptorName">A summary of the <see cref="T:Syncfusion.Grouping.TableDescriptor"/>.<see cref="P:Syncfusion.Grouping.TableDescriptor.Summaries"/> collection.</param>
            <param name="propertyName">The property in the summary. The value will be determined with reflection and converted to a string.</param>
            <param name="format">The format to be used in <see cref="T:System.String"/>.<see cref="M:System.String.Format(System.String,System.Object)"/> for formmatting the result, e.g. "{0:c}". See also http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpconformattingtypes.asp</param>
            <returns>The specified property as formatted string.</returns>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.InvalidateSummariesBottomUp">
            <summary>Walks up parent branches and reset summaries.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.InvalidateCounter">
            <summary>Resets the counter fields.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.InvalidateCounterTopDown(System.Boolean)">
            <summary>Resets the counter fields for all the elements.</summary>
            <param name="notifyCounterSource">When true notifies the counter source.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.InvalidateSummariesTopDown">
            <summary>Resets the summary fields for all the elements.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.InvalidateSummary">
            <summary>Resets the summaries.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.IsGroupVisible">
            <summary>
            Determines whether this group should be visible. By default a group is hidden if it does
            not have any records that meet filter criteria.
            </summary>
            <returns>true if group should be visibe; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Group.OnInitializeVisibleCounters">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.IsChildVisible(Syncfusion.Grouping.Element)">
            <summary>Determines whether the child elements are visible.</summary>
            <param name="el">The Element.</param>
            <returns>True if the childs are visible.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.GetVisibleCount">
            <summary>Gets the number of visible elements.</summary>
            <returns>Visible element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.GetYAmountCount">
            <summary>Returns the height for the element.</summary>
            <returns>returns Height.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.GetVisibleCustomCount">
            <summary>Gets the custom count for visible elements.</summary>
            <returns>Visible custom count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.GetCustomCount">
            <summary>Gets the custom count for the element.</summary>
            <returns>Custom count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.GetElementCount">
            <summary>Gets the element count.</summary>
            <returns>Number of elements.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.GetFilteredRecordCount">
            <summary>Gets the filtered record count.</summary>
            <returns>Filtered record count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.GetRecordCount">
            <summary>Gets the record count.</summary>
            <returns>Number of records.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.GetElementEntry">
            <summary>
            The ElementTreeTableEntry this element is associated with (either SectionsTreeTableEntry or SortedRecordsTreeTableEntry).
            <returns>returns ElementTreeTableEntry</returns>
            </summary>
            <returns>returns ElementTreeTableEntry</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.GetSummaryElementEntry">
            <summary>
            Gets the summary element entry.
            </summary>
            <returns>returns ElementTreeTableEntry</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.InvalidateCounterBottomUp">
            <internalonly/>
            <summary>Used internally.</summary>
        </member>
        <member name="M:Syncfusion.Grouping.Group.SetExpanded(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the group's expansion state and optionally invalidates counters and optionally raises <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanging"/>
            and <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanged"/> events.
            </summary>
            <param name="value">The new expansion state.</param>
            <param name="refreshCounters">True if counters should be invalidated; False otherwise.</param>
            <param name="raiseDisplayElementChangeEvents">True if <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanging"/>
            and <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanged"/> events should be raised; False otherwise.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Group.GetDefaultValue(Syncfusion.Grouping.FieldDescriptor)">
            <summary>
            Returns the default value for the specied field taking FieldDescriptor.DefaultValue and
            category keys of the child group into account.
            </summary>
            <param name="fieldDescriptor">The field descriptor.</param>
            <returns>Default value.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Group.UniqueGroupIdsToString">
            <summary>
            Returns a string combined of all group categories which is used by 
            FilterBarCells to name the RecordFilterDescriptor specific for a group.
            </summary>
            <returns>A string combining all group categories.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Group.CategoriesToString">
            <summary>
            Returns a string in format (TableDescriptor.Name) {GetChildCount()}-Items: CategoryKeys.
            </summary>
            <returns>String with state information about the group.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Group.ToString">
            <summary>Returns string representation of the object.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Group.ShouldShowCaption">
            <summary>
            Gets if caption should be visible in <see cref="P:Syncfusion.Grouping.Table.DisplayElements"/> or not.
            </summary>
            <returns>returns True.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Group.GetChildListPosition">
            <summary>
            Returns the position of the first unsorted record in this list
            in the Table.UnsortedRecords collection. The ChildTable must belong
            to a UniformChildList relation. For other types of relations the
            funtion returns -1.
            </summary>
            <returns>Position of first unsorted record.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Group.SetChildListPosition(System.Int32)">
            <summary>
            Specifies the position of the first unsorted record in this list
            in the Table.UnsortedRecords collection. The ChildTable must belong
            to a UniformChildList relation. 
            </summary>
            <param name="index">The Index.</param>
        </member>
        <member name="P:Syncfusion.Grouping.Group.OldCaptionText">
            <summary>Only for internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.Group.CachedVisibleCount">
            <summary>Only for internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.Group.CachedYamountCount">
            <summary>Only for internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.Group.CachedVisibleItemCount">
            <summary>Only for internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.Group.CachedVisibleCustomCount">
            <summary>Only for internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.Group.Id">
            <summary>Gets group id.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.Group.IsMainGroup">
            <summary>
            Determines if this is the root group of the table. A TopLevelGroup is the root group.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.CategoryColumns">
            <summary>
            Returns the columns that define the category of the group.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.Name">
            <summary>
            The name of the column by which the group is categorized (see <see cref="P:Syncfusion.Grouping.TableDescriptor.GroupedColumns"/>).
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.Caption">
            <summary>
            Gets the <see cref="T:Syncfusion.Grouping.CaptionSection"/> of this group.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.Summary">
            <summary>
            Gets the <see cref="T:Syncfusion.Grouping.ISummarySection"/> of this group.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.Details">
            <summary>
            Gets the <see cref="T:Syncfusion.Grouping.DetailsSection"/> of this group.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.Groups">
            <summary>
            ShortCut for ((GroupsDetails) Details).Groups. A group can either be a final node with records or it can be a node with nested groups. If a
            group has records, its <see cref="P:Syncfusion.Grouping.Group.Groups"/> collection will be empty and the <see cref="P:Syncfusion.Grouping.Group.Records"/>
            collection will contain all records. If a group has nested groups, its <see cref="P:Syncfusion.Grouping.Group.Groups"/>
            collection will have the nested groups and the <see cref="P:Syncfusion.Grouping.Group.Records"/> collection will be empty.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.FlattenedRecords">
            <summary>
            Returns a flattened collection of records that belong to this group and nested groups.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.FlattenedFilteredRecords">
            <summary>
            Returns a flattened collection of filtered records that belong to this group and nested groups.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.GroupTypedListRecords">
            <summary>
            Returns a flattened collection of filtered records that belong to this group and nested groups.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.Records">
            <summary>
            ShortCut for ((RecordsDetails) Details).Records. This returns all records in the group including records that
            do not meet filter criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.FilteredRecords">
            <summary>
            ShortCut for ((RecordsDetails) Details).FilteredRecords. This returns only records in the group that
            meet filter criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.Sections">
            <summary>
            Returns all sections in the group.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.FilteredChildNodeCount">
            <summary>
            Returns the number of direct child elements (either records or nested groups) in the group. 
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.IsTopLevelGroup">
            <summary>
            Determines if this is the <see cref="P:Syncfusion.Grouping.Table.TopLevelGroup"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.IsCollapsible">
            <summary>
            Gets if the groups can be collapsed or if they should always be shown expanded.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.IsExpanded">
            <summary>
            Gets or sets the groups expansion state.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.Category">
            <summary>
            Gets the main category key of this group.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.CategoryKeys">
            <summary>
            Gets the collection of category keys for this group. Child tables can have more than one category key
            if multiple relation keys were specified in the <see cref="T:Syncfusion.Grouping.RelationDescriptor"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.CategoryForeignKeyParentIds">
            <summary>
            Gets the collection of foreign key parent ids associated with category keys for this group when 
            the table is grouped by the display member of a foreign key relation. Child tables can have more than one category key
            if multiple relation keys were specified in the <see cref="T:Syncfusion.Grouping.RelationDescriptor"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.UniqueGroupId">
            <summary>
            Returns an array of category keys for this group and all parent groups which is 
            used by FilterBarCells and FilterBarSummary to compare whether conditions should
            be applied to this group.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.PassThroughItem">
            <summary>
            Gets or sets a PassThrough group item.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.SourceList">
            <summary>
            Returns the list that is associated with this ChildTable. The value will only be initialized
            when you have a UniformChildList relation and Engine.UseOldUniformChildListRelation is false.
            The list is a reference to the strong-typed nested collection in this child table. The ChildTable 
            listens to ListChanged events on that list if IBindingList interface is implemented. For all other
            relation kinds this value will always be null.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Group.UnsortedEntry">
            <summary>
            A reference to the first unsorted record entry for that list. This is used to determine
            to map indexes in the child list (e.g. the e.NewIndex from a ListChanged event) to the
            absolute unsorted record index in the whole table across all nested child tables.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ChildTable.#ctor(Syncfusion.Grouping.Element)">
            <summary>
            Initializes a new child table and assigns the parent.
            </summary>
            <param name="parent">The parent element this object belongs to.</param>
        </member>
        <member name="M:Syncfusion.Grouping.ChildTable.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ChildTable.ContainsCurrentRecordOrChildTable">
            <summary>
            Determines if this child table contains <see cref="P:Syncfusion.Grouping.Table.CurrentElement"/>.
            </summary>
            <returns>True if child table contains <see cref="P:Syncfusion.Grouping.Table.CurrentElement"/>; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.ChildTable.LeaveRecord(System.Boolean)">
            <summary>
            Deactivates the current record; calls <see cref="M:Syncfusion.Grouping.CurrentRecordManager.LeaveRecord(System.Boolean)"/> on the
            <see cref="P:Syncfusion.Grouping.Element.ParentTable"/>.
            </summary>
            <param name="cancelEditIfNotValid">True if any changes should be discarded if they do not meet validation constraints; False if record should not be deactivated if not valid.</param>
        </member>
        <member name="M:Syncfusion.Grouping.ChildTable.InvalidateSummariesBottomUp">
            <summary>Walks up parent branches and reset summaries.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ChildTable.InvalidateCounter">
            <summary>Resets the counter.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ChildTable.InvalidateCounterTopDown(System.Boolean)">
            <summary>Walks down to child branches and resets counter.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.ChildTable.IsTopLevelGroup">
            <summary>Determines if this is the Table.TopLevelGroup.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.ChildTable.DisplayElements">
            <summary>
            Provides a flat collection of visible elements in the child table. All records, groups,
            and sections are only returned by this collection if they are expanded
            and meet filter criteria. The collection does not step into nested tables.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ChildTable.NestedDisplayElements">
            <summary>
            Provides a flat collection of visible elements in the child table. All records, groups,
            and sections are only returned by this collection if they are expanded
            and meet filter criteria. The collection steps into nested tables.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ChildTable.NestedElements">
            <summary>
            Provides a flat collection of all elements in the child table. All records, groups,
            and sections are returned by this collection no matter if they were expanded
            or meet filter criteria. The collection steps into nested tables.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ChildTable.Elements">
            <summary>
            Provides a flat collection of all elements in the child table. All records, groups,
            and sections are returned by this collection no matter if they were expanded
            or meet filter criteria. The collection does not step into nested tables.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ChildTable.Name">
            <summary>Gets the name of table descriptor.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.ChildTable.ParentNestedTable">
            <summary>A reference to the parent nested table this element belongs to.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.ChildTable.ParentDisplayElement">
            <summary>
            Returns the parent the element belongs to.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.CollectionWrapper">
            <summary>
            This is a wrapper around <see cref="T:System.Collections.ArrayList"/>. It is used to hold a set of non-generic collections.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CollectionWrapper.#ctor(System.Collections.ICollection)">
            <summary>
            Constructor for CollectionWrapper.
            </summary>
            <param name="inner">The collection.</param>
        </member>
        <member name="M:Syncfusion.Grouping.CollectionWrapper.Add(System.Object)">
            <summary>
            Adds new item.
            </summary>
            <param name="value">Item value.</param>
            <returns>Returns -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CollectionWrapper.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CollectionWrapper.Contains(System.Object)">
            <summary>
            Determines whether the list contains the specified item.
            </summary>
            <param name="value">The Item value.</param>
            <returns>True if it contains the item specified; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CollectionWrapper.IndexOf(System.Object)">
            <summary>
            Returns the zero-based index of the first occurrence of the given item in the list.
            </summary>
            <param name="value">Item value.</param>
            <returns>Item Index.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CollectionWrapper.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a value into the list at the specified index.
            </summary>
            <param name="index">The Index.</param>
            <param name="value">The Value.</param>
        </member>
        <member name="M:Syncfusion.Grouping.CollectionWrapper.Remove(System.Object)">
            <summary>
            Removes the specified value from the list.
            </summary>
            <param name="value">The object value</param>
        </member>
        <member name="M:Syncfusion.Grouping.CollectionWrapper.RemoveAt(System.Int32)">
            <summary>
            Removes the value at the specified index.
            </summary>
            <param name="index">The Index.</param>
        </member>
        <member name="M:Syncfusion.Grouping.CollectionWrapper.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array.
            </summary>
            <param name="array">One-dimensional array.</param>
            <param name="index">Start index.</param>
        </member>
        <member name="M:Syncfusion.Grouping.CollectionWrapper.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>Collection Wrapper enumerator.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CollectionWrapper.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns the <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the properties on each item used to bind data. 
            </summary>
            <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor"/> objects to find in the collection as bindable.</param>
            <returns>The <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/>.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CollectionWrapper.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns the name of the list.
            </summary>
            <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor"/> objects, for which the list name is returned.</param>
            <returns>The list name.</returns>
        </member>
        <member name="P:Syncfusion.Grouping.CollectionWrapper.IsFixedSize">
            <summary>
            Determines if the list size is fixed. Returns true.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CollectionWrapper.IsReadOnly">
            <summary>
            Specifies if the list is read-only. Returns true.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CollectionWrapper.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The Index.</param>
        </member>
        <member name="P:Syncfusion.Grouping.CollectionWrapper.Count">
            <summary>
            Gets number of elements in the list.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CollectionWrapper.IsSynchronized">
            <summary>
            Gets a value that indicates whether access to this collection is synchronized.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CollectionWrapper.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.CollectionWrapper.CollectionWrapperEnumerator">
            <summary>
            Serves as enumerator for <see cref="T:Syncfusion.Grouping.CollectionWrapper"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CollectionWrapper.CollectionWrapperEnumerator.#ctor(Syncfusion.Grouping.CollectionWrapper)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.CollectionWrapper.CollectionWrapperEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CollectionWrapper.CollectionWrapperEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.CollectionWrapper.CollectionWrapperEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.ColumnHeaderSection">
            <summary>
            The section with the ColumnHeaderRow(s):
            </summary>
            <remarks>
            A ColumnHeaderSection holds ColumnHeaderRow(s) that are displayed at the top of a
            table or group. ColumnHeaderRow is a place holder item where the grouping grid
            should display column headers. <para/>
            <para/> 
            The ColumnHeaderSection is a container element and has a collection of one or
            multiple ColumnHeaderRow elements.<para/>
            <para/> 
            If ColumnHeaderSection(s) should be displayed at the top of each group,
            ColumnHeaderSection(s) are created when the grouping for a table is initialized.
             The grouping engine loops through all sorted records and categorizes them. For
             each new group the virtual TableDescriptor.CreateGroup factory method is called.
            The TableDescriptor.CreateGroup method instantiates a ColumnHeaderSection by
            calling the virtual TableDescriptor.CreateColumnHeaderSection factory method.
            <para/>
            <para/> 
            One set of ColumnHeaderRows are displayed at the top of the table below the CaptionSection.
            The rows belong to the ColumnHeaderSection of the TopLevelGroup
            of a table. The TopLevelGroup is created with the virtual
            TableDescriptor.CreateGroup factory method. The TableDescriptor.CreateGroup
            method instantiates a ColumnHeaderSection by calling the virtual
            TableDescriptor.CreateColumnHeaderSection factory method. <para/>
            <para/> 
            Because the ColumnHeaderSection is a container element and not a display element,
            it will not be an item returned by the Table.DisplayElements and
            Table.GroupedElements collections. Instead, the ColumnHeaderSection can be
            accessed only through the Group.Sections collection of its parent group
            or TopLevelGroup.<para/>
            <para/> 
            See also:<para/>
            TableDescriptor.CreateGroup, TableDescriptor.CreateColumnHeaderSection,
            Table.TopLevelGroup, IContainerElement, Group.Sections
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderSection.#ctor(Syncfusion.Grouping.Group)">
            <summary>
            Initializes a new section in the specified group.
            </summary>
            <param name="parent">The group this section is created in.</param>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderSection.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderSection.OnEnsureInitialized(System.Object)">
            <returns>returns boolean value false.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderSection.InvalidateCounterTopDown(System.Boolean)">
            <summary>Forces reevaluation of all counters for all the table elements.</summary>
            <param name="notifyCounterSource">When True notifies counter source.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderSection.GetElementCount">
            <summary>Returns the number of elements.</summary>
            <returns>Number of elements.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderSection.GetVisibleCount">
            <summary>Returns the number of visible elements.</summary>
            <returns>Number of visible elements.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderSection.GetYAmountCount">
            <summary>Returns the column header section height.</summary>
            <returns>Returns Height.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderSection.GetFilteredRecordCount">
            <summary>Returns the number of filtered records.</summary>
            <returns>Number of filtered records.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderSection.GetRecordCount">
            <override/>
            <summary>Returns the number of records.</summary>
            <returns>Returns 0.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderSection.FieldsToString">
            <summary>
            Gets a concatenated string of all field names of <see cref="P:Syncfusion.Grouping.TableDescriptor.Fields"/> of the 
            <see cref="T:Syncfusion.Grouping.TableDescriptor"/> this section belongs to.
            </summary>
            <returns>A string with comma-separated field names.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderSection.ToString">
            <summary>Returns string representation of ColumnHeaderSection.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.ColumnHeaderSection.Kind">
            <summary>Gets the kind of display element.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.ColumnHeaderSection.ColumnHeaderRows">
            <summary>
            The collection of <see cref="T:Syncfusion.Grouping.ColumnHeaderRow"/> elements.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.ColumnHeaderRow">
            <summary>
            Represents the row for the column header row in a group.
            </summary>
            <remarks>
            A ColumnHeaderRow is displayed at the top of a table or group. ColumnHeaderRow is a place holder 
            item where the grouping grid should display column headers. <para/>
             <para/>
            ColumnHeaderRow is a RowElement and an element of the ColumnHeaderSection.ColumnHeaderRows 
            collection of a parent ColumnHeaderSection. <para/>
             <para/>
            ColumnHeaderRows are created and removed internally within a ColumnHeaderSection when the 
            section is created and when TableDescriptor.RowsPerRecord property of a TableDescriptor 
            is changed.<para/>
             <para/>
            See also:<para/>
            TableDescriptor.RowsPerRecord, IDisplayElement, ColumnHeaderSection, ColumnHeaderSection.ColumnHeaderRows, 
            ColumnHeaderRowCollection
             <para/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderRow.#ctor(Syncfusion.Grouping.ColumnHeaderSection)">
            <summary>
            Initializes the new element in the specified ColumnHeaderSection.
            </summary>
            <param name="parent">The parent section that this element belongs to.</param>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderRow.GetElementCount">
            <summary>Returns the number of elements.</summary>
            <returns>Number of elements.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderRow.OnEnsureInitialized(System.Object)">
            <returns>returns boolean value, false</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderRow.GetVisibleCount">
            <summary>Returns the number of visible elements.</summary>
            <returns>Number of visible elements.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderRow.GetYAmountCount">
            <summary>Gets the height of column header row.</summary>
            <returns>Row Height.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderRow.ToString">
            <summary>Returns string representation of the ColumnHeaderRow object.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.ColumnHeaderRow.Kind">
            <summary>Gets the kind of disply element.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.ColumnHeaderRow.ParentElement">
            <summary>
            Gets / sets the ColumnHeaderSection this elements belongs to.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.ColumnHeaderRowCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Grouping.CaptionRow"/> elements that are children of a <see cref="T:Syncfusion.Grouping.ColumnHeaderSection"/> in a <see cref="T:Syncfusion.Grouping.Group"/>.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.ColumnHeaderSection.ColumnHeaderRows"/> property
            of a <see cref="T:Syncfusion.Grouping.ColumnHeaderSection"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderRowCollection.Contains(Syncfusion.Grouping.ColumnHeaderRow)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderRowCollection.IndexOf(Syncfusion.Grouping.ColumnHeaderRow)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderRowCollection.CopyTo(Syncfusion.Grouping.ColumnHeaderRow[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderRowCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading of the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderRowCollection.Insert(System.Int32,Syncfusion.Grouping.ColumnHeaderRow)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="value">The element to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderRowCollection.Remove(Syncfusion.Grouping.ColumnHeaderRow)">
            <summary>
            Removes the specified element from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderRowCollection.Add(Syncfusion.Grouping.ColumnHeaderRow)">
            <summary>
            Adds a value to the end of the collection.
            </summary>
            <param name="value">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderRowCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove. </param>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderRowCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ColumnHeaderRowCollection.Item(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ColumnHeaderRowCollection.IsReadOnly">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ColumnHeaderRowCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ColumnHeaderRowCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ColumnHeaderRowCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. 
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.ColumnHeaderRowCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.ColumnHeaderRow"/> elements of a <see cref="T:Syncfusion.Grouping.ColumnHeaderRowCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderRowCollectionEnumerator.#ctor(Syncfusion.Grouping.ColumnHeaderRowCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderRowCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ColumnHeaderRowCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.ColumnHeaderRowCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.CurrentRecordManager">
            <summary>
            Manages the current record or element in a table and provides routines both for
            navigation and editing.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.Dispose">
            <summary>
            Disposes of the object.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.Reset">
            <summary>
            Resets the current record state and raises a <see cref="E:Syncfusion.Grouping.Table.CurrentRecordManagerReset"/> event
            on the parent table.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.ResetCurrentRecord(Syncfusion.Grouping.Record)">
            <summary>
            Resets the current record state and raises a <see cref="E:Syncfusion.Grouping.Table.CurrentRecordManagerReset"/> event
            on the parent table. Afterwards it internally sets the 
            <see cref="P:Syncfusion.Grouping.CurrentRecordManager.CurrentElement"/> without raising any events. This is an internal helper method that 
            is called from Table when AddNewRecord has been transformed into a regular Record element when
            EndEdit was called.
            </summary>
            <param name="record">The Record</param>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.RestoreOldCurrentField">
            <summary>Restores the current field to the previous state.</summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.ToString">
            <summary>Returns string representation of the current record manager.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.ResetModifiedValue(Syncfusion.Grouping.FieldDescriptor)">
            <summary>
            Resets the <see cref="P:Syncfusion.Grouping.CurrentRecordProperty.ModifiedValue"/> for the specified <see cref="T:Syncfusion.Grouping.CurrentRecordProperty"/>. Works also with nested properties and related fields.
            </summary>
            <param name="fieldDescriptor">The FieldDescriptor</param>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.ResetCachedState">
            <summary>Internal only.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.AddNew">
            <summary>
            Navigates to the <see cref="T:Syncfusion.Grouping.AddNewRecord"/> and calls <see cref="M:Syncfusion.Grouping.CurrentRecordManager.BeginEdit"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.BeginEdit">
            <summary>
            Switches the current record into edit mode. Raises <see cref="E:Syncfusion.Grouping.Table.CurrentRecordContextChange"/> events on the <see cref="T:Syncfusion.Grouping.Table"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.EndEdit">
            <summary>
            Ends edit mode for the current record. If changes are detected, they will be saved to the
            underlying data source. Raises <see cref="E:Syncfusion.Grouping.Table.CurrentRecordContextChange"/> events on the <see cref="T:Syncfusion.Grouping.Table"/>.
            </summary>
            <returns>Returns the record that was changed. Normally this is a reference to the current record. But if the current
            record is an AddNewRecord, a new record will be added to the table and instead of returning the AddNewRecord, a reference
            to the newly created record element is returned.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.NotifyCurrentRecordListChanged(Syncfusion.Grouping.TableListChangedEventArgs)">
            <summary>
            Invoked when the underlying datasource, to which the current record belongs, is changed.
            </summary>
            <param name="te">The <see cref="T:Syncfusion.Grouping.TableListChangedEventArgs"/> object.</param>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.DeleteCurrentRecord">
            <summary>
            Deletes the current record.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.Reinititalize">
            <summary>
            Cancels editing for the current record; <see cref="M:Syncfusion.Grouping.CurrentRecordManager.CancelEdit"/> is called, events are raised, and current record
            is marked as deactivated without raising events.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.CancelEdit">
            <summary>
            Cancels editing for the current record. Changes in the current record are
            discarded. Raises <see cref="E:Syncfusion.Grouping.Table.CurrentRecordContextChange"/> events on the <see cref="T:Syncfusion.Grouping.Table"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.ResetEditingInternal">
            <summary>
            called form Table.bindingList_ListChanged
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.Navigate(System.Int32)">
            <overload>
            Navigates the record up or down, the current element should not be deactivated if not valid, element should be scrolled into view. Raises <see cref="E:Syncfusion.Grouping.Table.CurrentRecordContextChange"/> events on the <see cref="T:Syncfusion.Grouping.Table"/>.
            </overload>
            <summary>
            Navigates the record up or down, the current element should not be deactivated if not valid, element should be scrolled into view. Raises <see cref="E:Syncfusion.Grouping.Table.CurrentRecordContextChange"/> events on the <see cref="T:Syncfusion.Grouping.Table"/>.
            </summary>
            <param name="step">The number of records to advance. Positive step will move the record down, negative steps will move the record up.</param>
            <returns>The current record after navigation.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.Navigate(Syncfusion.Grouping.Record,System.Int32)">
            <summary>
            Navigates the record up or down from the given initial record, the current element should not be deactivated if not valid, element should be scrolled into view. Raises <see cref="E:Syncfusion.Grouping.Table.CurrentRecordContextChange"/> events on the <see cref="T:Syncfusion.Grouping.Table"/>.
            </summary>
            <param name="startRecord">The initial record to move off from.</param>
            <param name="step">The number of records to advance. Positive step will move the record down, negative steps will move the record up.</param>
            <returns>The current record after navigation.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.NavigateTo(Syncfusion.Grouping.Record)">
            <overload>
            Navigates to a specific record, the current element should not be deactivated if not valid, element should be scrolled into view. Raises <see cref="E:Syncfusion.Grouping.Table.CurrentRecordContextChange"/> events on the <see cref="T:Syncfusion.Grouping.Table"/>.
            </overload>
            <summary>
            Navigates to a specific record, the current element should not be deactivated if not valid, element should be scrolled into view. Raises <see cref="E:Syncfusion.Grouping.Table.CurrentRecordContextChange"/> events on the <see cref="T:Syncfusion.Grouping.Table"/>.
            </summary>
            <param name="record">The record to navigate to.</param>
            <returns>The current record after navigation.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.NavigateTo(Syncfusion.Grouping.Record,System.Boolean)">
            <summary>
            Navigates to a specific record, the current element should not be deactivated if not valid, element should be scrolled into view. Raises <see cref="E:Syncfusion.Grouping.Table.CurrentRecordContextChange"/> events on the <see cref="T:Syncfusion.Grouping.Table"/>.
            </summary>
            <param name="record">The record to navigate to.</param>
            <param name="cancelEditIfNotValid">True if any changes should be discarded if they do not meet validation constraints; False if record should not be deactivated if not valid.</param>
            <returns>The current record after navigation.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.NavigateTo(Syncfusion.Grouping.Record,System.Boolean,System.Boolean)">
            <summary>
            Navigates to a specific record. Raises <see cref="E:Syncfusion.Grouping.Table.CurrentRecordContextChange"/> events on the <see cref="T:Syncfusion.Grouping.Table"/>.
            </summary>
            <param name="record">The record to navigate to.</param>
            <param name="cancelEditIfNotValid">True if any changes should be discarded if they do not meet validation constraints; False if record should not be deactivated if not valid.</param>
            <param name="scrollInView">True if record should be scrolled into view.</param>
            <returns>The current record after navigation.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.NavigateTo(Syncfusion.Grouping.Element)">
            <summary>
            Navigates to a specific element, the current element should not be deactivated if not valid, element should be scrolled into view. Raises <see cref="E:Syncfusion.Grouping.Table.CurrentRecordContextChange"/> events on the <see cref="T:Syncfusion.Grouping.Table"/>.
            </summary>
            <param name="record">The element to navigate to.</param>
            <returns>The current element after navigation.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.NavigateTo(Syncfusion.Grouping.Element,System.Boolean)">
            <summary>
            Navigates to a specific element, element should be scrolled into view. Raises <see cref="E:Syncfusion.Grouping.Table.CurrentRecordContextChange"/> events on the <see cref="T:Syncfusion.Grouping.Table"/>.
            </summary>
            <param name="record">The element to navigate to.</param>
            <param name="cancelEditIfNotValid">True if any changes should be discarded if they do not meet validation constraints; False if record should not be deactivated if not valid.</param>
            <returns>The current element after navigation.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.ShouldScrollInView">
            <summary>
            Gets if element should be scrolled into view during a <see cref="M:Syncfusion.Grouping.CurrentRecordManager.ShouldScrollInView"/> call.
            </summary>
            <returns>True if the element should be scrolled into view.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.NavigateTo(Syncfusion.Grouping.Element,System.Boolean,System.Boolean)">
            <summary>
            Navigates to a specific element. Raises <see cref="E:Syncfusion.Grouping.Table.CurrentRecordContextChange"/> events on the <see cref="T:Syncfusion.Grouping.Table"/>.
            </summary>
            <param name="record">The element to navigate to.</param>
            <param name="cancelEditIfNotValid">True if any changes should be discarded if they do not meet validation constraints; False if record should not be deactivated if not valid.</param>
            <param name="scrollInView">True if record should be scrolled into view.</param>
            <returns>The current element after navigation.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.LeaveRecord(System.Boolean)">
            <summary>
            Deactivates the current record; if current record is in editing mode <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EndEdit"/> is called and / or
            <see cref="M:Syncfusion.Grouping.CurrentRecordManager.CancelEdit"/> if record could not be validated. Raises <see cref="E:Syncfusion.Grouping.Table.CurrentRecordContextChange"/> events on the <see cref="T:Syncfusion.Grouping.Table"/>.
            </summary>
            <param name="cancelEditIfNotValid">True if any changes should be discarded if they do not meet validation constraints; False if record should not be deactivated if not valid.</param>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.EnterRecord(Syncfusion.Grouping.Element)">
            <summary>
            Activates a new record; if there is a current record the method will throw an exception. You first
            need to call <see cref="M:Syncfusion.Grouping.CurrentRecordManager.LeaveRecord(System.Boolean)"/> in such case. Raises <see cref="E:Syncfusion.Grouping.Table.CurrentRecordContextChange"/> events on the <see cref="T:Syncfusion.Grouping.Table"/>.
            </summary>
            <param name="record">The record to navigate to.</param>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.Lock">
            <summary>
            Locks the current record. While locked, calls to Navigate, BeginEdit, EndEdit, or CancelEdit will be
            ignored.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordManager.Unlock">
            <summary>
            Unlocks the current record after a <see cref="M:Syncfusion.Grouping.CurrentRecordManager.Lock"/> call.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.UpdateHelper">
            <summary>
            Gets or sets the record update helper.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.Info">
            <summary>
            Gets debug information about the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.CurrentField">
            <summary>
            Gets / sets the current field (in a grid this is the current cell in the active record).
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.Properties">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Grouping.CurrentRecordProperty"/> elements that
            contain modified values of the current record.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.Data">
            <summary>
            Gets the underlying data of the current record (calls <see cref="M:Syncfusion.Grouping.Record.GetData"/> on the current <see cref="T:Syncfusion.Grouping.Record"/>).
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.EditableObject">
            <summary>
            Casts <see cref="P:Syncfusion.Grouping.CurrentRecordManager.Data"/> as <see cref="T:System.ComponentModel.IEditableObject"/>. NULL if Data is not of this type.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.ParentTable">
            <summary>
            The <see cref="T:Syncfusion.Grouping.Table"/> this object belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.IsAnyPropertyModified">
            <summary>
            Determines if any field in the current record was modified.
            </summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.IsAnyPropertyInvalid">
            <summary>
            Checks if validation failed because of invalid data in the current record.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.IsModified">
            <summary>
            Determines if record was marked as modified.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.IsEditing">
            <summary>
            Gets if <see cref="M:Syncfusion.Grouping.CurrentRecordManager.BeginEdit"/> was called and is in editing mode. Will be set to False when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.CancelEdit"/> or
            <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EndEdit"/> is called.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.InBeginEdit">
            <summary>
            True while processing <see cref="M:Syncfusion.Grouping.CurrentRecordManager.BeginEdit"/> call. Will be set to False after <see cref="M:Syncfusion.Grouping.CurrentRecordManager.BeginEdit"/> returns.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.InCancelEdit">
            <summary>
            True while processing <see cref="M:Syncfusion.Grouping.CurrentRecordManager.CancelEdit"/> call. Will be set to False after <see cref="M:Syncfusion.Grouping.CurrentRecordManager.CancelEdit"/> returns.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.InEndEdit">
            <summary>
            True while processing <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EndEdit"/> call. Will be set to False after <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EndEdit"/> returns.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.InNavigate">
            <summary>
            True while processing <see cref="M:Syncfusion.Grouping.CurrentRecordManager.Navigate(System.Int32)"/> call. Will be set to False after <see cref="M:Syncfusion.Grouping.CurrentRecordManager.Navigate(System.Int32)"/> returns.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.HasCurrentRecord">
            <summary>
            Determines if table has an active current element that is a <see cref="T:Syncfusion.Grouping.Record"/> (and not a <see cref="T:Syncfusion.Grouping.NestedTable"/>).
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.HasCurrentElement">
            <summary>
            Determines if table has an active current element (either a <see cref="T:Syncfusion.Grouping.Record"/> or <see cref="T:Syncfusion.Grouping.NestedTable"/>).
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.CurrentElement">
            <summary>
            Gets / sets the current element. Setting the current element will trigger a <see cref="M:Syncfusion.Grouping.CurrentRecordManager.Navigate(System.Int32)"/> call.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.CurrentRecord">
            <summary>
            Gets / sets the current record. When current element is not a <see cref="T:Syncfusion.Grouping.Record"/>, NULL is returned, (e.g. if
            element is a <see cref="T:Syncfusion.Grouping.NestedTable"/>).
            Setting the current record will trigger a <see cref="M:Syncfusion.Grouping.CurrentRecordManager.Navigate(System.Int32)"/> call.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.ForceShowCurrentRecord">
            <exclude/>
            <summary>
            Gets a value indicating whether the engine should ensure that a record is visible and all its parent
            elements are expanded when setting the current record. The default setting is true.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.InLeaveRecord">
            <summary>
            Gets if <see cref="M:Syncfusion.Grouping.CurrentRecordManager.LeaveRecord(System.Boolean)"/> was called. Will be set to False when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.LeaveRecord(System.Boolean)"/> returns.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.InEnterRecord">
            <summary>
            Gets if <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EnterRecord(Syncfusion.Grouping.Element)"/> was called. Will be set to False when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EnterRecord(Syncfusion.Grouping.Element)"/> returns.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordManager.IsLocked">
            <summary>
            Determines if current record is locked after a <see cref="M:Syncfusion.Grouping.CurrentRecordManager.Lock"/> call.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.IRecordUpdateHelper">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.IRecordUpdateHelper.CanSaveRecord(System.Object)">
            <summary>
            Represents the boolean value
            </summary>
            <param name="item">object value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Grouping.IRecordUpdateHelper.SaveRecord(System.Object,Syncfusion.Grouping.Table)">
            <summary>
            used to save the items
            </summary>
            <param name="item">object value.</param>
            <param name="table">Represents the table.</param>
        </member>
        <member name="M:Syncfusion.Grouping.IRecordUpdateHelper.AddRecord(System.Object,Syncfusion.Grouping.Table)">
            <summary>
            used to add the records.
            </summary>
            <param name="item">object value.</param>
            <param name="table">Represents the table.</param>
        </member>
        <member name="M:Syncfusion.Grouping.IRecordUpdateHelper.DeleteRecord(System.Object,Syncfusion.Grouping.Table)">
            <summary>
            used to delete the records.
            </summary>
            <param name="item">object value.</param>
            <param name="table">Represents the table.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Grouping.CurrentRecordPropertyCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Grouping.CurrentRecordProperty"/> elements that provides storage for modified
            values for the current <see cref="T:Syncfusion.Grouping.Record"/> in a <see cref="T:Syncfusion.Grouping.CurrentRecordManager"/>.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.CurrentRecordManager.Properties"/> property
            of a <see cref="P:Syncfusion.Grouping.Table.CurrentRecordManager"/> object.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.CurrentRecordPropertyCollection.Empty">
            <summary>
            A Read-only and empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordPropertyCollection.Contains(Syncfusion.Grouping.CurrentRecordProperty)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordPropertyCollection.IndexOf(Syncfusion.Grouping.CurrentRecordProperty)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordPropertyCollection.CopyTo(Syncfusion.Grouping.CurrentRecordProperty[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordPropertyCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading of the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordPropertyCollection.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Not supported because collection is readonly.
            </summary>
            <param name="index">The index value</param>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordPropertyCollection.Item(System.Int32)">
            <summary>
            Gets the element at the zero-based index.
            Setting is not supported and will throw an exception since the collection is Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordPropertyCollection.Item(Syncfusion.Grouping.FieldDescriptor)">
            <summary>
            Gets the element for the descriptor.
            Setting is not supported and will throw an exception since the collection is Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordPropertyCollection.Item(System.String)">
            <summary>
            Gets the element for the field with the specified name.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordPropertyCollection.IsReadOnly">
            <summary>
            Returns True because this collection is always Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordPropertyCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordPropertyCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordPropertyCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. The property also
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            </summary>
            <remarks>
            If changes in the TableDescriptor are detected, the
            method will reinitialize the field descriptors before returning the count.
            </remarks>
        </member>
        <member name="T:Syncfusion.Grouping.CurrentRecordPropertyCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.CurrentRecordProperty"/> items of a <see cref="T:Syncfusion.Grouping.CurrentRecordPropertyCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordPropertyCollectionEnumerator.#ctor(Syncfusion.Grouping.CurrentRecordPropertyCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordPropertyCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordPropertyCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordPropertyCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.CurrentRecordProperty">
            <summary>
            A <see cref="T:Syncfusion.Grouping.CurrentRecordProperty"/> element provides storage for modified
            values for the current <see cref="P:Syncfusion.Grouping.CurrentRecordProperty.Record"/> in a <see cref="T:Syncfusion.Grouping.CurrentRecordManager"/>.
            CurrentRecordProperty objects are accessed through the collection returned by the <see cref="P:Syncfusion.Grouping.CurrentRecordManager.Properties"/> property
            of a <see cref="P:Syncfusion.Grouping.Table.CurrentRecordManager"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordProperty.ToString">
            <summary>Returns string representation of the CurrentRecordProperty object.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordProperty.ResetModifiedValue">
            <summary>
            Resets the modified value and marks the property as not modified.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordProperty.SaveChanges">
            <summary>
            Saves the changes into the underlying datasource. 
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordProperty.Record">
            <summary>
            The current record.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordProperty.FieldDescriptor">
            <summary>
            The field descriptor.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordProperty.CurrentValue">
            <summary>
            The current (possibly modified) value.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordProperty.OriginalValue">
            <summary>
            The original value.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordProperty.ModifiedValue">
            <summary>
            The modified value; NULL if not modified,
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordProperty.IsModified">
            <summary>
            Determines if value is modified.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordProperty.IsError">
            <summary>
            Determines if an exception was thrown in a previous <see cref="M:Syncfusion.Grouping.CurrentRecordProperty.SaveChanges"/> call.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordProperty.Exception">
            <summary>
            Gets / sets an exception object that was thrown when the record was validated. 
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.DataTableList">
            <summary>
            An IBindingList that wraps a DataTable and provides optimized access to the rows of the datatable.
            The Engine will access a DataTable through this wrapper class instead of accessing records through the DataTable.DefaultView
            to increase performance when adding, removing, and changing records when <see cref="P:Syncfusion.Grouping.Engine.AllowSwapDataViewWithDataTableList"/>
            is enabled.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.IGroupingList">
            <summary>
            This interface lets you implement customized sorting routines for the engine as shown in 
            the Grid / Grouping / GroupingPerf sample.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.IGroupingList.ApplySort(Syncfusion.Grouping.RelationChildColumnDescriptorCollection,Syncfusion.Grouping.SortColumnDescriptorCollection,Syncfusion.Grouping.SortColumnDescriptorCollection)">
            <summary>
            Sorts the records in the table in the order specifed by the column collections passed in as arguments.
            </summary>
            <param name="relationChildColumns">This has the highest sort precedence. RelationChildColumns will be given when you have a master-details 
            relation between two tables. The child table must be sorted by the columns that are used to identify a record. 
            These columns match the foreign key columns of the parent table.</param>
            <param name="groupColumns">This has the higher sort precedence than sortColumns. Group columns are the columns that the table is grouped by.</param>
            <param name="sortColumns">This has the lowest sort precedence.</param>
        </member>
        <member name="P:Syncfusion.Grouping.IGroupingList.AllowItemReference">
            <summary>
            When you allow item references, the Record.GetData() call will cache and save a reference to the data 
            object for that specific row (e.g. with a DataTable, the data object is a DataRow). If you do not 
            allow item references, Record.GetData() will always get the data from the datasource and will not cache it. 
            Depending on how fast lookups are in your datasource, AllowItemReference might speed things up a bit.
            </summary>
            <remarks>
            The default behavior in the engine is that if the datasource is a DataView, the engine does internally have 
            AllowItemReference = True in the grouping engine. 
            For other datasources, we usually don�t because we do not know if is safe to keep references to the rows.
            <para/>
            The engine has an internal version field for the source list. When the list is sorted, this version field 
            is increased. That means no matter what you specify for AllowItemReference, the Record.GetData() will ask your
            Datasource for a reference and not rely on its cache. A ListChanged event also increases that version field. 
            So, after a ListChanged event any subsequent call to Record.GetData will result in querying your datasource 
            the first time. When Record.GetData() is called a second time on a record, it will return the cached row.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.IGroupingList.GroupingSortBehavior">
            <summary>
            Defines the sort behavior of the table.
            </summary>
            <remarks>
            The engine has a built-in optimization when you change sort columns that allows it to perform the sorting on an on-demand basis 
            group-by-group. Suppose you have a table with 200 different countries and you change the sort order of the cities. It is not 
            necessary to sort the whole table. Instead, the individual groups can be sorted when they are scrolled into view. Such 
            on-demand sorting can only be done with internal sort routines and not by letting your datasource do the sorting.
            <para/>
            If you return <see cref="F:Syncfusion.Grouping.GroupingSortBehavior.GroupByGroup"/>, you allow this optimization. IGroupingList.ApplySort will not be called when the table is already 
            sorted by grouped or relationchild columns.
            <para/>
            If you return <see cref="F:Syncfusion.Grouping.GroupingSortBehavior.Table"/>, you do not allow this optimization. In that case, the whole table will be sorted and 
            IGroupingList.ApplySort is called.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.IGroupingList.SupportsGroupSorting">
            <summary>
            Specifies if the list's <see cref="M:Syncfusion.Grouping.IGroupingList.ApplySort(Syncfusion.Grouping.RelationChildColumnDescriptorCollection,Syncfusion.Grouping.SortColumnDescriptorCollection,Syncfusion.Grouping.SortColumnDescriptorCollection)"/> rotuine should be called instead of having the engine
            sort the data. Return True if you want to provide your own customized sort routine.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.IGroupingColumnChanging">
             <summary>
            Creating the Interface for IGroupingColumnChanging
             </summary>
        </member>
        <member name="E:Syncfusion.Grouping.IGroupingColumnChanging.ColumnChanging">
            <summary>
            Used to handle the columnchanging.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.IGroupingColumnChanging.RowRemoving">
            <summary>
            Used to handle the row removing.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableList.#ctor(System.Data.DataTable)">
            <summary>
            Initializes a new object and attaches it to the wrapped DataTable.
            </summary>
            <param name="dt">The DataTable to be wrapped.</param>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableList.Dispose">
            <summary>
            Used to release the managed resources.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.DataTableList.ChangedRowIndex">
            <summary>
            Used for the index of changed row.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableList.GetDataTableRowIndexOf(System.Data.DataRow)">
            <summary>
            Returns the row index.
            </summary>
            <param name="row">Given row.</param>
            <returns>Row index.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableList.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Not implemented.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Not implemented. Returns -1.
            </summary>
            <param name="property">The PropertyDescriptor</param>
            <param name="key">The key value</param>
            <returns>returns -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableList.RemoveSort">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableList.AddNew">
            <summary>
            Adds a new row (calling DataTable.NewRow) and returns the new object.
            </summary>
            <returns>The new row.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Not implemented.
            </summary>
            <param name="property">The propertydescriptor</param>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove. </param>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="value">The element to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableList.Remove(System.Object)">
            <summary>
            Removes the specified row object from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableList.System#Collections#IList#Contains(System.Object)">
            <summary>
            Always False, the method is not implemented yet.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableList.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableList.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Always -1, the method is not implemented.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableList.Add(System.Object)">
            <summary>
            Adds a row object to the end of the collection.
            </summary>
            <param name="value">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableList.GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns a PropertyDescriptorCollection that represents the DataTable.Columns collection. 
            </summary>
            <param name="listAccessors">Array of <see cref="T:System.ComponentModel.PropertyDescriptor"/> objects.</param>
            <returns>Property descriptor collection.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableList.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns DataTable.TableName.
            </summary>
            <param name="listAccessors">Array of <see cref="T:System.ComponentModel.PropertyDescriptor"/> objects.</param>
            <returns>Table name.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableList.ApplySort(Syncfusion.Grouping.RelationChildColumnDescriptorCollection,Syncfusion.Grouping.SortColumnDescriptorCollection,Syncfusion.Grouping.SortColumnDescriptorCollection)">
            <summary>
            Not implemented.
            </summary>
            <param name="relationChildColumns">The RelationChildColumnDescriptorCollection</param>
            <param name="groupColumns">The group columns</param>
            <param name="sortColumns">The sort columns</param>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableList.DataTable">
            <summary>
            The underlying DataTable.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableList.AllowNew">
            <summary>
            Always True.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableList.SortProperty">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableList.SupportsSorting">
            <summary>
            Always False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableList.IsSorted">
            <summary>
            Always False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableList.AllowRemove">
            <summary>
            Always True.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableList.SupportsSearching">
            <summary>
            Always False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableList.SortDirection">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.DataTableList.ListChanged">
            <summary>
            Broadcasts the <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableList.SupportsChangeNotification">
            <summary>
            Always True.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableList.AllowEdit">
            <summary>
            Always True.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableList.IsReadOnly">
            <summary>
            Always False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableList.Item(System.Int32)">
            <summary>
            Returns the element at the zero-based index. 
            Setting is not supported and will throw an exception since the collection is Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableList.System#Collections#IList#IsFixedSize">
            <summary>
            Always False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableList.IsSynchronized">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableList.Count">
            <summary>
            Returns the number of elements contained in the collection. 
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableList.SyncRoot">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableList.AllowItemReference">
            <summary>
            Returns True.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableList.SupportsGroupSorting">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableList.GroupingSortBehavior">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.DataTableList.ColumnChanging">
            <summary>
            Occurs when a grouping column changes.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.DataTableList.RowRemoving">
            <summary>
            Occurs when a row gets removed.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.GroupingColumnChangeEventHandler">
            <summary>
            Used to handle the GroupingColumnChange event.
            </summary>
            <param name="sender">object value.</param>
            <param name="e">event data.</param>
        </member>
        <member name="T:Syncfusion.Grouping.GroupingColumnChangeEventArgs">
            <summary>
            Provides data for the GroupingColumnChanging event.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.GroupingColumnChangeEventArgs.#ctor(System.Object,System.String,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the GroupingColumnChangeEventArgs class.
            </summary>
            <param name="row">The Row of the column with the changing value.</param>
            <param name="column">The Column with the changing value.</param>
            <param name="oldValue">The old value.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="P:Syncfusion.Grouping.GroupingColumnChangeEventArgs.Column">
            <summary>
            Gets Column with a changing value.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.GroupingColumnChangeEventArgs.ProposedValue">
            <summary>
            Gets or sets the proposed new value for the column.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.GroupingColumnChangeEventArgs.Row">
            <summary>
            Gets the row of the column with a changing value.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.GroupingColumnChangeEventArgs.OldValue">
            <summary>
            Gets old value of the column.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.GroupingRowEventHandler">
            <summary>
            Used to handle the GroupingRow event.
            </summary>
            <param name="sender">object value.</param>
            <param name="e">event data</param>
        </member>
        <member name="T:Syncfusion.Grouping.GroupingRowEventArgs">
            <summary>
            Provides data for the GroupingColumnChanging event.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.GroupingRowEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the GroupingColumnChangeEventArgs class.
            </summary>
            <param name="row">The Row of the column with the changing value.</param>
        </member>
        <member name="P:Syncfusion.Grouping.GroupingRowEventArgs.Row">
            <summary>
            Gets the row of the column with a changing value.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.DataTableColumnPropertyDescriptor">
            <summary>
            A custom PropertyDescriptor that is used within a <see cref="T:Syncfusion.Collections.DataTableWrapperList"/> to access
            a DataColumn.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableColumnPropertyDescriptor.#ctor(System.Data.DataColumn)">
            <summary>
            Initializes a new PropertyDescriptor and attaches it to a DataColumn.
            </summary>
            <param name="dataColumn">The data column.</param>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableColumnPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>Indicates whether the component object can be serialized.</summary>
            <param name="component">The component object.</param>
            <returns>returns False.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableColumnPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>Sets a value to the specificed component.</summary>
            <param name="component">The component object.</param>
            <param name="value">New value.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableColumnPropertyDescriptor.ResetValue(System.Object)">
            <summary>Resets the property value of a givne component.</summary>
            <param name="component">The component object.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableColumnPropertyDescriptor.GetValue(System.Object)">
            <summary>Gets the current value of the property on a component.</summary>
            <param name="component">The componenet object.</param>
            <returns>The property value.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableColumnPropertyDescriptor.CanResetValue(System.Object)">
            <summary>Indicates whether resetting an object resets its value.</summary>
            <param name="component">The object to test its reset capability.</param>
            <returns>True if it can be reset, False otherwise.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableColumnPropertyDescriptor.GetHashCode">
            <summary>Serves as a hash function for a particular type.</summary>
            <returns>Hash code.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.DataTableColumnPropertyDescriptor.Equals(System.Object)">
            <summary>Indicates whether the object is equivalent to the given object.</summary>
            <param name="other">Another object to compare.</param>
            <returns>True if they are equivalent; False otherwise.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableColumnPropertyDescriptor.PropertyType">
            <summary>Returns the property type.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableColumnPropertyDescriptor.IsReadOnly">
            <summary>Indicates whether the member is read-only.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableColumnPropertyDescriptor.ComponentType">
            <summary>Returns the type of component.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableColumnPropertyDescriptor.IsBrowsable">
            <summary>Indicates whether the member is browsable.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.DataTableColumnPropertyDescriptor.Column">
            <summary>
            Returns the DataColumn.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.DisplayElementKind">
            <summary>
            Defines various kinds of elements:
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.DisplayElementKind.None">
            <summary>
            Represents None.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.DisplayElementKind.Caption">
            <summary>
            A Caption bar or section.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.DisplayElementKind.Record">
            <summary>
            A Record or Record Row.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.DisplayElementKind.AddNewRecord">
            <summary>
            An AddNew record.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.DisplayElementKind.FilterBar">
            <summary>
            A Filter bar.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.DisplayElementKind.ColumnHeader">
            <summary>
            A Column header row or section.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.DisplayElementKind.StackedHeader">
            <summary>
            A stacked header row or section.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.DisplayElementKind.NestedTable">
            <summary>
            A Nested table.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.DisplayElementKind.Summary">
            <summary>
            A Summary row or section.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.DisplayElementKind.Table">
            <summary>
            A Table element.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.DisplayElementKind.GroupHeader">
            <summary>
            A Group header section.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.DisplayElementKind.GroupFooter">
            <summary>
            A Group footer section.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.DisplayElementKind.RecordPreview">
            <summary>
            A Record preview row.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.DisplayElementKind.GroupPreview">
            <summary>
            A Group preview row.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.DisplayElementKind.Empty">
            <summary>
            An Empty section.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.EmptySection">
            <summary>
            An empty section with 1 visible element. Can be used as a place holder to appear in <see cref="P:Syncfusion.Grouping.Table.DisplayElements"/>. GetYAmountCount will
            return <see cref="P:Syncfusion.Grouping.Table.DefaultEmptySectionHeight"/> of the ParentTable.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.EmptySection.#ctor(Syncfusion.Grouping.Group)">
            <summary>
            Initializes a new section in the specified group.
            </summary>
            <param name="parent">The group this section is created in.</param>
        </member>
        <member name="M:Syncfusion.Grouping.EmptySection.GetVisibleCount">
            <summary>Gets the number of visible elements.</summary>
            <returns>Visible element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.EmptySection.GetYAmountCount">
            <summary>Height for the empty section.</summary>
            <returns>Returns Height.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.EmptySection.InvalidateCounterTopDown(System.Boolean)">
            <summary>Not implemented.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.EmptySection.InvalidateSummariesTopDown">
            <summary>Not implemented.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.EmptySection.InvalidateSummary">
            <summary>Not implemented.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.EmptySection.GetFilteredRecordCount">
            <summary>Gets the number of filtered records.</summary>
            <returns>Filtered record count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.EmptySection.GetElementCount">
            <summary>Gets the number of elements.</summary>
            <returns>Element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.EmptySection.GetRecordCount">
            <summary>Gets the number of records.</summary>
            <returns>Record count.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.EmptySection.Kind">
            <summary>Gets the kind of element.</summary>
            <override/>
        </member>
        <member name="T:Syncfusion.Grouping.IEngineSource">
            <summary>
            Provides the <see cref="M:Syncfusion.Grouping.IEngineSource.GetEngine"/> method that returns
            an <see cref="T:Syncfusion.Grouping.Engine"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.IEngineSource.GetEngine">
            <summary>
            Returns a reference to an <see cref="T:Syncfusion.Grouping.Engine"/>
            </summary>
            <returns>An engine.</returns>
        </member>
        <member name="T:Syncfusion.Grouping.Engine">
            <summary>
            The engine lets you set the main data source for the whole engine. The TableDescriptor will
            pick up the ItemProperties (schema information) from the SourceList and
            table will be intialized at run-time with records from the list.
            </summary>
            <remarks>
            TableDescriptor is browsable. You can modify its collections and properties in the
            designer. <para/>
            By default TableDescriptor is autopopulated. If you do not modify its settings and
            later change the datasource, it will be automatically reinitialized. If you have
            made modifications to TableDescriptor and change the SourceList, the modifications
            will be kept. To discard modifications of a TableDescriptor, you need to explicitly
            call ResetTableDescriptor.<para/>
            Table is dependent on information provided by TableDescriptor and the records from
            SourceList. It is created on the fly and can not be designed with designer.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ShouldSerializeCacheRecordValues">
            <summary>
            Determines if the <see cref="P:Syncfusion.Grouping.Engine.CacheRecordValues"/> has been modified from its
            default state.
            </summary>
            <returns>True if CacheRecordValues was manually modified; </returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ResetCacheRecordValues">
            <summary>
            Resets the <see cref="P:Syncfusion.Grouping.Engine.CacheRecordValues"/> back to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ShouldSerializeTableDirtyOnSourceListReset">
            <summary>
            Determines if the <see cref="P:Syncfusion.Grouping.Engine.TableDirtyOnSourceListReset"/> has been modified from its
            default state.
            </summary>
            <returns>True if TableDirtyOnSourceListReset was manually modified; </returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ResetTableDirtyOnSourceListReset">
            <summary>
            Resets the <see cref="P:Syncfusion.Grouping.Engine.TableDirtyOnSourceListReset"/> back to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ShouldSerializeUseOldUniformChildListRelation">
            <summary>
            Determines whether <see cref="P:Syncfusion.Grouping.Engine.UseOldUniformChildListRelation"/> has been modified and its value should be serialized.
            </summary>
            <returns>True if the content is changed; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ResetUseOldUniformChildListRelation">
            <summary>
            Resets UseOldUniformChildListRelation.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ShouldSerializeUseLazyUniformChildListRelation">
            <summary>
            Determines whether <see cref="P:Syncfusion.Grouping.Engine.UseLazyUniformChildListRelation"/> has been modified and its value should be serialized.
            </summary>
            <returns>True if the content is changed; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ResetUseLazyUniformChildListRelation">
            <summary>
            Resets UseLazyUniformChildListRelation.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ShouldSerializeUseOldListChangedHandler">
            <summary>
            Determines whether <see cref="P:Syncfusion.Grouping.Engine.UseOldListChangedHandler"/> has been modified and its value should be serialized.
            </summary>
            <returns>True if the content is changed; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ResetUseOldListChangedHandler">
            <summary>
            Resets UseOldListChangedHandler;
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ShouldSerializeEnableAutoSize">
            <summary>
            Determines whether <see cref="P:Syncfusion.Grouping.Engine.EnableAutoSize"/> has been modified and its value should be serialized.
            </summary>
            <returns>True if the content is changed; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ResetEnableAutoSize">
            <summary>
            Resets EnableAutoSize;
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ShouldSerializeCultureInfo">
            <summary>
            Determines whether <see cref="P:Syncfusion.Grouping.Engine.Culture"/> has been modified and its value should be serialized.
            </summary>
            <returns>True if the content is changed; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ResetCultureInfo">
            <summary>
            Resets CultureInfo.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.Engine.VerboseEnsureObjectLifeTime">
            <summary>
            Debug helper. Produces a debug log for creation and desctruction of important objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.Engine.HelpTracing">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Grouping.Engine.ThrowExceptionIfSourceListSetEntryNotFound">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.InitializeFrom(Syncfusion.Grouping.Engine)">
            <summary>
            Initializes this object and copies properties from another object. <see cref="E:Syncfusion.Grouping.Engine.PropertyChanging"/>
            and <see cref="E:Syncfusion.Grouping.Engine.PropertyChanged"/> events are raised for every property that is modified. If both
            objects are equal, no events are raised.
            </summary>
            <param name="other">The source object.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.GetName">
            <summary>Returns table descriptor name.</summary>
            <returns>Table descriptor name.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ToString">
            <summary>Returns string representation of the engine.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnQueryRecordMeetsFilterCriteria(Syncfusion.Grouping.QueryRecordMeetsFilterCriteriaEventArgs)">
            <summary>
            Raises the  <see cref="E:Syncfusion.Grouping.Engine.QueryRecordMeetsFilterCriteria"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.QueryRecordMeetsFilterCriteriaEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnPropertyChanged(Syncfusion.Grouping.DescriptorPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.PropertyChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.DescriptorPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnPropertyChanging(Syncfusion.Grouping.DescriptorPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.PropertyChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.DescriptorPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.BumpVersion">
            <summary>
            Increase the <see cref="P:Syncfusion.Grouping.Engine.Version"/> number of this engine.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.GetDesignMode">
            <summary>
            Determines whether the engine is attached to a component or control that is currently being
            designed in the Visual Studio designer.
            </summary>
            <returns>True if the engine is attached to the control being designed; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.#ctor">
            <summary>
            Initializes the new Engine
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnSourceListChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.SourceListChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.GetSourceListBase">
            <summary>
            This virtual method is called when there has previously been no datasource specified and
            a <see cref="M:Syncfusion.Grouping.Engine.GetSourceList"/> call occurs. Override this method to allow retrieving the
            source list on demand.
            </summary>
            <returns>The source list for this engine.</returns>
            <remarks>
            With a GridGroupingControl, the GridEngineBase method overloads this method to bind the engine
            to a datasource on demand. When this method is called, GridEngineBase will locate a CurrencyManager
            based on the given DataSource and DataMember properties. The resulting source list will then be
            passed as an argument to a <see cref="M:Syncfusion.Grouping.Engine.SetSourceList(System.Collections.IEnumerable)"/> method call.
            <para/>
            The reasoning for the way the <see cref="M:Syncfusion.Grouping.Engine.GetSourceListBase"/>, <see cref="M:Syncfusion.Grouping.Engine.GetSourceList"/>,
            <see cref="M:Syncfusion.Grouping.Engine.SetSourceList(System.Collections.IEnumerable)"/>, and <see cref="M:Syncfusion.Grouping.Engine.ShouldReplaceSourceList"/> methods work together is to
            delay initializing the source list until all information has been specified to correctly locate
            the list. This allows the end user to set DataSource and DataMember properties without having to worry
            about the order when the properties are set. It will also ensure that with Windows Forms applications,
            the currency manager context has been initalized.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.HasSourceList">
            <summary>
            Determines if <see cref="M:Syncfusion.Grouping.Engine.SetSourceList(System.Collections.IEnumerable)"/> was called and source list has been set.
            </summary>
            <returns>True if <see cref="M:Syncfusion.Grouping.Engine.SetSourceList(System.Collections.IEnumerable)"/> was called and source list has been set; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.GetSourceList">
            <summary>
            Returns a source list previously specifed with <see cref="M:Syncfusion.Grouping.Engine.SetSourceList(System.Collections.IEnumerable)"/>. If no source list
            was specified or if <see cref="M:Syncfusion.Grouping.Engine.ShouldReplaceSourceList"/> returns True, the virtual <see cref="M:Syncfusion.Grouping.Engine.GetSourceListBase"/>
            method is called and the  resulting source list will then be
            passed as argument to a <see cref="M:Syncfusion.Grouping.Engine.SetSourceList(System.Collections.IEnumerable)"/> method call.
            </summary>
            <returns>The source list for this engine.</returns>
            <remarks>
            The reasoning for the way the <see cref="M:Syncfusion.Grouping.Engine.GetSourceListBase"/>, <see cref="M:Syncfusion.Grouping.Engine.GetSourceList"/>,
            <see cref="M:Syncfusion.Grouping.Engine.SetSourceList(System.Collections.IEnumerable)"/>, and <see cref="M:Syncfusion.Grouping.Engine.ShouldReplaceSourceList"/> methods work together is to
            delay initializing the source list until all information has been specified to correctly locate
            the list. This allows the end user to set DataSource and DataMember properties without having to worry
            about the order when the properties are set. It will also ensure that with Windows Forms applications,
            the currency manager context has been initalized.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ShouldReplaceSourceList">
            <summary>
            Determines if the sourcelist should be reinitialized the next time <see cref="M:Syncfusion.Grouping.Engine.GetSourceList"/> is called.
            </summary>
            <returns>True if the sourcelist should be reinitialized the next time <see cref="M:Syncfusion.Grouping.Engine.GetSourceList"/> is called; False if not.</returns>
            <remarks>
            With a GridGroupingControl, the GridEngineBase method overloads this method and returns
            True if either the DataSource or DataMember property was changed.
            <para/>
            The reasoning for the way the <see cref="M:Syncfusion.Grouping.Engine.GetSourceListBase"/>, <see cref="M:Syncfusion.Grouping.Engine.GetSourceList"/>,
            <see cref="M:Syncfusion.Grouping.Engine.SetSourceList(System.Collections.IEnumerable)"/>, and <see cref="M:Syncfusion.Grouping.Engine.ShouldReplaceSourceList"/> methods work together is to
            delay initializing the source list until all information has been specified to correctly locate
            the list. This allows the end user to set DataSource and DataMember properties without having to worry
            about the order when the properties are set. It will also ensure that with Windows Forms applications,
            the currency manager context has been initalized.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.SetSourceList(System.Collections.IEnumerable)">
            <summary>
            Initalizes the the source list for the engine.
            </summary>
            <param name="value">The new source list for the engine.</param>
            <remarks>
            If the passed in source list is the same as a previous <see cref="M:Syncfusion.Grouping.Engine.SetSourceList(System.Collections.IEnumerable)"/> call, the
            method will return without change to avoid duplicate initialization of the same list.
            <para/>
            The <see cref="P:Syncfusion.Grouping.Engine.Table"/> will be reinitialized and the <see cref="M:Syncfusion.Grouping.SourceListDescriptor.SetItemProperties(System.Object)"/>
            of the <see cref="T:Syncfusion.Grouping.TableDescriptor"/> is called. A <see cref="E:Syncfusion.Grouping.Engine.SourceListChanged"/> event is raised.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.WireSourceList">
            <summary>
            This method is called after the source list has been attached.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.UnwireSourceList">
            <summary>
            This method is called before the source list is detached.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ShouldSerializeTableDescriptor">
            <summary>
            Determines if the <see cref="P:Syncfusion.Grouping.Engine.TableDescriptor"/> has been modified from its
            default state.
            </summary>
            <returns>True if TableDescriptor was manually modified; False if it only contains auto-populated
            data.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.Reset">
            <summary>
            Is triggered when the reset the values
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ResetTableDescriptor">
            <summary>
            Resets the <see cref="P:Syncfusion.Grouping.Engine.TableDescriptor"/> back to its
            default state and auto-populates schema information on demand.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnTableDescriptorCreated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.TableDescriptorCreated"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnTableCreated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.TableCreated"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ResetTable">
            <summary>
            Resets the table.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ShouldSerializeTable">
            <summary>
            Determines if the <see cref="P:Syncfusion.Grouping.Engine.Table"/> object was created.
            </summary>
            <returns>True if the <see cref="P:Syncfusion.Grouping.Engine.Table"/> object was created; False if it is NULL</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateAddNewRecord(Syncfusion.Grouping.AddNewRecordSection)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.AddNewRecord"/> element.
            </summary>
            <param name="parent">The parent section.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateAddNewRecordSection(Syncfusion.Grouping.Group)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.AddNewRecordSection"/> element.
            </summary>
            <param name="parent">The parent group.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateCaptionSection(Syncfusion.Grouping.Group)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.CaptionSection"/> element.
            </summary>
            <param name="parent">The parent group.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateCaptionRow(Syncfusion.Grouping.CaptionSection)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.CaptionRow"/> element.
            </summary>
            <param name="parent">The parent section.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateFilterBarRow(Syncfusion.Grouping.FilterBarSection)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.FilterBarRow"/> element.
            </summary>
            <param name="parent">The parent section.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateChildTable(Syncfusion.Grouping.Element)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.ChildTable"/> element.
            </summary>
            <param name="parent">The parent element.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateColumnHeaderRow(Syncfusion.Grouping.ColumnHeaderSection)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.ColumnHeaderRow"/> element.
            </summary>
            <param name="parent">The parent section.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateColumnHeaderSection(Syncfusion.Grouping.Group)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.ColumnHeaderSection"/> element.
            </summary>
            <param name="parent">The parent group.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateEmptySection(Syncfusion.Grouping.Group)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.EmptySection"/> element.
            </summary>
            <param name="parent">The parent group.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateFilterBarSection(Syncfusion.Grouping.Group)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.FilterBarSection"/> element.
            </summary>
            <param name="parent">The parent group.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateGroup(Syncfusion.Grouping.Section)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.Group"/> element.
            </summary>
            <param name="parent">The parent section.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateGroupFooterSection(Syncfusion.Grouping.Group)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.GroupFooterSection"/> element.
            </summary>
            <param name="parent">The parent group.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateGroupPreviewSection(Syncfusion.Grouping.Group)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.GroupPreviewSection"/> element.
            </summary>
            <param name="parent">The parent group.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateGroupHeaderSection(Syncfusion.Grouping.Group)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.GroupHeaderSection"/> element.
            </summary>
            <param name="parent">The parent group.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateGroupsDetails(Syncfusion.Grouping.Group)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.GroupsDetails"/> element.
            </summary>
            <param name="parent">The parent group.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateNestedTable(Syncfusion.Grouping.RecordNestedTablesPart)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.NestedTable"/> element.
            </summary>
            <param name="parent">The parent element.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateRecord(Syncfusion.Grouping.Table)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.Record"/> element.
            </summary>
            <param name="parentTable">The parent table.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateRecordNestedTablesPart(Syncfusion.Grouping.Record)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.RecordNestedTablesPart"/> element.
            </summary>
            <param name="parent">The parent record.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateRecordRow(Syncfusion.Grouping.RecordRowsPart)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.RecordRow"/> element.
            </summary>
            <param name="parent">The parent element.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateRecordRowsPart(Syncfusion.Grouping.Record)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.RecordRowsPart"/> element.
            </summary>
            <param name="parent">The parent record.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateRecordPreviewRowsPart(Syncfusion.Grouping.Record)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.RecordPreviewRowsPart"/> element.
            </summary>
            <param name="parent">The parent record.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateRecordPreviewRow(Syncfusion.Grouping.RecordPreviewRowsPart)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.RecordPreviewRow"/> element.
            </summary>
            <param name="parent">The parent element.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateRecordsDetails(Syncfusion.Grouping.Group)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.RecordsDetails"/> element.
            </summary>
            <param name="parent">The parent group.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateRowElementsSection(Syncfusion.Grouping.Group)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.RowElementsSection"/> element.
            </summary>
            <param name="parent">The parent group.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateSummarySection(Syncfusion.Grouping.Group)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.Section"/> element.
            </summary>
            <param name="parent">The parent group.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateTable(Syncfusion.Grouping.TableDescriptor)">
            <overload>
            Creates a <see cref="P:Syncfusion.Grouping.Engine.Table"/> element for the specified <see cref="P:Syncfusion.Grouping.Engine.TableDescriptor"/>.
            </overload>
            <summary>
            Creates a <see cref="P:Syncfusion.Grouping.Engine.Table"/> element for the specified <see cref="P:Syncfusion.Grouping.Engine.TableDescriptor"/>.
            </summary>
            <param name="tableDescriptor">The <see cref="P:Syncfusion.Grouping.Engine.TableDescriptor"/> with schema information for the table.</param>
            <returns>A new <see cref="P:Syncfusion.Grouping.Engine.Table"/> object.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateTable(Syncfusion.Grouping.TableDescriptor,Syncfusion.Grouping.Table)">
            <summary>
            Creates a <see cref="P:Syncfusion.Grouping.Engine.Table"/> element for the specified <see cref="P:Syncfusion.Grouping.Engine.TableDescriptor"/> and parent table.
            </summary>
            <param name="tableDescriptor">The <see cref="P:Syncfusion.Grouping.Engine.TableDescriptor"/> with schema information for the table.</param>
            <param name="parentTable">The parent table that has a relation with this new table.</param>
            <returns>A new <see cref="P:Syncfusion.Grouping.Engine.Table"/> object.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateTableDescriptor(Syncfusion.Grouping.RelationDescriptor)">
            <summary>
            Creates a <see cref="P:Syncfusion.Grouping.Engine.TableDescriptor"/> that belongs to the specified <see cref="T:Syncfusion.Grouping.RelationDescriptor"/>.
            </summary>
            <param name="parentRelation">The <see cref="T:Syncfusion.Grouping.RelationDescriptor"/> that holds this <see cref="P:Syncfusion.Grouping.Engine.TableDescriptor"/>. If it is NULL,
            the return <see cref="P:Syncfusion.Grouping.Engine.TableDescriptor"/> is the main TableDescripor and has no parent relation.</param>
            <returns>A new <see cref="P:Syncfusion.Grouping.Engine.TableDescriptor"/> object.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateExpressionFieldEvaluator(Syncfusion.Grouping.TableDescriptor)">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.ExpressionFieldEvaluator"/> that is bound to the specified <see cref="P:Syncfusion.Grouping.Engine.TableDescriptor"/>
            and provides routines for parsing and evaluating formula expressions in fields.
            </summary>
            <param name="tableDescriptor">The <see cref="P:Syncfusion.Grouping.Engine.TableDescriptor"/> this object is is bound to.</param>
            <returns>A new <see cref="T:Syncfusion.Grouping.ExpressionFieldEvaluator"/>.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.CreateRelationDescriptor">
            <summary>
            Creates a <see cref="T:Syncfusion.Grouping.RelationDescriptor"/>.
            </summary>
            <returns>A new <see cref="T:Syncfusion.Grouping.RelationDescriptor"/>.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.GetTableDescriptor(System.String)">
            <summary>
            Returns the main table descriptor or a table descriptor of any nested relation that matches the
            specified name.
            </summary>
            <param name="name">The name of the table descriptor to search.</param>
            <returns>The table descriptor or NULL if not found.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnExceptionRaised(Syncfusion.Grouping.ExceptionRaisedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.ExceptionRaised"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.ExceptionRaisedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnGroupCollapsing(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.GroupCollapsing"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnGroupCollapsed(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.GroupCollapsed"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnGroupExpanding(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.GroupExpanding"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnGroupExpanded(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.GroupExpanded"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnRecordCollapsing(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.RecordCollapsing"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnRecordCollapsed(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.RecordCollapsed"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnRecordExpanding(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.RecordExpanding"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnRecordExpanded(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.RecordExpanded"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnRecordDeleting(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.RecordDeleting"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnRecordDeleted(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.RecordDeleted"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnCurrentRecordContextChange(Syncfusion.Grouping.CurrentRecordContextChangeEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.CurrentRecordContextChange"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.CurrentRecordContextChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnCurrentRecordManagerReset(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.CurrentRecordManagerReset"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.TableEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnGroupSummaryInvalidated(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.GroupSummaryInvalidated"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnSourceListListChanged(Syncfusion.Grouping.TableListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.SourceListListChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.TableListChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnSourceListListChangedCompleted(Syncfusion.Grouping.TableListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.SourceListListChangedCompleted"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.TableListChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnSourceListRecordChanged(Syncfusion.Grouping.RecordChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.SourceListRecordChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnSourceListRecordChanging(Syncfusion.Grouping.RecordChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.SourceListRecordChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnGroupAdded(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.GroupAdded"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnGroupRemoving(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.GroupRemoving"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnSortingItemsInGroup(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.SortingItemsInGroup"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnSortedItemsInGroup(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.SortedItemsInGroup"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnInvalidatingCounters(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.InvalidatingCounters"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.TableEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnInvalidatingSummaries(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.InvalidatingSummaries"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.TableEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnCategorizingRecords(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.CategorizingRecords"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.TableEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnCategorizedRecords(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.CategorizedRecords"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.TableEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnTableSourceListChanged(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.SourceListChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.TableEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnRecordValueChanging(Syncfusion.Grouping.RecordValueChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.RecordValueChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordValueChangingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnRecordValueChanged(Syncfusion.Grouping.RecordValueChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.RecordValueChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordValueChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnDisplayElementChanging(Syncfusion.Grouping.DisplayElementChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.DisplayElementChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.DisplayElementChangingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnDisplayElementChanged(Syncfusion.Grouping.DisplayElementChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.DisplayElementChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.DisplayElementChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnSelectedRecordsChanging(Syncfusion.Grouping.SelectedRecordsChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.SelectedRecordsChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.SelectedRecordsChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnSelectedRecordsChanged(Syncfusion.Grouping.SelectedRecordsChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.SelectedRecordsChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.SelectedRecordsChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnQueryValue(Syncfusion.Grouping.FieldValueEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.QueryValue"/> event
            </summary>
            <param name="e">The <see cref="T:Syncfusion.Grouping.FieldValueEventArgs"/> with event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.RaiseQueryValue(Syncfusion.Grouping.FieldValueEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.QueryValue"/> event.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.Grouping.FieldValueEventArgs"/> with event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnSaveValue(Syncfusion.Grouping.FieldValueEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.SaveValue"/> event.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.Grouping.FieldValueEventArgs"/> with event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.RaiseSaveValue(Syncfusion.Grouping.FieldValueEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.SaveValue"/> event.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.Grouping.FieldValueEventArgs"/> with event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnQueryShowNestedPropertiesFields(Syncfusion.Grouping.QueryShowNestedPropertiesFieldsEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.QueryShowNestedPropertiesFields"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.QueryShowNestedPropertiesFieldsEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.RaiseQueryShowNestedPropertiesFields(Syncfusion.Grouping.QueryShowNestedPropertiesFieldsEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.QueryShowNestedPropertiesFields"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.QueryShowNestedPropertiesFieldsEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnQueryShowField(Syncfusion.Grouping.QueryShowFieldEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.QueryShowField"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.QueryShowFieldEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.RaiseQueryShowField(Syncfusion.Grouping.QueryShowFieldEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.QueryShowField"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.QueryShowFieldEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnQueryShowRelationDisplayFields(Syncfusion.Grouping.QueryShowRelationFieldsEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.QueryShowRelationDisplayFields"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.QueryShowRelationFieldsEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.RaiseQueryShowRelationDisplayFields(Syncfusion.Grouping.QueryShowRelationFieldsEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.QueryShowRelationDisplayFields"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.QueryShowRelationFieldsEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.OnQueryAddRelation(Syncfusion.Grouping.QueryAddRelationEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.QueryAddRelation"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.QueryAddRelationEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.RaiseQueryAddRelation(Syncfusion.Grouping.QueryAddRelationEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Engine.QueryAddRelation"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.QueryAddRelationEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.EnumerateTables">
            <summary>
            For internal use.
            </summary>
            <returns>returns EngineTableEnumerable</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.EnumerateTableDescriptor">
            <summary>
            For internal use.
            </summary>
            <returns>returns EngineTableDescriptorEnumerable</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ShouldSerializeMaxNestedFieldRecurseLevel">
            <summary>
            Determines whether <see cref="P:Syncfusion.Grouping.Engine.MaxNestedFieldRecurseLevel"/> has been modified
            and its value should be serialized at design-time.
            </summary>
            <returns>true if contents were changed; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ResetMaxNestedFieldRecurseLevel">
            <summary>
            Resets the <see cref="P:Syncfusion.Grouping.Engine.MaxNestedFieldRecurseLevel"/> property back to its default value <see cref="P:Syncfusion.Grouping.Engine.AbortNestedFieldsRecursionLevel"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ShouldSerializeMaxNestedCollectionRecurseLevel">
            <summary>
            Determines whether <see cref="P:Syncfusion.Grouping.Engine.MaxNestedCollectionRecurseLevel"/> has been modified
            and its value should be serialized at design-time.
            </summary>
            <returns>true if contents were changed; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Engine.ResetMaxNestedCollectionRecurseLevel">
            <summary>
            Resets the <see cref="P:Syncfusion.Grouping.Engine.MaxNestedCollectionRecurseLevel"/> property back to its default value <see cref="P:Syncfusion.Grouping.Engine.AbortNestedCollectionsRecursionLevel"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.ShouldCreateRecordWithCache">
            <summary>
            Returns true if underlying datasource does not raise ColumnChanging events
            and therefore the record should cached old values in order to be able
            to compare values when a ListChanged event is handled. The property
            returns the value of CacheRecordValues if you explicitly set the <see cref="P:Syncfusion.Grouping.Engine.CacheRecordValues"/> property
            thus allowing you to ovveride the default caching behavior of the engine.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.AllowSetRelatedTablesDirty">
            <summary>
            Gets or sets whether related tables are set dirty when the parent table receives a 
            ListChangedType.Reset in its ListChanged event. The default value is true.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.CacheRecordValues">
            <summary>
            Gets / sets if the engine should cache copies of the old values from a record in the record object.
            You can access these values with the Record.GetOldValue method. Setting this property will override
            the default value returned by <see cref="P:Syncfusion.Grouping.Engine.ShouldCreateRecordWithCache"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.TableDirtyOnSourceListReset">
            <summary>
            Gets / sets if the engine should set <see cref="P:Syncfusion.Grouping.Engine.TableDirtyOnSourceListReset"/> to true when the data source
            raises a ListChanged event with ListChangedType.Reset notification. The default is false.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.ShowDefaultValuesInAddNewRecord">
            <summary>
            Gets / sets if the default value for fields in the AddNewRecord should be shown when it is not in edit-mode. If 
            the ShowDefaultValuesInAddNewRecord is false then the default values will only be assigned when
            AddNewRecord.BeginEdit is called. Prior calls to AddNewRecord will return no value in that case.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.UseInvariantCulture">
            <summary>
            Gets or sets whether numbers and dates in expressions should be in invariant format or UI culture dependant format
            </summary>
            <remarks>
            In invariant format numbers and dates are always in english format, e.g. use a '.' as decimal separator and dates in format mm/dd/yy.
            In UI culture dependant format the decimal separator can be a ',' or some other setting specified in CultureInfo.CurrentUICulture.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.DefaultUseOldUniformChildListRelation">
            <summary>
            With version 4.2 the engine changed the way how UniformChildList relations are handled internally
            to fix short-comings of the design that was in place earlier. This property lets you switch back
            the behavior of the engine to the old mechanism if you notice compatibility issues. This static member
            defines the defaut value for the instance-specific UseOldUniformChildListRelation property for all
            engines in your application.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.UseOldUniformChildListRelation">
            <summary>
            With version 4.2 the engine changed the way how UniformChildList relations are handled internally
            to fix short-comings of the design that was in place earlier. This property lets you switch back
            the behavior of the engine to the old mechanism if you notice compatibility issues. The default value is false.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.DefaultUseLazyUniformChildListRelation">
            <summary>
            When you use the new UniformChildList behavior (i.e. when UseOldUniformChildListRelation = false) 
            you can specify with this UseLazyUniformChildListRelation property whether the engine should 
            access and enumerate the child collections only once the user expands a record.
            This will speed up load time of the grid and reduce memory usage when not all records 
            get expanded.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.UseLazyUniformChildListRelation">
            <summary>
            When you use the new UniformChildList behavior (i.e. when UseOldUniformChildListRelation = false) 
            you can specify with this UseLazyUniformChildListRelation property whether the engine should 
            access and enumerate the child collections only once the user expands a record.
            This will speed up load time of the grid and reduce memory usage when not all records 
            get expanded.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.DefaultUseOldListChangedHandler">
            <summary>
            With version 4.4 the engine changed the way how the ListChanged event is handled internally
            to fix short-comings with performance of the code that was in place earlier. This property 
            lets you switch back
            the behavior of the engine to the old mechanism if you notice compatibility issues. This static member
            defines the defaut value for the instance-specific UseOldListChangedHandler property for all
            engines in your application.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.UseOldListChangedHandler">
            <summary>
            With version 4.4 the engine changed the way how the ListChanged event is handled internally
            to fix short-comings with performance of the code that was in place earlier. This property 
            lets you switch back
            the behavior of the engine to the old mechanism if you notice compatibility issues. The default value is false.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.DefaultEnableAutoSize">
            <summary>
            <summary>
            Gets or Sets whether AutoSize behavior should be enabled.        
            </summary>
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.EnableAutoSize">
            <summary>
            Gets or Sets whether AutoSize behavior should be enabled.        
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.RaiseSourceListChangedEventsOnEngineOnly">
            <summary>
            When the engine handles the ListChanged event it will itsself raise numerous events. When set
            to true this the events will only be raised on the Engine object. If set to false
            then events will also be raised on inner objects (will bubble up on nested tables which
            caused some performance overhead). Property will only have effect if UseOldListChangedHandler = false.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.Culture">
            <summary>
            Gets or sets the the culture information which holds rules for parsing and formatting numbers and dates
            in expression fields.
            </summary>
            <remarks>
            In invariant format numbers and dates are always in english format, e.g. use a '.' as decimal separator and dates in format mm/dd/yy.
            In UI culture dependant format the decimal separator can be a ',' or some other setting specified in CultureInfo.CurrentUICulture.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.PropertyChanged">
            <summary>
            Occurs when a property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.PropertyChanging">
            <summary>
            Occurs before a property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.InInitializeFrom">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.IsDynamicData">
            <summary>
            Gets or Sets whether the bounded datasource is composed of dynamic objects. Applicable only for .NET Framework 4.0 and later.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.ForwardTableEvents">
            <summary>
            Gets / sets a object that handles events raised by contained <see cref="P:Syncfusion.Grouping.Engine.Table"/> objects.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.QueryRecordMeetsFilterCriteria">
            <summary>
            Occurs when a record is checked whether it meets filter criteria and should appear visible in the tables DisplayElements.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.SourceListSet">
            <summary>
            A reference to the <see cref="P:Syncfusion.Grouping.Engine.SourceListSet"/> that maintains a collection
            of IList or DataTables that are used by main table or related tables as datasources.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.Version">
            <summary>
            The version number of this engine. The version is increased each time the
            engine (or any container schema descriptor) was modified.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.SourceListVersion">
            <summary>
            The version number for the underlying data source. This number is increased each time
            <see cref="M:Syncfusion.Grouping.Engine.SetSourceList(System.Collections.IEnumerable)"/> is called.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.SourceListChanged">
            <summary>
            Occurs after the main data source was replaced with a <see cref="M:Syncfusion.Grouping.Engine.SetSourceList(System.Collections.IEnumerable)"/> method call.
            </summary>
            <remarks>
            With a GridGroupingControl when you set the data source and data member, the <see cref="M:Syncfusion.Grouping.Engine.SetSourceList(System.Collections.IEnumerable)"/> method
            will be called on demand the first time data or schema information needs to be retrieved.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.InSetSourceList">
            <summary>
            Returns True when the <see cref="M:Syncfusion.Grouping.Engine.SetSourceList(System.Collections.IEnumerable)"/> method is called and False after the method returns.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.InSourceListChanged">
            <summary>
            Returns True when the <see cref="E:Syncfusion.Grouping.Engine.SourceListChanged"/> event is raised and False after the event returns.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.TableDescriptor">
            <summary>
            Maintains the table schema information of the root table in the datasource.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.TableDescriptorCreated">
            <summary>
            Occurs after the <see cref="P:Syncfusion.Grouping.Engine.TableDescriptor"/> object is created.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.TableCreated">
            <summary>
            Occurs after the <see cref="P:Syncfusion.Grouping.Engine.Table"/> object is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.Table">
            <summary>
            The Table object manages the records from the engine's DataSource and
            provides access to records and grouped elements through several
            collection classes, most prominent the <see cref="T:Syncfusion.Grouping.DisplayElementsInTableCollection"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.RecordAsDisplayElements">
            <summary>
            Set this True if you do not want the engine to treat Record and ColumnHeaderSection
            elements as ContainerElements and instead have these elements be returned as
            a display element in the Table.DisplayElements collection.
            </summary>
            <remarks>
            With a GridGroupingControl, you must not change this property since a GridGroupingControl
            relies on the behavior that a record is not a display element but a container for rows
            and nested tables.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.ExceptionRaised">
            <summary>
            Occurs when an unknown exception has been cached while modifying underlying data in the datasource.
            </summary>
            <remarks>
            If necessary, you can rethrow the exception in your event handler.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.GroupCollapsing">
            <summary>
            Occurs before a group is collapsed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.GroupCollapsed">
            <summary>
            Occurs after a group is collapsed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.GroupExpanding">
            <summary>
            Occurs before a group is expanded.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.GroupExpanded">
            <summary>
            Occurs after a group is expanded.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.RecordCollapsing">
            <summary>
            Occurs before a record with nested tables is collapsed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.RecordCollapsed">
            <summary>
            Occurs after a record with nested tables is collapsed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.RecordExpanding">
            <summary>
            Occurs before a record with nested tables is expanded.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.RecordExpanded">
            <summary>
            Occurs after a record with nested tables is expanded.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.RecordDeleting">
            <summary>
            Occurs before a record is deleted.
            </summary>
            <remarks>
            This event is raised only when the <see cref="P:Syncfusion.Grouping.Engine.Table"/> or <see cref="T:Syncfusion.Grouping.Record"/> triggers the deletion. If
            the underlying source list deletes the record, a <see cref="E:Syncfusion.Grouping.Engine.SourceListListChanged"/> event is raised instead.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.RecordDeleted">
            <summary>
            Occurs after a record is deleted.
            </summary>
            <remarks>
            This event is raised only when the <see cref="P:Syncfusion.Grouping.Engine.Table"/> or <see cref="T:Syncfusion.Grouping.Record"/> triggers the deletion. If
            the underlying source list deletes the record, a <see cref="E:Syncfusion.Grouping.Engine.SourceListListChanged"/> event is raised instead.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.CurrentRecordContextChange">
            <summary>
            Occurs before and after the status of the current record was changed. Check the <see cref="P:Syncfusion.Grouping.CurrentRecordContextChangeEventArgs.Action"/>
            of the <see cref="T:Syncfusion.Grouping.CurrentRecordContextChangeEventArgs"/> to get information which current record state was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.CurrentRecordManagerReset">
            <summary>
            Occurs when the <see cref="M:Syncfusion.Grouping.CurrentRecordManager.Reset"/> method of the <see cref="T:Syncfusion.Grouping.CurrentRecordManager"/> was called.
            </summary>
            <remarks>
            The GridGroupingControl listens to this event and resets any "Current Cell" state when this
            event was raised.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.GroupSummaryInvalidated">
            <summary>
            Occurs when a summary has been marked dirty.
            </summary>
            <remarks>
            The GridGroupingControl listens to this event and forces a repaint of the specified summary if it is visible
            when this event was raised.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.SourceListListChanged">
            <summary>
            Occurs before the <see cref="P:Syncfusion.Grouping.Engine.Table"/> processes the <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> event
            of an attached source list. More detailed <see cref="E:Syncfusion.Grouping.Engine.SourceListRecordChanged"/> events will be
            raised after this event.
            </summary>
            <remarks>
            The reason for firing this event is to give a programmer the chance to react to a <see cref="E:System.ComponentModel.IBindingList.ListChanged"/>
            event before the engine since there is otherwise no order guaranteed when an IBindingList raises a ListChanged
            event.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.SourceListListChangedCompleted">
            <summary>
            Occurs after the <see cref="P:Syncfusion.Grouping.Engine.Table"/> processes the <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> event
            of an attached source list.
            </summary>
            <remarks>
            The reason for firing this event is to give a programmer the chance to react to a <see cref="E:System.ComponentModel.IBindingList.ListChanged"/>
            event right after the engine since there is otherwise no order guaranteed when an IBindingList raises a ListChanged
            event.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.SourceListRecordChanged">
            <summary>
            Occurs when a record in the underlying data source is added, removed, or changed and after
            the <see cref="P:Syncfusion.Grouping.Engine.Table"/> is updated with that change.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.SourceListRecordChanging">
            <summary>
            Occurs when a record in the underlying data source is added, removed, or changed and before
            the <see cref="P:Syncfusion.Grouping.Engine.Table"/> is updated with that change.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.GroupAdded">
            <summary>
            Occurs when a new group is added in a table after the table is categorized and when a record is changed. The event does not
            occur during categorization of the table. See the <see cref="E:Syncfusion.Grouping.Engine.CategorizedRecords"/> elements to when categorization
            finishes.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.GroupRemoving">
            <summary>
            Occurs when a group is removed from a table after the table is categorized and when a record is changed. The event does not
            occur during categorization of the table. See the <see cref="E:Syncfusion.Grouping.Engine.CategorizedRecords"/> elements to when categorization
            finishes.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.SortingItemsInGroup">
            <summary>
            Occurs before the records for a group are sorted.
            </summary>
            <remarks>
            The engine has a built-in optimization for sorting columns that allows it to perform the sorting
            on an on-demand basis group-by-group. Suppose you have a table with 200 different countries and
            you change the sort order of city. It is not necessary to sort the whole table. Instead
            the individual groups can be sorted when they are scrolled into view. SortingItemsInGroup and
            SortedItemsInGroup events are fired in such cases when a specific group is sorted on demand.
            <para/>
            If the whole table was set dirty (see <see cref="P:Syncfusion.Grouping.Table.TableDirty"/>), then the whole table
            is simply recategorized. In that case only a CategorizedElements event is raised but no
            SortingItemsInGroup event.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.SortedItemsInGroup">
            <summary>
            Occurs after the records for a group are sorted.
            </summary>
            <remarks>
            The engine has a built-in optimization for sorting columns that allows it to perform the sorting
            on an on-demand basis group-by-group. Suppose you have a table with 200 different countries and
            you change the sort order of city. It is not necessary to sort the whole table. Instead
            the individual groups can be sorted when they are scrolled into view. SortingItemsInGroup and
            SortedItemsInGroup  events are fired in such case when a specific group was sorted on demand.
            <para/>
            If the whole table was set dirty (see <see cref="P:Syncfusion.Grouping.Table.TableDirty"/>), then the whole table
            is simply recategorized. In that case only a CategorizedElements event is raised but no
            SortedItemsInGroup event.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.InvalidatingCounters">
            <summary>
            Occurs when the <see cref="M:Syncfusion.Grouping.Table.InvalidateCounterTopDown(System.Boolean)"/> of a <see cref="P:Syncfusion.Grouping.Engine.Table"/> is called
            and before all counters are marked dirty.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.InvalidatingSummaries">
            <summary>
            Occurs when the <see cref="M:Syncfusion.Grouping.Table.InvalidateSummariesTopDown"/> of a <see cref="P:Syncfusion.Grouping.Engine.Table"/> is called
            and before all summaries in that table are marked dirty.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.CategorizingRecords">
            <summary>
            Occurs before records are categorized after a table is marked dirty (<see cref="P:Syncfusion.Grouping.Table.TableDirty"/>).
            </summary>
            <remarks>
            When <see cref="P:Syncfusion.Grouping.Table.TableDirty"/> is set to True, e.g. because schema information for a table was changed
            or because the grouped columns were changed, the table will categorize records on demand the first time
            information about a record is accessed. At that time, the <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object)"/> of the <see cref="P:Syncfusion.Grouping.Engine.Table"/> will start
            categorization.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.CategorizedRecords">
            <summary>
            Occurs after records are categorized when a table is marked dirty (<see cref="P:Syncfusion.Grouping.Table.TableDirty"/>).
            </summary>
            <remarks>
            When <see cref="P:Syncfusion.Grouping.Table.TableDirty"/> is set True, e.g. because schema information for a table was changed
            or because the grouped columns were changed, the table will categorize records on demand the first time
            information about a record is accessed. At that time, the <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object)"/> of the <see cref="P:Syncfusion.Grouping.Engine.Table"/>
            will start
            categorization.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.TableSourceListChanged">
            <summary>
            Occurs after the datasource is replaced.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.RecordValueChanging">
            <summary>
            Occurs when a RecordFieldCell cell's value is changed and before Record.SetValue is called.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.RecordValueChanged">
            <summary>
            Occurs when a RecordFieldCell cell's value is changed and after Record.SetValue is returned.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.DisplayElementChanging">
            <summary>
            When number of visible elements are changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.DisplayElementChanged">
            <summary>
            When number of visible elements are changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.SelectedRecordsChanging">
            <summary>
            Occurs after the <see cref="P:Syncfusion.Grouping.Table.SelectedRecords"/> collection was modified.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.SelectedRecordsChanged">
            <summary>
            Occurs after the <see cref="P:Syncfusion.Grouping.Table.SelectedRecords"/> collection was modified.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.AllowSwapDataViewWithDataTableList">
            <summary>
            Gets / sets if the engine can wrap access to a DataTable with a <see cref="T:Syncfusion.Grouping.DataTableList"/> which provides
            optimized access to the rows of the DataTable. <para/>
            The Engine will access a DataTable through this wrapper class instead of accessing records through the DataTable.DefaultView
            to increase performance when adding, removing and changing records when <see cref="P:Syncfusion.Grouping.Engine.AllowSwapDataViewWithDataTableList"/>
            is enabled. Default is False.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.QueryValue">
            <summary>
            Occurs when a value for a field descriptor and record is returned. See the Grid\Grouping\Samples\CustomSummary
            sample how to use this event with unbound field descriptors.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.SaveValue">
            <summary>
            Occurs when values for a field descriptor and record are saved. See the Grid\Grouping\Samples\CustomSummary
            sample how to use this event with unbound field descriptors.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.ShowNestedPropertiesFields">
            <summary>
            This property affects the autopopulation of the FieldDescriptorCollection. <para/>
            It specifies if individual fields should be added for every property of a type
            when a type has nested properties. You can also control this behavior at run-time
            with the QueryShowNestedPropertiesFields event. Default is True.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.QueryShowNestedPropertiesFields">
            <summary>
            This event affects the autopopulation of the FieldDescriptorCollection. <para/>
            It lets you control at run-time if individual fields should be added for every property of a type
            when a type has nested properties. You can set e.Cancel = true to avoid nested fields
            being generated for a specific type.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.QueryShowField">
            <summary>
            This event affects the autopopulation of the FieldDescriptorCollection. <para/>
            It is called for each field and lets you control at run-time if a specific field should be added
            to the FieldDescriptorCollection. You can set e.Cancel = True to avoid specific fields
            being added.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.ShowRelationFields">
            <summary>
            This property affects the autopopulation of the FieldDescriptorCollection. <para/>
            It specifies if dependent fields from a related table in a foreign key relation (or related collection)
            should be added to the
            main tables FieldDescriptorCollection. You can also control this behavior at run-time
            with the QueryShowRelationDisplayFields event. Default is ShowRelationFields.ShowDisplayFieldsOnly.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.QueryShowRelationDisplayFields">
            <summary>
            This event affects the autopopulation of the FieldDescriptorCollection. <para/>
            It is called for each foreign key relation and lets you control at run-time if the related fields of the
            child table should be added to the FieldDescriptorCollection. You can set e.Cancel = True to avoid specific fields
            being added.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Engine.QueryAddRelation">
            <summary>
            This event affects the autopopulation of the RelationDescriptorCollection. <para/>
            It is called for each relation and lets you control at run-time if the relation
            should be added to the RelationDescriptorCollection. You can set e.Cancel = True to avoid specific
            relations being added.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.AutoPopulateRelations">
            <summary>
            This property affects the autopopulation of the RelationDescriptorCollection. <para/>
            It specifies if relations should be automatically generated when you assign a
            DataSource a DataTable with constraints or a DataSet with relations defined.
            Default is True.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.VersionInfo">
            <summary>
            The assembly version of the GridGroupingControl at the time
            it was dropped onto a form with designer.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.CounterLogic">
            <summary>
            Specifies the counter logic to be used within the engine. If you have a large datasource
            and need support for groups and filtered records you can reduce the memory footprint
            by selectively disabling counters you do not need in your application. <para/>
            See EngineOptimizations.DisableCounters for completely disabling counter logic for the RecordsDetails collection if you do not need
            grouping and filtering. <para/>
            See EngineOptimizations.VirtualMode for using the engine in a virtual mode if you do not
            need support for sorting.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.AllowedOptimizations">
            <summary>
            Specifies optimizations the engine is allowed use when applicable. These optimizations can be used 
            in combination with EngineCounter setting.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.SupportsYAmount">
            <summary>
            Gets the value of the yamount
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.ForceShowCurrentRecord">
            <summary>
            Gets or sets whether the engine should ensure that a record is visible and all its parent
            elements are expanded when setting the current record. The default setting is true.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.SortMappingNames">
            <summary>
            Gets or sets whether the engine should sort mapping names alphabetically
            in the dropdown editors of the property grid. Default is false.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.MaxNestedFieldRecurseLevel">
            <summary>
            Specifies the number of levels to recurse when ShowNestedPropertiesFields is set to true.
            </summary>
            <value>Default value is <see cref="P:Syncfusion.Grouping.Engine.AbortNestedFieldsRecursionLevel"/>. You can reset this property by setting it's value to -1.</value>
            <remarks>
            While AbortNestedFieldsRecursionLevel lets you specify this recursion level
            globally, this property lets you specify it for a particular Engine instance.
            Take a look at AbortNestedFieldsRecursionLevel for more information.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.AbortNestedFieldsRecursionLevel">
            <summary>
            Specifies the amount of recursion allowed when stepping into nested properties of
            a type. Default is 3. 
            </summary>
            <remarks>
            The property is checked by the FieldDescriptor collection to avoid an infinite 
            recursion when two types reference each other as nested properties. <para/>
            If you have a situation where Class1 has a property of type Class2 and Class2 has
            a property of type Class1 it is recommended that you mark one of the properties as
            Browsable(false). If you do not mark it Browsable(false) then the grid will step into
            a recursion and abort this recursion when the level reaches the value specified for 
            MaximumNestedFieldLevel.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.MaxNestedCollectionRecurseLevel">
            <summary>
            Specifies the number of levels to recurse when ShowNestedPropertiesCollections is set to true.
            </summary>
            <value>Default value is <see cref="P:Syncfusion.Grouping.Engine.AbortNestedCollectionsRecursionLevel"/>. You can reset this property by setting it's value to -1.</value>
            <remarks>
            While AbortNestedCollectionsRecursionLevel lets you specify this recursion level
            globally, this property lets you specify it for a particular Engine instance.
            Take a look at AbortNestedCollectionsRecursionLevel for more information.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.AbortNestedCollectionsRecursionLevel">
            <summary>
            Specifies the amount of recursion allowed when stepping into nested collections of
            a type with self-relations. Default is 5.
            </summary>
            <remarks>
            The property is checked by the RelationDescriptor collection to avoid an infinite 
            recursion a type has a self-relations. <para/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.AllowSkipItemChangedWhileEditing">
            <summary>
            A BindingList in .NET 2.0 immeditaley raises a ItemChanged event after each
            change even if BeginEdit was called. The following flag specifies whether 
            to proceed with ItemChanged event handler logic only if the record was 
            modified outside the engine or if the CurrentRecordManager called EndEdit.
            Default is true.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Engine.AllowSaveIntoEditableObjectWhileEditing">
            <summary>
            This flag specifies whether the engine should save a value into
            the current editable row of the underlying datasource when
            BeginEdit was called on a record and the field is modified. Saving the
            value into the row in the datsource has the benefit that
            validation can occur in the datasource immediately once the end-user
            moves to the next cell in the current record. <para/>
            Set this flag to false to save values into the current record
            only at the time EndEdit was called (when the user navigates away from 
            the current record and wants to commit changes.)
            Default is true.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.EngineTableEnumerable">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.EngineTableEnumerable.#ctor(Syncfusion.Grouping.Engine)">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.EngineTableEnumerable.GetEnumerator">
            <summary>
            For internal use.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Grouping.EngineTableDescriptorEnumerable">
            <summary>
            For internal use.
            </summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.EngineTableDescriptorEnumerable.#ctor(Syncfusion.Grouping.Engine)">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.EngineTableDescriptorEnumerable.GetEnumerator">
            <summary>
            For internal use.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Grouping.EngineTableEnumerator">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.EngineTableEnumerator.#ctor(Syncfusion.Grouping.Engine)">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.EngineTableEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.EngineTableEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.EngineTableEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.EngineTableDescriptorEnumerator">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.EngineTableDescriptorEnumerator.#ctor(Syncfusion.Grouping.Engine)">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.EngineTableDescriptorEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.EngineTableDescriptorEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.EngineTableDescriptorEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.EngineCounters">
            <summary>
            Specifies the counter logic to be used within the engine. If you have large datasources
            and need support for groups and filtered records you can reduce the memory footprint
            by selectively disabling counters you do not need in your application. See WithoutCounter
            for completely disabling counter logic for the RecordsDetails collection and  VirtualMode
            for using the engine in a virtual mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.EngineCounters.FilteredRecords">
            <summary>
            Counts visible elements and filtered records. Smallest memory footprint.
            </summary>
            <remarks>
            <list type="bullet">
            <item><term>Table.DisplayElements.GetItemAtYAmount and Table.DisplayElements.GetYAmountPositionOf
            are not supported.</term></item>
            <item><term>The Table.Elements collection will only return visible elements (same resultset as Table.DisplayElements)</term></item>
            <item><term>The Table.Records collection will return only filtered records (same resultset as Table.FilteredRecords)</term></item>
            <item><term>The Group.Records collection will return only filtered records (same resultset as Group.FilteredRecords)</term></item>
            <item><term>Table.DisplayElements.GetVisibleCustomCountPositionOf and Table.DisplayElements.GetItemAtVisibleCustomCount
            are not supported.</term></item>
            <item><term>Table.DisplayElements.GetCustomCountPositionOf and Table.DisplayElements.GetItemAtCustomCount
            are not supported.</term></item>
            </list>
            </remarks>
        </member>
        <member name="F:Syncfusion.Grouping.EngineCounters.YAmount">
            <summary>
            Counts visible elements, filtered records and YAmount. Medium memory footprint. 
            </summary>
            <remarks>
            <list type="bullet">
            <item><term>Table.DisplayElements.GetItemAtYAmount and Table.DisplayElements.YAmountIndexOf
            are supported.</term></item>
            <item><term>The Table.Elements collection will only return visible elements (same resultset as Table.DisplayElements)</term></item>
            <item><term>The Table.Records collection will return only filtered records (same resultset as Table.FilteredRecords)</term></item>
            <item><term>The Group.Records collection will return only filtered records (same resultset as Group.FilteredRecords)</term></item>
            <item><term>Table.DisplayElements.GetVisibleCustomCountPositionOf and Table.DisplayElements.GetItemAtVisibleCustomCount
            are not supported.</term></item>
            <item><term>Table.DisplayElements.GetCustomCountPositionOf and Table.DisplayElements.GetItemAtCustomCount
            are not supported.</term></item>
            </list>
            </remarks>
        </member>
        <member name="F:Syncfusion.Grouping.EngineCounters.All">
            <summary>
            Default. All counters are supported: visible elements, filtered records, YAmount, hidden elements, hidden records, CustomCount and VisibleCustomCount. Highest memory footprint. 
            </summary>
            <remarks>
            <list type="bullet">
            <item><term>Table.DisplayElements.GetItemAtYAmount and Table.DisplayElements.YAmountIndexOf
            are supported.</term></item>
            <item><term>The Table.Elements collection will return all elements (including hidden elements that are not visible)</term></item>
            <item><term>The Table.Records collection will return all records (including records that do not meet filter criteria)</term></item>
            <item><term>The Group.Records collection will return all records (including records that do not meet filter criteria)</term></item>
            <item><term>Table.DisplayElements.GetVisibleCustomCountPositionOf and Table.DisplayElements.GetItemAtVisibleCustomCount
            are supported.</term></item>
            <item><term>Table.DisplayElements.GetCustomCountPositionOf and Table.DisplayElements.GetItemAtCustomCount
            are supported.</term></item>
            </list>
            </remarks>
        </member>
        <member name="T:Syncfusion.Grouping.EngineOptimizations">
            <summary>
            Specifies various optimization the engine can use when applicable. These optimizations can be used 
            in combination with EngineCounter setting. 
            </summary>
            <remarks>
            Allowing certain optimizations does not mean that the optimzation is necessarily used. Optimizations
            will only be used when applicable. Take for example the <see cref="F:Syncfusion.Grouping.EngineOptimizations.VirtualMode"/> optimization. If you
            allow this optimization the engine will check schema settings when loading the table. If there are
            no SortedColumns, RecordFilters, GroupedColumns and no nested relations for a table, then virtual mode
            can be used and no records need to be loaded into memory. If the user later sorts by one column, the
            virtual mode can not be used any more. Records will need to be iterated through and sorted and tree
            structures will be built that allow quick access to records and IndexOf operations. When initializing the
            table the engine will check if criteria for DisableCounters optimization are met.
            </remarks>
        </member>
        <member name="F:Syncfusion.Grouping.EngineOptimizations.None">
            <summary>
            All optimizations are disabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.EngineOptimizations.DisableCounters">
            <summary>
            When the engine detects that a table does not have RecordFilters, GroupedColumns
            or nested relations, counter logic will be disabled for the RecordsDetails collection
            since all counters are in sync with actual records (e.g. all records in datasource
            are shown in TopLevelGroup). With this optimization the engine does still have full
            support for sorting. 
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.EngineOptimizations.VirtualMode">
            <summary>
            When all criteria are met for the <see cref="F:Syncfusion.Grouping.EngineOptimizations.DisableCounters"/> optimization and in addition to that
            no SortedColumns are set, the RecordsDetails collection does not have to be initialized at all.
            Instead, it can create records elements on demand and discard them using regular garbage
            collection when no references to a Record exist any more (e.g. once you scroll them out of view).
            This approach reduces memory footprint to absolute minumum. You should be able to load and
            display millions of records in a table. <para/>
            The PrimaryKey collection is still supported, but it will be initialized only on demand if you
            do access the Table.PrimaryKeyRecords collection. In such case all records will be enumerated. 
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.EngineOptimizations.PassThroughSort">
            <summary>
            When all criteria are met for the <see cref="F:Syncfusion.Grouping.EngineOptimizations.DisableCounters"/> optimization and SortedColumns are set, 
            the engine will normally have to loop through records and sort them. When you specify <see cref="F:Syncfusion.Grouping.EngineOptimizations.PassThroughSort"/>
            the engine will check if the datasource is an IBindingList and if IBindingList.SupportsSort returns true.
            In such case the datasource will be sorted using its IBindingList.Sort routine and the engine will
            access records using VirtualMode. Using the IBindingList is usually a bit faster than the engines own
            sorting routines, but the disadvantage is that you will loose CurrentRecord and SelectedRecords information.
            Also, inserting and removing records will be slower (especially if the underlying datasource is a DataView).
            PassThroughSort will be ignored if criteria are met for the <see cref="F:Syncfusion.Grouping.EngineOptimizations.DisableCounters"/> optimization are not
            met. If you want to force a Pass-through sort mechanism in such case check out the GroupingPerf example. It
            implements the IGroupingList interface. Normally, it is recommended to use the engines own Sort mechanism
            and only rely on PassThroughSort for Virtual mode scenarios.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.EngineOptimizations.RecordsAsDisplayElements">
            <summary>
            When the engine detects that records do not have nested child tables, no record preview rows are being used
            and each record only has one row (no ColumnSets are used), records do not have to be split into RecordParts.
            Instead when qerying the DisplayElements collection for a specific row, the engine can simply
            return a Record element instead of a RecordRow element. The same applies to CaptionSection, ColumnHeaderSection
            and FilterBarSection. Instead of returning a CaptionRow, ColumnHeaderRow or FilterBarRow element
            the DisplayElements collection retuens the section element.
            <para/>
            If you use this optimizaton you need to carefull in your own code and be aware that when you query
            the DisplayElements collection instead of a RecordRow element a Record elemnt can be returned. Same issue
            also with ColumnHeader, FilterBase and Caption.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.EngineOptimizations.All">
            <summary>
            Enables the <see cref="F:Syncfusion.Grouping.EngineOptimizations.DisableCounters"/>, <see cref="F:Syncfusion.Grouping.EngineOptimizations.VirtualMode"/> and <see cref="F:Syncfusion.Grouping.EngineOptimizations.RecordsAsDisplayElements"/> 
            optimizations.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.QueryRecordMeetsFilterCriteriaEventHandler">
            <summary>
            Represents the method that handles <see cref="E:Syncfusion.Grouping.Engine.QueryRecordMeetsFilterCriteria"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Syncfusion.Grouping.QueryRecordMeetsFilterCriteriaEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Grouping.QueryRecordMeetsFilterCriteriaEventArgs">
            <summary>
            Provides data about the <see cref="E:Syncfusion.Grouping.Engine.QueryRecordMeetsFilterCriteria"/> event which
            occurs when a record is checked whether it meets filter criteria and should appear visible in the tables DisplayElements.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.QueryRecordMeetsFilterCriteriaEventArgs.#ctor(Syncfusion.Grouping.Record,System.Boolean)">
            <summary>
            Initializes the new object with a record and result.
            </summary>
            <param name="record">The record to be tested.</param>
            <param name="result">The default value for the <see cref="P:Syncfusion.Grouping.QueryRecordMeetsFilterCriteriaEventArgs.Result"/>.</param>
        </member>
        <member name="P:Syncfusion.Grouping.QueryRecordMeetsFilterCriteriaEventArgs.Record">
            <summary>
            Gets the record to be tested.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.QueryRecordMeetsFilterCriteriaEventArgs.Result">
            <summary>
            Gets / sets the result. True if record meets criteria; False otherwise.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.DescriptorPropertyChangedEventHandler">
            <summary>
            Represents a method that handles a PropertyChanged or PropertyChanging event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Syncfusion.Grouping.DescriptorPropertyChangedEventArgs">
            <summary>
            Provides data for PropertyChanged or PropertyChanging events which
            occur when a property is changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.DescriptorPropertyChangedEventArgs.#ctor(System.String,System.EventArgs)">
            <summary>
            Initializes the new object with a property name and an inner EventArgs object.
            </summary>
            <param name="property">The name of the property was changed.</param>
            <param name="inner">An inner EventArgs object with more detailed information about a nested event. If for example the fields collection 
            is changed, the table object will raise a PropertyChanged event and use the original PropertyListChangedEventArgs as inner property.</param>
        </member>
        <member name="M:Syncfusion.Grouping.DescriptorPropertyChangedEventArgs.#ctor(System.String)">
            <summary>
            Initializes the new object with a property name.
            </summary>
            <param name="property">The name of the property was changed.</param>
        </member>
        <member name="M:Syncfusion.Grouping.DescriptorPropertyChangedEventArgs.GetNestedChildTableDescriptorEvent(Syncfusion.Grouping.TableDescriptor@)">
            <summary>
            Checks if this object contains event data about a "Relations" property of a TableDescriptor and if the event 
            was raised from a nested ChildTableDescriptor within the Relation collection. <para/>
            In such case, the method returns the EventArgs
            for the original event within that nested ChildTableDescriptor. <para/>
            For example, if a column was changed in a nested table descriptor, this method will return a reference to the TableDescriptor and the 
            ColumnsChanged event data. You can analyze the event data whether just a width for the column has changed or
            if other settings were changed.
            </summary>
            <param name="td">Table Descriptor.</param>
            <returns>The event args.</returns>
        </member>
        <member name="P:Syncfusion.Grouping.DescriptorPropertyChangedEventArgs.PropertyName">
            <summary>
            The name of the property was changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DescriptorPropertyChangedEventArgs.Inner">
            <summary>
            Gets the inner EventArgs object with more detailed information about a nested event. If for example the fields collection 
            is changed, the Table object will raise a PropertyChanged event and use the original PropertyListChangedEventArgs as inner property.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RecordEventArgs">
            <summary>
            Provides data for events that occur on a record level such as RecordCollapsing, RecordCollapsed,
            RecordExpanding, and RecordExpanded.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordEventArgs.#ctor(Syncfusion.Grouping.Record)">
            <summary>
            Initializes a new object with a reference to a record.
            </summary>
            <param name="record">The affected record.</param>
        </member>
        <member name="P:Syncfusion.Grouping.RecordEventArgs.Record">
            <summary>
            Gets the affected record.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RecordEventHandler">
            <summary>
            Represents a method that handles an event with <see cref="T:Syncfusion.Grouping.RecordEventArgs"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Syncfusion.Grouping.GroupEventArgs">
            <summary>
            Provides data for events that occur on a group level such as GroupCollapsing, GroupCollapsed,
            GroupExpanding, and GroupExpanded.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.GroupEventArgs.#ctor(Syncfusion.Grouping.Group)">
            <summary>
            Initializes a new object with a reference to a group.
            </summary>
            <param name="group">The affected group.</param>
        </member>
        <member name="P:Syncfusion.Grouping.GroupEventArgs.Group">
            <summary>
            Gets the affected group.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.GroupEventHandler">
            <summary>
            Represents a method that handles an event with <see cref="T:Syncfusion.Grouping.GroupEventArgs"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Syncfusion.Grouping.RecordChangedType">
            <summary>
            Specifies how the record list changed.
            </summary>
            <remarks>
            Used by the Action property of the RecordChangedEventArgs class to indicate the way records in a table change.
            </remarks>
        </member>
        <member name="F:Syncfusion.Grouping.RecordChangedType.Added">
            <summary>
            A record was added to the datasource.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.RecordChangedType.Removed">
            <summary>
            A record was removed from the datasource.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.RecordChangedType.Changed">
            <summary>
            One or multiple record fields were changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.RecordChangedType.Moved">
            <summary>
            A record was moved to a new position in the underlying data source.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RecordChangedEventHandler">
            <summary>
            Represents a method that handles an event with <see cref="T:Syncfusion.Grouping.RecordChangedEventArgs"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Syncfusion.Grouping.RecordChangedEventArgs">
            <summary>
            Provides data for SourceListRecordChanged and SourceListRecordChanging events that occur 
            when a record in the underlying data source was added, removed, or changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordChangedEventArgs.#ctor(Syncfusion.Grouping.Record,Syncfusion.Grouping.RecordChangedType,System.Int32,System.Int32)">
            <summary>
            Initializes a new object.
            </summary>
            <param name="record">The affected record.</param>
            <param name="action">Specifies how the record list changed.</param>
            <param name="newIndex">The new record index in the underlying data source; can be -1.</param>
            <param name="oldIndex">The old record index in the underlying data source; can be -1.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordChangedEventArgs.#ctor(Syncfusion.Grouping.Record,Syncfusion.Grouping.RecordChangedType,System.Int32,System.Int32,Syncfusion.Grouping.Group)">
            <summary>
            Initializes a new object.
            </summary>
            <param name="record">The affected record.</param>
            <param name="action">Specifies how the record list changed.</param>
            <param name="newIndex">The new record index in the underlying data source; can be -1.</param>
            <param name="oldIndex">The old record index in the underlying data source; can be -1.</param>
            <param name="group">When a record is removed and a parent group needs to be removed, gets the group that
            is going to be removed.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordChangedEventArgs.#ctor(Syncfusion.Grouping.Record,Syncfusion.Grouping.RecordChangedType,System.Int32,System.Int32,Syncfusion.Grouping.Group,System.Boolean)">
            <summary>
            Initializes a new object.
            </summary>
            <param name="record">The affected record.</param>
            <param name="action">Specifies how the record list changed.</param>
            <param name="newIndex">The new record index in the underlying data source; can be -1.</param>
            <param name="oldIndex">The old record index in the underlying data source; can be -1.</param>
            <param name="group">When a record is removed and a parent group needs to be removed, gets the group that
            is going to be removed.</param>
            <param name="sortAffected">Specifies if the sorted position of the changed record was changed.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordChangedEventArgs.#ctor(Syncfusion.Grouping.Record,Syncfusion.Grouping.RecordChangedType,System.Int32,System.Int32,Syncfusion.Grouping.Group,System.Boolean,Syncfusion.Grouping.TableListChangedEventArgs)">
            <summary>
            Initializes a new object.
            </summary>
            <param name="record">The affected record.</param>
            <param name="action">Specifies how the record list changed.</param>
            <param name="newIndex">The new record index in the underlying data source; can be -1.</param>
            <param name="oldIndex">The old record index in the underlying data source; can be -1.</param>
            <param name="inner">Represents the boolean values.</param>
            <param name="group">When a record is removed and a parent group needs to be removed, gets the group that
            is going to be removed.</param>
            <param name="sortAffected">Specifies if the sorted position of the changed record was changed.</param>
        </member>
        <member name="P:Syncfusion.Grouping.RecordChangedEventArgs.IsNestedRelationParentKeyFieldAffected">
            <summary>
             Gets / sets if a property was changed that is the parent field of a master details relation.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordChangedEventArgs.RaiseDisplayElementChanged">
            <summary>
            Gets / sets if a DisplayElementChanged event should be raised after this event's handler returns.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordChangedEventArgs.TableListChangedEventArgs">
            <summary>
            Gets or sets the TableListChanged Event Args.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordChangedEventArgs.SortedPositionChanged">
            <summary>
            Gets if the sorted position of the changed record was changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordChangedEventArgs.VisibilityChanged">
            <summary>
            Gets if the changed record visibility was changed (filter criteria meet / not meet criteria).
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordChangedEventArgs.GroupsChanged">
            <summary>
            Specfies if the changed record forced changes to parent groups (move record to new group, create/delete group).
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordChangedEventArgs.Record">
            <summary>
            The affected record.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordChangedEventArgs.Group">
            <summary>
            Returns the group which visibility is affected when a record is removed or added (if the affected
            record that is hidden is the only record or if a new group becomes visible which can also happen
            when a child record meets or fails to meet filter criteria) 
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordChangedEventArgs.AddedGroup">
            <summary>
            Returns the top-most group when a record was added with a new category
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordChangedEventArgs.RemovedGroup">
            <summary>
            When a record is removed and a parent group needs to be removed, gets the group that
            is going to be removed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordChangedEventArgs.Action">
            <summary>
            Specifies how the record list changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordChangedEventArgs.NewIndex">
            <summary>
            The new record index in the underlying datasource; can be -1.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordChangedEventArgs.OldIndex">
            <summary>
            The old record index in the underlying datasource; can be -1.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordChangedEventArgs.Reserved">
            <exclude/>
            <summary>
            Used internally for view information when removing records.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.ExceptionRaisedEventArgs">
            <summary>
            Provides data for the ExceptionRaised event that 
            occurs when an unknown exception has been cached while modifying underlying data in the datasource.
            </summary>
            <remarks>
            If necessary, you can rethrow the exception in your event handler.
            </remarks>
        </member>
        <member name="T:Syncfusion.Grouping.TableEventArgs">
            <summary>
            Provides data for events that occur on a table such as SourceListChanged, CategorizedRecords,
            CurrentRecordManagerReset, and others.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableEventArgs.#ctor(Syncfusion.Grouping.Table)">
            <summary>
            Initializes a new object with a reference to a table.
            </summary>
            <param name="table">The affected table.</param>
        </member>
        <member name="P:Syncfusion.Grouping.TableEventArgs.Table">
            <summary>
            The table object.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ExceptionRaisedEventArgs.#ctor(Syncfusion.Grouping.Table,System.String,System.Exception)">
            <summary>
            Initializes a new object.
            </summary>
            <param name="table">The table object that cached the exception.</param>
            <param name="method">The name of the method that cached the exception.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Syncfusion.Grouping.ExceptionRaisedEventArgs.Method">
            <summary>
            The name of the method that cached the exception.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ExceptionRaisedEventArgs.Exception">
            <summary>
            The exception.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.ExceptionRaisedEventHandler">
            <summary>
            Represents a method that handles an event with <see cref="T:Syncfusion.Grouping.ExceptionRaisedEventArgs"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Syncfusion.Grouping.SelectedRecordsChangedEventHandler">
            <summary>
            Represents a method that handles an event with <see cref="T:Syncfusion.Grouping.SelectedRecordsChangedEventArgs"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Syncfusion.Grouping.SelectedRecordsChangedType">
            <summary>
            Specifies the kind of action for SelectedRecordsChangedEventArgs
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.SelectedRecordsChangedType.Added">
            <summary>
            A record is/was added to the SelectedRecords collection 
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.SelectedRecordsChangedType.Removed">
            <summary>
            A record is/was removed from the SelectedRecords collection 
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.SelectedRecordsChangedType.Reset">
            <summary>
            The SelectedRecords collection is/was cleared.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.SelectedRecordsChangedEventArgs">
            <summary>
            Provides event data for the <see cref="E:Syncfusion.Grouping.Table.SelectedRecordsChanged"/> and <see cref="E:Syncfusion.Grouping.Table.SelectedRecordsChanging"/>
            event which occur when the <see cref="P:Syncfusion.Grouping.Table.SelectedRecords"/> collection is/was modified.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SelectedRecordsChangedEventArgs.#ctor(Syncfusion.Grouping.Table,Syncfusion.Grouping.SelectedRecordsChangedType,Syncfusion.Grouping.SelectedRecord)">
            <summary>
            Initializes a new SelectedRecordsChangedEventArgs object.
            </summary>
            <param name="table">The table the <see cref="P:Syncfusion.Grouping.Table.SelectedRecords"/> collection belongs to.</param>
            <param name="action">Specifies the kind of action that occured:
            <list type="bullet">
            <item><term>Added: A record is/was added to the SelectedRecords collection</term></item>
            <item><term>Deleted: A record is/was removed from the SelectedRecords collection </term></item>
            <item><term>Reset: The SelectedRecords collection is/was cleared.</term></item>
            </list></param>
            <param name="selectedRecord">The affected record</param>
        </member>
        <member name="P:Syncfusion.Grouping.SelectedRecordsChangedEventArgs.Table">
            <summary>
            The table the <see cref="P:Syncfusion.Grouping.Table.SelectedRecords"/> collection belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SelectedRecordsChangedEventArgs.Action">
            <summary>
            Specifies the kind of action that occured:
            <list type="bullet">
            <item><term>Added: A record is/was added to the SelectedRecords collection</term></item>
            <item><term>Deleted: A record is/was removed from the SelectedRecords collection </term></item>
            <item><term>Reset: The SelectedRecords collection is/was cleared.</term></item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SelectedRecordsChangedEventArgs.SelectedRecord">
            <summary>
            The affected record
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.TableListChangedEventArgs">
            <summary>
            Provides data for the SourceListListChanged event that
            occurs before the <see cref="P:Syncfusion.Grouping.TableListChangedEventArgs.Table"/> processes the <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> event
            of an attached source list. More detailed <see cref="E:Syncfusion.Grouping.Table.SourceListRecordChanged"/> events will be
            raised after this event.
            </summary>
            <remarks>
            The reason for firing this event is to give a programmer the chance to react to an <see cref="E:System.ComponentModel.IBindingList.ListChanged"/>
            event before the engine since there is otherwise no order guaranteed when an IBindingList raises a ListChanged
            event.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.TableListChangedEventArgs.#ctor(Syncfusion.Grouping.Table,System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
            <summary>
            Initializes a new object.
            </summary>
            <param name="table">The table object.</param>
            <param name="listChangedType">Gets the way that the list changed.</param>
            <param name="newIndex">Gets the new index of the item in the list.</param>
            <param name="oldIndex">Gets the old index of the item in the list.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableListChangedEventArgs.#ctor(Syncfusion.Grouping.Table,System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Initializes a new object.
            </summary>
            <param name="table">The table object.</param>
            <param name="listChangedType">Gets the way that the list changed.</param>
            <param name="newIndex">Gets the new index of the item in the list.</param>
            <param name="propDesc">The PropertyDescriptor describing the item.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableListChangedEventArgs.Create(Syncfusion.Grouping.Table,System.ComponentModel.ListChangedType,System.Int32,System.Int32,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Creates a TableListChangedEventArgs object.
            </summary>
            <param name="table">The table object.</param>
            <param name="listChangedType">Gets the way that the list changed.</param>
            <param name="newIndex">Gets the new index of the item in the list.</param>
            <param name="oldIndex">Gets the old index of the item in the list.</param>
            <param name="propDesc">The PropertyDescriptor describing the item.</param>
            <returns>The event args.</returns>
        </member>
        <member name="P:Syncfusion.Grouping.TableListChangedEventArgs.Table">
            <summary>
            The table object.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableListChangedEventArgs.ShouldInvalidateCounters">
            <summary>
            Lets you specify whether counters need to be marked dirty when
            a ListChanged event is handled. By default, the table does not know
            whether fields that are changes in a record will affect the counter
            logic and therefore will always mark all counters dirty from the bottom up. 
            This has performance implications for the next time you need position information
            about a record (or simply when you call InvalidateRange and the YAmount
            counter is accessed).
            </summary>
            <remarks>
            When counters are not marked dirty, subsequent operations that need record position
            or y-amount position will be much faster. Counters only need to be marked dirty when there is a chance
            that the sort order is affected or if filter / hidden state of a record is 
            affected or if custom counters are used.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.TableListChangedEventArgs.ShouldInvalidateScreen">
            <summary>
            Lets you specify whether the grid should repaint the record when changes to the record
            were made in the underlying datasource and a ListChangedType.ItemChanged notification was
            raised. The default value for ShouldInvalidateScreen is true.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableListChangedEventArgs.ShouldIgnoreReset">
            <summary>
            Lets you change whether the a ListChangedType.Reset notification should be ignored. If
            you set ShouldIgnoreReset = true the table will not set itsself dirty and also not repaint the screen.
            Normally, a listener on a DataView needs to completely reinitialize itsself when ListChangedType.Reset 
            is raised beause the underlying datasource might have been sorted or othwerwise changes. Sometimes
            however you may want to call CurrencyManager.Reset or call DataTable.AcceptChanges without 
            reinitializing the grid. In such case this property will help you avoid delays. The default value for ShouldIgnoreReset is false.
            </summary>
            <remarks>
            There is an exception when the grid will alwyas handle the Reset event and ignores this setting
            when the grid detects that the record count it has cached differs from the record count of the 
            underlying source list. In that case the table must be marked dirty to avoid the data and the
            table to go out of sync.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.TableListChangedEventArgs.ShouldInvalidateSummaries">
            <summary>
            Lets you specify whether summaries need to be marked dirty when
            a ListChanged event is handled. By default, the table does not know
            whether fields that are changed in a record will affect the summaries
            logic and therefore will always mark all summaries dirty from the bottom up. 
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableListChangedEventArgs.ShouldResetCurrentRecord">
            <summary>
            Lets you specify whether the current record should be reset
            when an ItemChanged notification is received for the current record.
            By default, the table resets the current record, but you can
            avoid this action if you set this property to False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableListChangedEventArgs.NavigateCurrentRecordWhenDeleted">
            <summary>
            Lets you specify whether the current record should be moved to
            the previous visible record when an ItemDeleted notification is 
            received for the current record.
            <para/>
            By default, the table deactivates the current record. You can
            avoid this action and force the record to moved if you set this 
            property to True.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableListChangedEventArgs.ShouldInvalidateGroupSortOrder">
            <summary>
            Lets you specify if changes to the current record affect the sort order
            of the parent group  <para/>
            This property only has an affect when a record is changed and you have specified
            a SortColumnDescriptor.GroupSortOrderComparer for the grouped column, e.g. if
            you want groups to be sorted by the value of a summary column.
            <para/>
            If you know that changes to a specific record won't affect the sort order you 
            can avoid unnencessary resorting of the parent group by setting this property to false.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableListChangedEventArgs.ShouldReevaluateSortPosition">
            <summary>
            Lets you specify if changes to the current record affect the sort position
            of the record.<para/>
            Set this property if you sorted or grouped by an expression field that is dependant
            on changes in other values of the record. The engine does not track dependencies among
            fields. 
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.TableListChangedEventHandler">
            <summary>
            Represents a method that handles an event with <see cref="T:Syncfusion.Grouping.TableListChangedEventArgs"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Syncfusion.Grouping.TableEventHandler">
            <summary>
            Represents a method that handles an event with <see cref="T:Syncfusion.Grouping.TableEventArgs"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Syncfusion.Grouping.CurrentRecordAction">
            <summary>
            Specifies how the current record context changes.
            </summary>
            <remarks>
            This enum is used by the <see cref="P:Syncfusion.Grouping.CurrentRecordContextChangeEventArgs.Action"/> property
            of the <see cref="T:Syncfusion.Grouping.CurrentRecordContextChangeEventArgs"/> class.</remarks>
        </member>
        <member name="F:Syncfusion.Grouping.CurrentRecordAction.BeginEditCalled">
            <summary>
            <see cref="M:Syncfusion.Grouping.CurrentRecordManager.BeginEdit"/> was called. You can cancel this operation by
            setting the Cancel property.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.CurrentRecordAction.BeginEditComplete">
            <summary>
            <see cref="M:Syncfusion.Grouping.CurrentRecordManager.BeginEdit"/> is complete and returns.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.CurrentRecordAction.EndEditCalled">
            <summary>
            <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EndEdit"/> was called. You can cancel this operation by
            setting the Cancel property.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.CurrentRecordAction.EndEditComplete">
            <summary>
            <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EndEdit"/> is complete and returns.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.CurrentRecordAction.CancelEditCalled">
            <summary>
            <see cref="M:Syncfusion.Grouping.CurrentRecordManager.CancelEdit"/> was called. You can cancel this operation by
            setting the Cancel property.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.CurrentRecordAction.CancelEditComplete">
            <summary>
            <see cref="M:Syncfusion.Grouping.CurrentRecordManager.CancelEdit"/> is complete and returns.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.CurrentRecordAction.NavigateCalled">
            <summary>
            <see cref="M:Syncfusion.Grouping.CurrentRecordManager.Navigate(System.Int32)"/> was called. You can cancel this operation by
            setting the Cancel property.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.CurrentRecordAction.NavigateComplete">
            <summary>
            <see cref="M:Syncfusion.Grouping.CurrentRecordManager.Navigate(System.Int32)"/> is complete and returns.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.CurrentRecordAction.LeaveRecordCalled">
            <summary>
            <see cref="M:Syncfusion.Grouping.CurrentRecordManager.LeaveRecord(System.Boolean)"/> was called. You can cancel this operation by
            setting the Cancel property.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.CurrentRecordAction.LeaveRecordComplete">
            <summary>
            <see cref="M:Syncfusion.Grouping.CurrentRecordManager.LeaveRecord(System.Boolean)"/> is complete and returns.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.CurrentRecordAction.EnterRecordCalled">
            <summary>
            <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EnterRecord(Syncfusion.Grouping.Element)"/> was called. You can cancel this operation by
            setting the Cancel property.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.CurrentRecordAction.EnterRecordComplete">
            <summary>
            <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EnterRecord(Syncfusion.Grouping.Element)"/> is complete and returns.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.CurrentRecordAction.CurrentFieldChanged">
            <summary>
            <see cref="P:Syncfusion.Grouping.CurrentRecordManager.CurrentField"/> was moved.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.CurrentRecordContextChangeEventArgs">
            <summary>
            Provides data for the CurrentRecordContextChange event that
            occurs before and after the status of the current record is changed. Check the <see cref="P:Syncfusion.Grouping.CurrentRecordContextChangeEventArgs.Action"/>
            to get information on which current record state was changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordContextChangeEventArgs.#ctor(Syncfusion.Grouping.CurrentRecordAction,Syncfusion.Grouping.Table,Syncfusion.Grouping.Element,System.Boolean)">
            <summary>
            Initializes a new object.
            </summary>
            <param name="action">Specifies how the current record context changes.</param>
            <param name="table">The affected table.</param>
            <param name="record">The affected record.</param>
            <param name="success">Indicates if the operation was completed successfully or failed.</param>
        </member>
        <member name="M:Syncfusion.Grouping.CurrentRecordContextChangeEventArgs.ToString">
            <summary>Returns string representation of the event args object.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordContextChangeEventArgs.Action">
            <summary>
            Specifies how the current record context changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordContextChangeEventArgs.Table">
            <summary>
            The affected table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordContextChangeEventArgs.Record">
            <summary>
            The affected record.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CurrentRecordContextChangeEventArgs.Success">
            <summary>
            Indicates if the operation was completed successfully or failed.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.CurrentRecordContextChangeEventHandler">
            <summary>
            Represents a method that handles an event with <see cref="T:Syncfusion.Grouping.CurrentRecordContextChangeEventArgs"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Syncfusion.Grouping.DisplayElementChangingEventHandler">
            <summary>
            Represents a method that handles an event with <see cref="T:Syncfusion.Grouping.DisplayElementChangingEventArgs"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Syncfusion.Grouping.DisplayElementChangedEventHandler">
            <summary>
            Represents a method that handles an event with <see cref="T:Syncfusion.Grouping.DisplayElementChangedEventArgs"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Syncfusion.Grouping.SyncfusionAllowCancelEventArgs">
            <summary>
            A base class for EventArgs with an <see cref="P:Syncfusion.Grouping.SyncfusionAllowCancelEventArgs.AllowCancel"/> property.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SyncfusionAllowCancelEventArgs.AllowCancel">
            <summary>
            Indicates if the event supports canceling the current operation that raised the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.DisplayElementChangingEventArgs">
            <summary>
            Provides data for the DisplayElementChanging event that
            occurs before display elements in a table are changed. A GridGroupingControl
            listens to this event and deactivates the current cell and / or saves the cell's contents if necessary.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.DisplayElementChangingEventArgs.#ctor(Syncfusion.Grouping.Element,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new object.
            </summary>
            <param name="element">The affected element can be the whole table.</param>
            <param name="oldCount">The old display element count of the affected element. Can be -1.</param>
            <param name="newCount">The new display element count of the affected element. Can be -1.</param>
            <param name="repaintElement">Indicates if element needs repainting.</param>
            <param name="syncCurrentRecordPos">Indicates if current record position should be saved and restored.</param>
            <param name="leaveCurrentRecord">Indicates if current record should be deactivated.</param>
            <param name="scrollCurrentRecordInView">Indicates if current record should be scrolled into view.</param>
        </member>
        <member name="P:Syncfusion.Grouping.DisplayElementChangingEventArgs.Element">
            <summary>
            The affected element can be the whole table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DisplayElementChangingEventArgs.OldCount">
            <summary>
            The old display element count of the affected element. Can be -1.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DisplayElementChangingEventArgs.NewCount">
            <summary>
            The new display element count of the affected element. Can be -1.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DisplayElementChangingEventArgs.RepaintElement">
            <summary>
            Indicates if element needs repainting.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DisplayElementChangingEventArgs.SyncCurrentRecordPos">
            <summary>
            Indicates if current record position should be saved and restored.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DisplayElementChangingEventArgs.LeaveCurrentRecord">
            <summary>
            Indicates if current record should be deactivated.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DisplayElementChangingEventArgs.ScrollCurrentRecordInView">
            <summary>
            Indicates if current record should be scrolled into view.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.DisplayElementChangedEventArgs">
            <summary>
            Provides data for the DisplayElementChanged event that
            occurs after display elements in a table are changed. A GridGroupingControl
            listens to this event and repaints affected elements if necessary.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.DisplayElementChangedEventArgs.#ctor(Syncfusion.Grouping.Element,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new object.
            </summary>
            <param name="element">The affected element can be the whole table.</param>
            <param name="oldCount">The old display element count of the affected element. Can be -1.</param>
            <param name="newCount">The new display element count of the affected element. Can be -1.</param>
            <param name="repaintElement">Indicates if element needs repainting.</param>
            <param name="syncCurrentRecordPos">Indicates if current record position should be saved and restored.</param>
            <param name="leaveCurrentRecord">Indicates if current record should be deactivated.</param>
            <param name="scrollCurrentRecordInView">Indicates if current record should be scrolled into view.</param>
        </member>
        <member name="P:Syncfusion.Grouping.DisplayElementChangedEventArgs.Element">
            <summary>
            The affected element can be the whole table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DisplayElementChangedEventArgs.OldCount">
            <summary>
            The old display element count of the affected element. Can be -1.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DisplayElementChangedEventArgs.NewCount">
            <summary>
            The new display element count of the affected element. Can be -1.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DisplayElementChangedEventArgs.RepaintElement">
            <summary>
            Indicates if element needs repainting.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DisplayElementChangedEventArgs.SyncCurrentRecordPos">
            <summary>
            Indicates if current record position should be saved and restored.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DisplayElementChangedEventArgs.LeaveCurrentRecord">
            <summary>
            Indicates if current record should be deactivated.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DisplayElementChangedEventArgs.ScrollCurrentRecordInView">
            <summary>
            Indicates if current record should be scrolled into view.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.FieldValueEventHandler">
            <summary>
            Represents a method that handles an event with <see cref="T:Syncfusion.Grouping.FieldValueEventArgs"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Syncfusion.Grouping.FieldValueEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Grouping.Engine.QueryValue"/> and <see cref="E:Syncfusion.Grouping.Engine.SaveValue"/> events that
            occur when a value for a field descriptor and record is returned or when a value for a field descriptor and record is saved. See the Grid\Grouping\Samples\CustomSummary
            sample how to use this event with unbound field descriptors.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FieldValueEventArgs.#ctor(Syncfusion.Grouping.FieldDescriptor,Syncfusion.Grouping.Record,System.Object)">
            <summary>
            Initializes a new object.
            </summary>
            <param name="field">The affected field.</param>
            <param name="record">The affected record.</param>
            <param name="value">The default value.</param>
        </member>
        <member name="P:Syncfusion.Grouping.FieldValueEventArgs.Field">
            <summary>
            The affected field.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldValueEventArgs.Record">
            <summary>
            The affected record.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldValueEventArgs.TableDescriptor">
            <summary>
            The table descriptor.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FieldValueEventArgs.Value">
            <summary>
            Gets / sets the result value or value to be saved into the datasource.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.CustomCountEventHandler">
            <summary>
            Represents a method that handles an event with <see cref="T:Syncfusion.Grouping.CustomCountEventArgs"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Syncfusion.Grouping.CustomCountEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Grouping.Table.QueryCustomCount"/> and <see cref="E:Syncfusion.Grouping.Table.QueryVisibleCustomCount"/> events that
            occur when the custom counter value for a record is queried. See the Grid\Grouping\Samples\CustomSummary
            example.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CustomCountEventArgs.#ctor(Syncfusion.Grouping.Record,System.Double)">
            <summary>
            Initializes a new object.
            </summary>
            <param name="record">The record for which the custom counter value should be returned.</param>
            <param name="customCount">The default value for the custom counter value.</param>
        </member>
        <member name="P:Syncfusion.Grouping.CustomCountEventArgs.Record">
            <summary>
            The record for which the custom counter value should be returned.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CustomCountEventArgs.CustomCount">
            <summary>
            Gets / sets the custom counter value.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RecordValueChangingEventHandler">
            <summary>
            Represents a method that handles the cancelable <see cref="E:Syncfusion.Grouping.Engine.RecordValueChanging"/> event of a <see cref="T:Syncfusion.Grouping.Engine"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Grouping.RecordValueChangingEventArgs">
            <summary>
            Provides data about the cancelable <see cref="E:Syncfusion.Grouping.Engine.RecordValueChanging"/> event of a <see cref="T:Syncfusion.Grouping.Engine"/>
            which occurs when a RecordFieldCell cell's value is changed and before Record.SetValue is called.
            </summary>
            <remarks>
            You can cancel saving the value when you set e.Cancel = True, or you can replace e.NewValue with a different value.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RecordValueChangingEventArgs.#ctor(Syncfusion.Grouping.Record,System.String,Syncfusion.Grouping.FieldDescriptor,System.Object)">
            <summary>
            Initializes the event data.
            </summary>
            <param name="record">The record.</param>
            <param name="column">The column.</param>
            <param name="fieldDescriptor">The field.</param>
            <param name="newValue">The new value to save.</param>
        </member>
        <member name="P:Syncfusion.Grouping.RecordValueChangingEventArgs.Record">
            <summary>
            The record.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordValueChangingEventArgs.Column">
            <summary>
            The column.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordValueChangingEventArgs.FieldDescriptor">
            <summary>
            The field.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordValueChangingEventArgs.NewValue">
            <summary>
            The new value to save.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RecordValueChangedEventHandler">
            <summary>
            Represents a method that handles the <see cref="E:Syncfusion.Grouping.Engine.RecordValueChanged"/> event of a <see cref="T:Syncfusion.Grouping.Engine"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Grouping.RecordValueChangedEventArgs">
            <summary>
            Provides data about the <see cref="E:Syncfusion.Grouping.Engine.RecordValueChanged"/> event of a <see cref="T:Syncfusion.Grouping.Engine"/>
            which occurs when a RecordFieldCell cell's value is changed and after Record.SetValue returned.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordValueChangedEventArgs.#ctor(Syncfusion.Grouping.Record,System.String,Syncfusion.Grouping.FieldDescriptor)">
            <summary>
            Initializes the event data.
            </summary>
            <param name="record">The record.</param>
            <param name="column">The column.</param>
            <param name="fieldDescriptor">The field.</param>
        </member>
        <member name="P:Syncfusion.Grouping.RecordValueChangedEventArgs.Record">
            <summary>
            The record.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordValueChangedEventArgs.Column">
            <summary>
            The column.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordValueChangedEventArgs.FieldDescriptor">
            <summary>
            The field.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.FilterBarSection">
            <summary>
             A place holder section with 1 visible element for showing a filter bar.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarSection.#ctor(Syncfusion.Grouping.Group)">
            <summary>
            Initializes a new section in the specified group.
            </summary>
            <param name="parent">The parent group.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarSection.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarSection.OnEnsureInitialized(System.Object)">
            <returns>return boolean value</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarSection.InvalidateCounterTopDown(System.Boolean)">
            <summary>Forces reevaluation of the counters of all elements.</summary>
            <param name="notifyCounterSource">When true notifies the counter source.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarSection.GetElementCount">
            <summary>Gets number of elements.</summary>
            <returns>Element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarSection.GetVisibleCount">
            <summary>Gets number of visible elements.</summary>
            <returns>Visible element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarSection.GetYAmountCount">
            <summary>Gets the height of the element.</summary>
            <returns>Element height.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarSection.GetFilteredRecordCount">
            <summary>Gets number of filtered records.</summary>
            <returns>Fitlered record count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarSection.GetRecordCount">
            <summary>Gets number of records.</summary>
            <returns>Record count.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.FilterBarSection.Kind">
            <summary>Gets the kind of display element.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.FilterBarSection.FilterBarRows">
            <summary>
            Returns the collection of <see cref="T:Syncfusion.Grouping.FilterBarRow"/> elements.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.FilterBarRow">
            <summary>Creates a filter bar row. Only for internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarRow.#ctor(Syncfusion.Grouping.FilterBarSection)">
            <summary>Only for internal use.</summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarRow.GetElementCount">
            <summary>Gets number of elements.</summary>
            <returns>Element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarRow.OnEnsureInitialized(System.Object)">
            <returns>returns boolean value</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarRow.GetVisibleCount">
            <summary>Gets number of visible elements.</summary>
            <returns>Visible element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarRow.GetYAmountCount">
            <summary>Gets the height for the element.</summary>
            <returns>Returns Height.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.FilterBarRow.Kind">
            <summary>Only for internal use.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.FilterBarRow.ParentElement">
            <summary>Only for internal use.</summary>
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Grouping.FilterBarRowCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Grouping.FilterBarRow"/> elements that are children of a <see cref="T:Syncfusion.Grouping.FilterBarSection"/> in a <see cref="T:Syncfusion.Grouping.Group"/>.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.FilterBarSection.FilterBarRows"/> property
            of a <see cref="T:Syncfusion.Grouping.FilterBarSection"/> object. (NOTE: FilterBars are not supported in Version 2.0).
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarRowCollection.Contains(Syncfusion.Grouping.FilterBarRow)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarRowCollection.IndexOf(Syncfusion.Grouping.FilterBarRow)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarRowCollection.CopyTo(Syncfusion.Grouping.FilterBarRow[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarRowCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading of the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarRowCollection.Insert(System.Int32,Syncfusion.Grouping.FilterBarRow)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="value">The element to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarRowCollection.Remove(Syncfusion.Grouping.FilterBarRow)">
            <summary>
            Removes the specified element from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarRowCollection.Add(Syncfusion.Grouping.FilterBarRow)">
            <summary>
            Adds a value to the end of the collection.
            </summary>
            <param name="value">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarRowCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove. </param>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarRowCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FilterBarRowCollection.Item(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FilterBarRowCollection.IsReadOnly">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FilterBarRowCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FilterBarRowCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.FilterBarRowCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. 
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.FilterBarRowCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.FilterBarRow"/> elements of a <see cref="T:Syncfusion.Grouping.FilterBarRowCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarRowCollectionEnumerator.#ctor(Syncfusion.Grouping.FilterBarRowCollection)">
            <summary>
            Initializes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarRowCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarRowCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator is successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.FilterBarRowCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.GroupFooterSection">
            <summary>
            A place holder section with 1 visible element for showing a footer below a group in <see cref="P:Syncfusion.Grouping.Table.DisplayElements"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.GroupFooterSection.#ctor(Syncfusion.Grouping.Group)">
            <summary>
            Initializes a new section in the specified group.
            </summary>
            <param name="parent">The group this section is created in.</param>
        </member>
        <member name="M:Syncfusion.Grouping.GroupFooterSection.GetVisibleCount">
            <summary>Gets the number of visible elements.</summary>
            <returns>Visible element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupFooterSection.GetYAmountCount">
            <summary>Returns the height for the element.</summary>
            <returns>Element Height.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupFooterSection.InvalidateCounterTopDown(System.Boolean)">
            <summary>Resets the counter fields for all elements.</summary>
            <param name="notifyCounterSource">If true notifies the counter source.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupFooterSection.InvalidateSummariesTopDown">
            <summary>Resets the summaries for all elements.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupFooterSection.InvalidateSummary">
            <summary>Resets the summaries.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupFooterSection.GetFilteredRecordCount">
            <summary>Gets the filtered record count.</summary>
            <returns>Number of filtered records.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupFooterSection.GetElementCount">
            <summary>Gets the number of elements.</summary>
            <returns>Element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupFooterSection.GetRecordCount">
            <summary>Gets the number of records.</summary>
            <returns>Record count.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupFooterSection.Kind">
            <summary>Gets the kind of the element.</summary>
            <override/>
        </member>
        <member name="T:Syncfusion.Grouping.GroupHeaderSection">
            <summary>
            A place holder section with 1 visible element for showing a header above a group in <see cref="P:Syncfusion.Grouping.Table.DisplayElements"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.GroupHeaderSection.#ctor(Syncfusion.Grouping.Group)">
            <summary>
            Initializes a new section in the specified group.
            </summary>
            <param name="parent">The group this section is created in.</param>
        </member>
        <member name="M:Syncfusion.Grouping.GroupHeaderSection.GetVisibleCount">
            <summary>Gets the number of visible elements.</summary>
            <returns>Visible element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupHeaderSection.GetYAmountCount">
            <summary>Returns the height for the element.</summary>
            <returns>Element Height.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupHeaderSection.InvalidateCounterTopDown(System.Boolean)">
            <summary>Resets the counter fields for all elements.</summary>
            <param name="notifyCounterSource">If true notifies the counter source.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupHeaderSection.InvalidateSummariesTopDown">
            <summary>Resets the summaries for all elements.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupHeaderSection.InvalidateSummary">
            <summary>Resets the summaries.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupHeaderSection.GetFilteredRecordCount">
            <summary>Gets the filtered record count.</summary>
            <returns>Number of filtered records.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupHeaderSection.GetElementCount">
            <summary>Gets the number of elements.</summary>
            <returns>Element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupHeaderSection.GetRecordCount">
            <summary>Gets the number of records.</summary>
            <returns>Record count.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupHeaderSection.Kind">
            <summary>Gets the kind of the element.</summary>
            <override/>
        </member>
        <member name="T:Syncfusion.Grouping.GroupingSortBehavior">
            <summary>
            Defines the sort behavior of the table.
            </summary>
            <remarks>
            The engine has a built-in optimization when you change sort columns that allows it to perform the sorting on an on-demand basis 
            group-by-group. Suppose you have a table with 200 different countries and you change the sort order of the cities. It is not 
            necessary to sort the whole table. Instead, the individual groups can be sorted when they are scrolled into view. Such 
            on-demand sorting can only be done with internal sort routines and not by letting your datasource do the sorting.
            <para/>
            If you return <see cref="F:Syncfusion.Grouping.GroupingSortBehavior.GroupByGroup"/>, you allow this optimization. IGroupingList.ApplySort will not be called when the table is already 
            sorted by grouped or relationchild columns.
            <para/>
            If you return <see cref="F:Syncfusion.Grouping.GroupingSortBehavior.Table"/>, you do not allow this optimization. In that case, the whole table will be sorted and 
            IGroupingList.ApplySort is called.
            </remarks>
        </member>
        <member name="F:Syncfusion.Grouping.GroupingSortBehavior.Table">
            <summary>
            Do not allow group-by-group sort optimization. In that case, the whole table will be sorted and 
            IGroupingList.ApplySort is called.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.GroupingSortBehavior.GroupByGroup">
            <summary>
            Allow group-by-group sort optimization. IGroupingList.ApplySort will not be called when the table is already 
            sorted by grouped or relationchild columns.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.IListChangedSource">
            <summary>
            A stripped down version of IBindingList. The interface only has the ListChanged event to notify the
            engine about changes in a bound datasource.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.IListChangedSource.SupportsListChanged">
            <summary>
            Gets whether this list supports the <see cref="E:Syncfusion.Grouping.IListChangedSource.ListChanged"/> event.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.IListChangedSource.ListChanged">
            <summary>
            Occurs when the list changes or an item in the list changes. See <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> in the <see cref="T:System.ComponentModel.IBindingList"/>
            interface.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.GroupPreviewSection">
            <summary>
            A preview section with one visible element for showing a preview below a group in <see cref="P:Syncfusion.Grouping.Table.DisplayElements"/>
            when a group is collapsed.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.GroupPreviewSection.#ctor(Syncfusion.Grouping.Group)">
            <summary>
            Initializes a new section in the specified group.
            </summary>
            <param name="parent">The group this section is created in.</param>
        </member>
        <member name="M:Syncfusion.Grouping.GroupPreviewSection.GetVisibleCount">
            <summary>Gets the number of visible elements.</summary>
            <returns>Visible element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupPreviewSection.GetYAmountCount">
            <summary>Returns the height for the element.</summary>
            <returns>Element Height.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupPreviewSection.InvalidateCounterTopDown(System.Boolean)">
            <summary>Resets the counter fields for all elements.</summary>
            <param name="notifyCounterSource">If true notifies the counter source.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupPreviewSection.InvalidateSummariesTopDown">
            <summary>Resets the summaries for all elements.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupPreviewSection.InvalidateSummary">
            <summary>Resets the summaries.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupPreviewSection.GetFilteredRecordCount">
            <summary>Gets the filtered record count.</summary>
            <returns>Number of filtered records.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupPreviewSection.GetElementCount">
            <summary>Gets the number of elements.</summary>
            <returns>Element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupPreviewSection.GetRecordCount">
            <summary>Gets the number of records.</summary>
            <returns>Record count.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupPreviewSection.Kind">
            <summary>Gets the kind of the element.</summary>
            <override/>
        </member>
        <member name="T:Syncfusion.Grouping.GroupsDetails">
            <summary>
            The details section of a group with nested child groups.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.GroupsDetails.#ctor(Syncfusion.Grouping.Group)">
            <summary>
            Initializes a new section in the specified group.
            </summary>
            <param name="parent">The group this section is created in.</param>
        </member>
        <member name="M:Syncfusion.Grouping.GroupsDetails.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupsDetails.OnEnsureInitialized(System.Object)">
            <summary>
            This virtual method is called from <see cref="M:Syncfusion.Grouping.GroupsDetails.OnEnsureInitialized(System.Object)"/> and
            lets derived elements implement element-specific logic to ensure object
            is up to data.
            </summary>
            <param name="sender">The object that triggered the <see cref="M:Syncfusion.Grouping.GroupsDetails.OnEnsureInitialized(System.Object)"/> call.</param>
            <returns>
            True if changes were detected and the object was updated; False otherwise.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupsDetails.InvalidateCounter">
            <summary>Resets the counter.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.GroupsDetails.InvalidateCounterTopDown(System.Boolean)">
            <summary>Resets the counter for all elements.</summary>
            <param name="notifySource">Indicates whether to notify the counter source.</param>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupsDetails.GroupSortOrderDirty">
            <summary>
            Set this true when records in this group were modified. Will be reset in OnEnsureInitialized.
            When set GroupSortOrderTreeTable will be recreated.
            </summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupsDetails.HasGroupSortOrder">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupsDetails.GroupDisplayEntries">
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupsDetails.GroupSortOrderTreeTable">
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupsDetails.GroupCategoryTreeTable">
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.GroupsDetails.Groups">
            <summary>
            Returns the collection of child groups.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RecordNestedTablesPart">
            <summary>
            The part of a record with nested tables. You can access nested tables in a record with the <see cref="P:Syncfusion.Grouping.Record.NestedTables"/>
            property of a <see cref="T:Syncfusion.Grouping.Record"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RecordPart">
            <summary>
            A part in a record that serves as a container for the <see cref="T:Syncfusion.Grouping.RecordRow"/>, <see cref="T:Syncfusion.Grouping.RecordPreviewRow"/>,
            or <see cref="T:Syncfusion.Grouping.NestedTable"/> element collections in a record.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPart.#ctor(Syncfusion.Grouping.Record)">
            <summary>
            Initializes a new object with the given record as parent.
            </summary>
            <param name="parent">The parent record this object is created in.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPart.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPart.GetElementEntry">
            <summary>
            The ElementTreeTableEntry this element is associated with (either SectionsTreeTableEntry or SortedRecordsTreeTableEntry).
            <returns>returns ElementTreeTableEntry</returns>
            </summary>
            <returns>returns ElementTreeTableEntry</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPart.InvalidateSummariesBottomUp">
            <summary>Walks up parent branches and resets summaries.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPart.GetFilteredRecordCount">
            <summary>Get the number of filtered records.</summary>
            <returns>Filtered record count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPart.GetRecordCount">
            <summary>Gets the number of records.</summary>
            <returns>Record count.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.RecordPart.ParentElement">
            <summary>
            Returns the parent this element belongs to.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordNestedTablesPart.#ctor(Syncfusion.Grouping.Record)">
            <summary>
            Initializes a new object with the given record as parent.
            </summary>
            <param name="parent">The parent record this object is created in.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordNestedTablesPart.GetVisibleCount">
            <summary>
            Gets the number of visible elements.
            </summary>
            <returns>Visible element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordNestedTablesPart.GetYAmountCount">
            <summary>
            Gets the height for the element.
            </summary>
            <returns>Element height.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordNestedTablesPart.InvalidateCounterTopDown(System.Boolean)">
            <summary>Resets the counter for all elements.</summary>
            <param name="notifyCounterSource">Indicates whether to nofity the counter source.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordNestedTablesPart.OnEnsureInitialized(System.Object)">
            <summary>
            This virtual method is called from <see cref="M:Syncfusion.Grouping.RecordNestedTablesPart.OnEnsureInitialized(System.Object)"/> and
            lets derived elements implement element-specific logic to ensure object
            is up to data.
            </summary>
            <param name="sender">The object that triggered the <see cref="M:Syncfusion.Grouping.RecordNestedTablesPart.OnEnsureInitialized(System.Object)"/> call.</param>
            <returns>
            True if changes were detected and the object was updated; False otherwise.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordNestedTablesPart.InvalidateSummariesTopDown">
            <summary>Resets the summary for all elements.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordNestedTablesPart.InvalidateSummary">
            <summary>Resets the summary.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordNestedTablesPart.GetElementCount">
            <summary>
            Gets the number of elements.
            </summary>
            <returns>Element count.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.RecordNestedTablesPart.NestedTables">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Grouping.NestedTable">
            <summary>
            A nested table inside a record. You can access nested tables in a record with the <see cref="P:Syncfusion.Grouping.Record.NestedTables"/>
            property of a <see cref="T:Syncfusion.Grouping.Record"/>. Each nested table has a <see cref="P:Syncfusion.Grouping.NestedTable.ChildTable"/> that provides a link to the
            to the child records in a related table.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.#ctor(Syncfusion.Grouping.RecordNestedTablesPart)">
            <summary>
            Initializes a new object with the specified parent.
            </summary>
            <param name="parent">The parent element this object is created in.</param>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.InvalidateCounter">
            <summary>Resets the counter.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.GetChildCount">
            <summary>Gets the number of childs.</summary>
            <returns>Child count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.GetVisibleCount">
            <summary>Gets the number of visible elements.</summary>
            <returns>Visible element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.GetYAmountCount">
            <summary>Returns height for the element.</summary>
            <returns>Element height.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.GetElementCount">
            <summary>Gets the number of elements.</summary>
            <returns>Element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.GetFilteredRecordCount">
            <summary>Gets the number of filtered records.</summary>
            <returns>Filtered record count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.GetRecordCount">
            <summary>Gets the number of records.</summary>
            <returns>Record count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.GetElementEntry">
            <summary>
            The ElementTreeTableEntry this element is associated with (either SectionsTreeTableEntry or SortedRecordsTreeTableEntry).
            <returns>returns ElementTreeTableEntry</returns>
            </summary>
            <returns>returns ElementTreeTableEntry</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.ToString">
            <summary>
            Returns string representation of the object.
            </summary>
            <returns>
            String representation of the current object.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.InvalidateCounterBottomUp">
            <summary>Resets the counter for all elements.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.InvalidateSummariesTopDown">
            <summary>Resets the summary for all elements.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.InvalidateSummary">
            <summary>Resets the summaries.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.InvalidateCounterTopDown(System.Boolean)">
            <summary>Resets the counter for all elements.</summary>
            <param name="notifyCounterSource">When true notifies the counter source.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.GetData">
            <summary>Returns null.</summary>
            <returns>Returns Null value.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.OnBeginEditCalled">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.BeginEdit"/> is called.
            </summary>
            <returns>True if <see cref="M:Syncfusion.Grouping.CurrentRecordManager.BeginEdit"/> can proceed; False if it should abort.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.OnBeginEditComplete(System.Boolean)">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.BeginEdit"/> successfully finishes.
            </summary>
            <param name="success">True, if it is successfully finished; False, otherwise.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.OnEndEditCalled">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EndEdit"/> is called.
            </summary>
            <returns>True if <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EndEdit"/> can proceed; False if it should abort.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.OnEndEditComplete(System.Boolean)">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EndEdit"/> successfully finishes.
            </summary>
            <param name="success">True, if it is successfully finished; False, otherwise.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.OnCancelEditCalled">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.CancelEdit"/> is called.
            </summary>
            <returns>True if <see cref="M:Syncfusion.Grouping.CurrentRecordManager.CancelEdit"/> can proceed; False if it should abort.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.OnCancelEditComplete(System.Boolean)">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.CancelEdit"/> successfully finishes.
            </summary>
            <param name="success">True, if it is successfully finished; False, otherwise.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.OnLeaveRecordCalled">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.LeaveRecord(System.Boolean)"/> is called.
            </summary>
            <returns>True if <see cref="M:Syncfusion.Grouping.CurrentRecordManager.LeaveRecord(System.Boolean)"/> can proceed; False if it should abort.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.OnLeaveRecordComplete(System.Boolean)">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.LeaveRecord(System.Boolean)"/> successfully finishes.
            </summary>
            <param name="success">True, if it is successfully finished; False, otherwise.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.OnEnterRecordCalled">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EnterRecord(Syncfusion.Grouping.Element)"/> is called.
            </summary>
            <returns>True if <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EnterRecord(Syncfusion.Grouping.Element)"/> can proceed; False if it should abort.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTable.OnEnterRecordComplete(System.Boolean)">
            <summary>
            Called when <see cref="M:Syncfusion.Grouping.CurrentRecordManager.EnterRecord(Syncfusion.Grouping.Element)"/> successfully finishes.
            </summary>
            <param name="success">True, if it is successfully finished; False, otherwise.</param>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.NestedTable.Kind">
            <summary>Gets the element kind.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.NestedTable.ChildTable">
            <summary>
            <see cref="P:Syncfusion.Grouping.NestedTable.ChildTable"/> provides a link to the
            to the child records in a related table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.NestedTable.IsExpanded">
            <summary>
            Determines if the child table with child records is expanded or collapsed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.NestedTable.Records">
            <summary>
            ShortCut for ((RecordsDetails) Details).Records. This returns all records in the group including records that
            do not meet filter criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.NestedTable.FilteredRecords">
            <summary>
            ShortCut for ((RecordsDetails) Details).FilteredRecords. This returns only records in the group that
            meet filter criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.NestedTable.Groups">
            <summary>
            ShortCut for ((GroupsDetails) Details).Groups. A group can either be a final node with records or it can be a node with nested groups. If a
            group has records, its <see cref="P:Syncfusion.Grouping.NestedTable.Groups"/> collection will be empty and the <see cref="P:Syncfusion.Grouping.NestedTable.Records"/>
            collection will contain all records. If a group has nested groups, its <see cref="P:Syncfusion.Grouping.NestedTable.Groups"/>
            collection will have the nested groups and the <see cref="P:Syncfusion.Grouping.NestedTable.Records"/> collection will be empty.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.NestedTablesCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Grouping.NestedTable"/> elements that are children of a <see cref="T:Syncfusion.Grouping.Record"/>.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.Record.NestedTables"/> property
            of a <see cref="T:Syncfusion.Grouping.Record"/> object. Each NestedTable has a <see cref="P:Syncfusion.Grouping.NestedTable.ChildTable"/>
            that links the record in a parent table to the child records in a related table.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTablesCollection.Contains(System.String)">
            <summary>
            Determines if the element with the specified name belongs to this collection.
            </summary>
            <param name="name">The name of the element to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTablesCollection.IndexOf(System.String)">
            <summary>
            Searches for the element with the specified name.
            </summary>
            <param name="name">The name of the element to locate in the collection. </param>
            <returns>The zero-based index of the occurrence of the element with matching name within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTablesCollection.Contains(Syncfusion.Grouping.NestedTable)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTablesCollection.IndexOf(Syncfusion.Grouping.NestedTable)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTablesCollection.CopyTo(Syncfusion.Grouping.NestedTable[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTablesCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection.
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTablesCollection.Insert(System.Int32,Syncfusion.Grouping.NestedTable)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="nestedTable">The element to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <remarks>
            The method
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTablesCollection.Remove(Syncfusion.Grouping.NestedTable)">
            <summary>
            Removes the specified element from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTablesCollection.Add(Syncfusion.Grouping.NestedTable)">
            <summary>
            Adds a value to the end of the collection.
            </summary>
            <param name="nestedTable">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTablesCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove. </param>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTablesCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.NestedTablesCollection.Item(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.NestedTablesCollection.Item(System.String)">
            <summary>
            Gets / sets the element with the specified name.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.NestedTablesCollection.IsReadOnly">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.NestedTablesCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.NestedTablesCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.NestedTablesCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. The property also
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            </summary>
            <remarks>
            If changes in the TableDescriptor are detected, the
            method will reinitialize the collection before returning the count.
            </remarks>
        </member>
        <member name="T:Syncfusion.Grouping.NestedTablesCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.NestedTable"/> elements of a <see cref="T:Syncfusion.Grouping.NestedTablesCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTablesCollectionEnumerator.#ctor(Syncfusion.Grouping.NestedTablesCollection)">
            <summary>
            Initializes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTablesCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.NestedTablesCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if it passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.NestedTablesCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.IPassThroughGroupingResult">
            <summary>
            An interface for pass through grouping support in the grouping engine. If you
            assign a datasource which implements this interface as datasource for the
            grouping engine, the engine will interact with the datasource through this
            interface and query groups details and nested tables on demand only.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.IPassThroughGroupingResult.GetListItemType">
            <summary>
            Returns the data type of the items in the data source. This information is used for instantiating and
            adding new items to the data source.
            </summary>
            <returns>The data type of the items in the datasource.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.IPassThroughGroupingResult.GetItems(Syncfusion.Grouping.Group,System.Object)">
            <summary>
            Returns the items for a given group. The items can either be nested groups or records.
            </summary>
            <param name="group">The group in the grouping engine.</param>
            <param name="item">The item the group is associated with.</param>
            <returns>The items for a given group.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.IPassThroughGroupingResult.GetItemCount(Syncfusion.Grouping.Group,System.Object)">
            <summary>
            Returns the child count for a given group. This is the count that is displayed in the caption.
            </summary>
            <param name="group">The group in the grouping engine.</param>
            <param name="item">The item the group is associated with.</param>
            <returns>The child count for a given group.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.IPassThroughGroupingResult.GetGroupByKey(System.String,System.Object)">
            <summary>
            Returns the category of a new group that will be associated with the given item.
            </summary>
            <param name="column">A name that matches one of the strings return by <see cref="P:Syncfusion.Grouping.IPassThroughGroupingResult.GroupByColumns"/></param>
            <param name="item">The item the group is associated with.</param>
            <returns>The group category for the given item.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.IPassThroughGroupingResult.GetTotals">
            <summary>
            Returns totals for the whole table. It can be an integer that represents the count that is displayed 
            in the caption for the TopLevelGroup.
            You can also return a object which contains summaries for the whole table.
            </summary>
            <returns>returns Totals.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.IPassThroughGroupingResult.GetNestedItems(Syncfusion.Grouping.RelationDescriptor,Syncfusion.Grouping.ChildTable,System.Object[],System.Object@)">
            <summary>
            Returns the nested items for a parent record when it is expanded. In the implementation
            for this method you should execute a query on the related table and match the records
            to the criteria specified using the keys argument and the RelationDescriptor information
            specified with the rd argument.
            </summary>
            <param name="rd">The RelationDescriptor that describes the relation</param>
            <param name="childTable">The child table where the new items will be added after this method returns.</param>
            <param name="keys">The identifier for the nested records</param>
            <param name="totals">The number of child elements in the nested table or an object with summaries.</param>
            <returns>The results of the query for the nested records.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.IPassThroughGroupingResult.GetSampleItems">
            <summary>
            Returns the first few items of this result. The GridGroupingControl
            will loop through this items to determine the optimum width of columns.
            </summary>
            <returns>First few items.</returns>
        </member>
        <member name="P:Syncfusion.Grouping.IPassThroughGroupingResult.GroupByColumns">
            <summary>
            Returns the fields the query is grouped by. A query can be grouped by multiple levels.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.NestedQueryResultsDelegate">
            <summary>
            A delegate that allows the <see cref="T:Syncfusion.Grouping.PassThroughGroupingResult"/> to call back and
            retrieve nested tables with totals on demand.
            </summary>
            <param name="keys">The object array</param>
            <param name="totals">The totals</param>
            <returns>returns IEnumerable</returns>
        </member>
        <member name="T:Syncfusion.Grouping.QueryGroupsDetailsDelegate">
            <summary>
            A delegate that allows the <see cref="T:Syncfusion.Grouping.PassThroughGroupingResult"/> to call back and
            retrieve nested groups details on demand.
            </summary>
            <param name="group">The group value</param>
            <returns>returns IEnumerable</returns>
        </member>
        <member name="T:Syncfusion.Grouping.PassThroughGroupingResult">
            <summary>
            A default implementation of the <see cref="T:Syncfusion.Grouping.IPassThroughGroupingResult"/> with
            support for Linq queries. See the LinqGroupBy example.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.#ctor(System.String,System.Collections.IEnumerable,System.Type,System.Object,System.String[])">
            <summary>
            Constructor for PassThroughGroupingResult.
            </summary>
            <param name="name">A name for this collection.</param>
            <param name="results">The collection that stores the grouping results.</param>
            <param name="itemType">The data type of the items in this collection.</param>
            <param name="totals">The Totals.</param>
            <param name="groupByColumns">The group by columns.</param>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.#ctor(System.String,Syncfusion.Grouping.NestedQueryResultsDelegate,System.Type,System.String[])">
            <summary>
            Constructor for PassThroughGroupingResult.
            </summary>
            <param name="name">A name for this collection.</param>
            <param name="nestedQueryHandler">A <see cref="T:Syncfusion.Grouping.NestedQueryResultsDelegate"/> to retrieve the nested tables with totals on demand.</param>
            <param name="itemType">The data type of the items in this collection.</param>
            <param name="groupByColumns">The group by columns.</param>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.#ctor(System.String,System.Collections.IEnumerable,System.Type,System.Object,System.Collections.IEnumerable,System.String[])">
            <summary>
            Constructor for PassThroughGroupingResult.
            </summary>
            <param name="name">A name for this collection.</param>
            <param name="results">The collection that stores the grouping results.</param>
            <param name="itemType">The data type of the items in this collection.</param>
            <param name="totals">The Totals.</param>
            <param name="sampleResults">Returns first few items of the results.</param>
            <param name="groupByColumns">The group by columns.</param>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.#ctor(System.String,System.Collections.IEnumerable,System.Type,System.Object,Syncfusion.Grouping.QueryGroupsDetailsDelegate,System.Collections.IEnumerable,System.String[])">
            <summary>
            Constructor for PassThroughGroupingResult.
            </summary>
            <param name="name">A name for this collection.</param>
            <param name="results">The collection that stores the grouping results.</param>
            <param name="itemType">The data type of the items in this collection.</param>
            <param name="totals">The Totals.</param>
            <param name="groupsDetailsHandler">The <see cref="T:Syncfusion.Grouping.QueryGroupsDetailsDelegate"/> that retrieves the nested group details on demand.</param>
            <param name="sampleResults">Returns first few items of the results.</param>
            <param name="groupByColumns">The group by columns.</param>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.#ctor(System.String,Syncfusion.Grouping.NestedQueryResultsDelegate,System.Type,System.Collections.IEnumerable,System.String[])">
            <summary>
            Constructor for PassThroughGroupingResult.
            </summary>
            <param name="name">A name for this collection.</param>
            <param name="nestedQueryHandler">A <see cref="T:Syncfusion.Grouping.NestedQueryResultsDelegate"/> to retrieve the nested tables with totals on demand.</param>
            <param name="itemType">The data type of the items in this collection.</param>
            <param name="sampleResults">Returns first few items of the results.</param>
            <param name="groupByColumns">The group by columns.</param>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.#ctor(System.String,Syncfusion.Grouping.NestedQueryResultsDelegate,System.Type,Syncfusion.Grouping.QueryGroupsDetailsDelegate,System.Collections.IEnumerable,System.String[])">
            <summary>
            Constructor for PassThroughGroupingResult.
            </summary>
            <param name="name">A name for this collection.</param>
            <param name="nestedQueryHandler">A <see cref="T:Syncfusion.Grouping.NestedQueryResultsDelegate"/> to retrieve the nested tables with totals on demand.</param>
            <param name="itemType">The data type of the items in this collection.</param>
            <param name="groupsDetailsHandler">The <see cref="T:Syncfusion.Grouping.QueryGroupsDetailsDelegate"/> that retrieves the nested group details on demand.</param>
            <param name="sampleResults">Returns first few items of the results.</param>
            <param name="groupByColumns">The group by columns.</param>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.#ctor(System.String,System.Collections.IEnumerable,System.Type,System.Object,System.Collections.IEnumerable,Syncfusion.Grouping.IRecordUpdateHelper,System.String[])">
            <summary>
            Constructor for PassThroughGroupingResult.
            </summary>
            <param name="name">A name for this collection.</param>
            <param name="results">The collection that stores the grouping results.</param>
            <param name="itemType">The data type of the items in this collection.</param>
            <param name="totals">The Totals.</param>
            <param name="sampleResults">Returns first few items of the results.</param>
            <param name="updateHelper">A <see cref="T:Syncfusion.Grouping.IRecordUpdateHelper"/>.</param>
            <param name="groupByColumns">The group by columns.</param>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.#ctor(System.String,System.Collections.IEnumerable,System.Type,System.Object,System.Collections.IEnumerable,Syncfusion.Grouping.QueryGroupsDetailsDelegate,Syncfusion.Grouping.IRecordUpdateHelper,System.String[])">
            <summary>
            Constructor for PassThroughGroupingResult.
            </summary>
            <param name="name">A name for this collection.</param>
            <param name="results">The collection that stores the grouping results.</param>
            <param name="itemType">The data type of the items in this collection.</param>
            <param name="totals">The Totals.</param>
            <param name="sampleResults">Returns first few items of the results.</param>
            <param name="groupsDetailsHandler">The <see cref="T:Syncfusion.Grouping.QueryGroupsDetailsDelegate"/> that retrieves the nested group details on demand.</param>
            <param name="updateHelper">A <see cref="T:Syncfusion.Grouping.IRecordUpdateHelper"/>.</param>
            <param name="groupByColumns">The group by columns.</param>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.#ctor(System.String,Syncfusion.Grouping.NestedQueryResultsDelegate,System.Type,System.Collections.IEnumerable,Syncfusion.Grouping.IRecordUpdateHelper,System.String[])">
            <summary>
            Constructor for PassThroughGroupingResult.
            </summary>
            <param name="name">A name for this collection.</param>
            <param name="nestedQueryHandler">A <see cref="T:Syncfusion.Grouping.NestedQueryResultsDelegate"/> to retrieve the nested tables with totals on demand.</param>
            <param name="itemType">The data type of the items in this collection.</param>
            <param name="sampleResults">Returns first few items of the results.</param>
            <param name="updateHelper">A <see cref="T:Syncfusion.Grouping.IRecordUpdateHelper"/>.</param>
            <param name="groupByColumns">The group by columns.</param>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.#ctor(System.String,Syncfusion.Grouping.NestedQueryResultsDelegate,System.Type,Syncfusion.Grouping.QueryGroupsDetailsDelegate,System.Collections.IEnumerable,Syncfusion.Grouping.IRecordUpdateHelper,System.String[])">
            <summary>
            Constructor for PassThroughGroupingResult.
            </summary>
            <param name="name">A name for this collection.</param>
            <param name="nestedQueryHandler">A <see cref="T:Syncfusion.Grouping.NestedQueryResultsDelegate"/> to retrieve the nested tables with totals on demand.</param>
            <param name="itemType">The data type of the items in this collection.</param>
            <param name="groupsDetailsHandler">The <see cref="T:Syncfusion.Grouping.QueryGroupsDetailsDelegate"/> that retrieves the nested group details on demand.</param>
            <param name="sampleResults">Returns first few items of the results.</param>
            <param name="updateHelper">A <see cref="T:Syncfusion.Grouping.IRecordUpdateHelper"/>.</param>
            <param name="groupByColumns">The group by columns.</param>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.ChangeResults(System.Collections.IEnumerable,System.Object,System.String[])">
            <summary>
            Applies the given settings to the current object. 
            </summary>
            <param name="results">Pass through grouping results.</param>
            <param name="totals">The Totals.</param>
            <param name="groupByColumns">The group by columns.</param>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.Refresh">
            <summary>
            Refreshes the control.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.GetEnumerator">
            <summary>
            Returns the enumerator for the entire collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns the <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the properties on each item used to bind data. 
            </summary>
            <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor"/> objects to find in the collection as bindable.</param>
            <returns>The <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/>.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Gets the name of the list.
            </summary>
            <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor"/> objects, for which the list name is returned.</param>
            <returns>Name of the list.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.GetItems(Syncfusion.Grouping.Group,System.Object)">
            <summary>
            Returns the items for a given group. The items can either be nested groups or records.
            </summary>
            <param name="group">The group in the grouping engine.</param>
            <param name="item">The item the group is associated with.</param>
            <returns>The items for a given group.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.GetItemCount(Syncfusion.Grouping.Group,System.Object)">
            <summary>
            Returns the child count for a given group. This is the count that is displayed in the caption.
            </summary>
            <param name="group">The group in the grouping engine.</param>
            <param name="item">The item the group is associated with.</param>
            <returns>The child count for a given group.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.GetGroupByKey(System.String,System.Object)">
            <summary>
            Returns the category of a new group that will be associated with the given item.
            </summary>
            <param name="column">A name that matches one of the strings return by <see cref="P:Syncfusion.Grouping.PassThroughGroupingResult.GroupByColumns"/></param>
            <param name="item">The item the group is associated with.</param>
            <returns>The group category for the given item.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.GetValue(System.Object,System.String)">
            <summary>
            Gets the current value of the given property.
            </summary>
            <param name="item">The item whose value needs to be retrieved.</param>
            <param name="name">The property name.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.GetValue(System.Object,System.String,System.Object@)">
            <summary>
            Gets the current value of the specified property.
            </summary>
            <param name="item">The item whose value needs to be retrieved.</param>
            <param name="name">Property name.</param>
            <param name="value">Property value.</param>
            <returns>True if this operation is successful.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.GetTotals">
            <summary>
            Returns totals for the whole table. It can be an integer that represents the count that is displayed 
            in the caption for the TopLevelGroup.
            You can also return a object which contains summaries for the whole table.
            </summary>
            <returns>returns Totals.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.GetNestedItems(Syncfusion.Grouping.RelationDescriptor,Syncfusion.Grouping.ChildTable,System.Object[],System.Object@)">
            <summary>
            Returns the nested items for a parent record when it is expanded. In the implementation
            for this method you should execute a query on the related table and match the records
            to the criteria specified using the keys argument and the RelationDescriptor information
            specified with the rd argument.
            </summary>
            <param name="rd">The RelationDescriptor that describes the relation</param>
            <param name="childTable">The child table where the new items will be added after this method returns.</param>
            <param name="keys">The identifier for the nested records</param>
            <param name="totals">The number of child elements in the nested table or an object with summaries.</param>
            <returns>The results of the query for the nested records.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.GetSampleItems">
            <summary>
            Returns the first few items of this result. The GridGroupingControl
            will loop through this items to determine the optimum width of columns.
            </summary>
            <returns>First few items.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.PassThroughGroupingResult.GetListItemType">
            <summary>
            Returns the data type of the items in the data source. This information is used for instantiating and
            adding new items to the data source.
            </summary>
            <returns>The data type of the items in the datasource.</returns>
        </member>
        <member name="P:Syncfusion.Grouping.PassThroughGroupingResult.UpdateHelper">
            <summary>
            Gets or sets the update helper value.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.PassThroughGroupingResult.KeyProperty">
            <summary>
            Gets or sets the value of key proerty.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.PassThroughGroupingResult.CaptionProperty">
            <summary>
            Gets or sets the value of caption property.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.PassThroughGroupingResult.CountProperty">
            <summary>
            Gets or sets the value of count property.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.PassThroughGroupingResult.DetailsProperty">
            <summary>
            Gets or sets the value of details property.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.PassThroughGroupingResult.NestedQueryHandler">
            <summary>
            Gets or sets the value of nested query handler.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.PassThroughGroupingResult.GroupByColumns">
            <summary>
            Returns the fields the query is grouped by. A query can be grouped by multiple levels.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RecordWithValueCache">
            <summary>
            Record that shadows values in table and can gives hints which values were changed in ListChanged event. The
            new GetOldValue method also gives access to the previous value before a change and can be used for
            calculating the difference between two values.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordWithValueCache.#ctor(Syncfusion.Grouping.Table)">
            <summary>
            Constructor for RecordWithValueCache.
            </summary>
            <param name="parentTable">Parent table.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordWithValueCache.ResetValues">
            <summary>
            Resets cached values.
            </summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordWithValueCache.EnsureValues">
            <summary>
            Ensures that record values are cached. The method is implemented only
            in the RecordWithValueCache class.
            </summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordWithValueCache.GetValue(Syncfusion.Grouping.FieldDescriptor)">
            <summary>
            Gets the value from the underlying datasource.
            </summary>
            <param name="fieldDescriptor">The field to be retrieved.</param>
            <returns>returns Value.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordWithValueCache.GetOldValue(System.Int32)">
            <summary>
            Returns the old value for a record.
            </summary>
            <param name="fieldIndex">Field index.</param>
            <returns>Old value of the record.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordWithValueCache.CompareAndUpdateValues">
            <summary>
            Returns an ArrayList with ChangedFieldInfo objects and updates
            the values in the record with changes found in underylying datasource.
            Only fields with a PropertyDescriptor are updated, others (unbound, expression fields) are ignored. The method is implemented only
            in the RecordWithValueCache class.
            </summary>
            <returns>The collection with detected changes.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordWithValueCache.UpdateValues(System.Collections.IEnumerable)">
            <summary>
            Enumerates through values in the collection of ChangedFieldInfo objects
            and updates the old and new values in this record.
            </summary>
            <param name="changedFields">The changed fields.</param>
            <override/>
        </member>
        <member name="T:Syncfusion.Grouping.RecordPreviewRowsPart">
            <summary>
            A part in a record that serves as a container for <see cref="T:Syncfusion.Grouping.RecordPreviewRow"/>
            elements in a record.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRowsPart.#ctor(Syncfusion.Grouping.Record)">
            <summary>
            Initializes a new object with the given record as parent.
            </summary>
            <param name="parent">The parent record this object is created in.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRowsPart.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRowsPart.GetVisibleCount">
            <summary>Gets the number of visible elements.</summary>
            <returns>Visible element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRowsPart.GetYAmountCount">
            <summary>Gets the element height.</summary>
            <returns>Element height.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRowsPart.InvalidateCounterTopDown(System.Boolean)">
            <summary>Walks down to the child branches and resets counters.</summary>
            <param name="notifyCounterSource">Indicates whether to notify the counter source.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRowsPart.OnEnsureInitialized(System.Object)">
            <summary>
            This virtual method is called from <see cref="M:Syncfusion.Grouping.RecordPreviewRowsPart.OnEnsureInitialized(System.Object)"/> and
            lets derived elements implement element-specific logic to ensure object
            is up to data.
            </summary>
            <param name="sender">The object that triggered the <see cref="M:Syncfusion.Grouping.RecordPreviewRowsPart.OnEnsureInitialized(System.Object)"/> call.</param>
            <returns>
            True if changes were detected and the object was updated; False otherwise.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRowsPart.InvalidateSummariesTopDown">
            <summary>Walks down to the child branches and resets summaries.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRowsPart.InvalidateSummary">
            <summary>Resets the summary.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRowsPart.GetElementCount">
            <summary>
            Gets the number of elements.
            </summary>
            <returns>Number of elements.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRowsPart.AdjustRecordPreviewRowCount">
            <summary>
            Adjusts the record preview row count.
            </summary>
            <returns>returns boolean value</returns>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.RecordPreviewRowsPart.RecordPreviewRows">
            <summary>
            Returns the collection of <see cref="T:Syncfusion.Grouping.RecordPreviewRow"/> elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordPreviewRowsPart.RowElements">
            <summary>
            The collection with row elements.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RecordPreviewRow">
            <summary>
            A RecordPreview row is an optional element shown only in the <see cref="P:Syncfusion.Grouping.Table.DisplayElements"/>
            when a record is collapsed. You get access to this element through the <see cref="P:Syncfusion.Grouping.Record.RecordPreviewRows"/>
            property of a <see cref="T:Syncfusion.Grouping.Record"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRow.#ctor(Syncfusion.Grouping.RecordPreviewRowsPart)">
            <summary>
            Initializes an object with the specified parent element.
            </summary>
            <param name="parent">The parent element.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRow.ToString">
            <summary>Returns a string holding the current object.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRow.GetElementCount">
            <summary>Gets the number of elements.</summary>
            <returns>Element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRow.OnEnsureInitialized(System.Object)">
            <returns>returns boolean value</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRow.GetVisibleCount">
            <summary>Gets the number of visible elements.</summary>
            <returns>Visible element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRow.GetYAmountCount">
            <summary>Gets the element height.</summary>
            <returns>Element height.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.RecordPreviewRow.Kind">
            <summary>Returns the kind of element.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.RecordPreviewRow.ParentElement">
            <summary>
            Returns the parent this element belongs to.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RecordPreviewRowCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Grouping.RecordPreviewRow"/> elements that are children of a <see cref="T:Syncfusion.Grouping.Record"/>.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.Record.RecordPreviewRows"/> property
            of a <see cref="T:Syncfusion.Grouping.Record"/> object. If enabled, PreviewRows are displayed when a record is collapsed.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRowCollection.Contains(Syncfusion.Grouping.RecordPreviewRow)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRowCollection.IndexOf(Syncfusion.Grouping.RecordPreviewRow)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRowCollection.CopyTo(Syncfusion.Grouping.RecordPreviewRow[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRowCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading of the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRowCollection.Insert(System.Int32,Syncfusion.Grouping.RecordPreviewRow)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="value">The element to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRowCollection.Remove(Syncfusion.Grouping.RecordPreviewRow)">
            <summary>
            Removes the specified element from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRowCollection.Add(Syncfusion.Grouping.RecordPreviewRow)">
            <summary>
            Adds a value to the end of the collection.
            </summary>
            <param name="value">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRowCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove. </param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRowCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordPreviewRowCollection.Item(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordPreviewRowCollection.IsReadOnly">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordPreviewRowCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordPreviewRowCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordPreviewRowCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. 
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RecordPreviewRowInSectionCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.RecordPreviewRow"/> elements of a <see cref="T:Syncfusion.Grouping.RecordPreviewRowCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRowInSectionCollectionEnumerator.#ctor(Syncfusion.Grouping.RecordPreviewRowCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRowInSectionCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordPreviewRowInSectionCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.RecordPreviewRowInSectionCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RecordRowsPart">
            <summary>
            A part in a record that serves as a container for <see cref="T:Syncfusion.Grouping.RecordRow"/>
            elements in a record.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRowsPart.#ctor(Syncfusion.Grouping.Record)">
            <summary>
            Initializes a new object with the given record as parent.
            </summary>
            <param name="parent">The parent record this object is created in.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRowsPart.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRowsPart.GetVisibleCount">
            <summary>Gets the number of visible elements.</summary>
            <returns>Visible element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRowsPart.GetYAmountCount">
            <summary>Returns the element height.</summary>
            <returns>Element height.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRowsPart.InvalidateCounterTopDown(System.Boolean)">
            <summary>Walks down to the child branches and resets counters.</summary>
            <param name="notifyCounterSource">Indicates whether to notify the counter source.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRowsPart.OnEnsureInitialized(System.Object)">
            <summary>
            This virtual method is called from <see cref="M:Syncfusion.Grouping.RecordRowsPart.OnEnsureInitialized(System.Object)"/> and
            lets derived elements implement element-specific logic to ensure object
            is up to data.
            </summary>
            <param name="sender">The object that triggered the <see cref="M:Syncfusion.Grouping.RecordRowsPart.OnEnsureInitialized(System.Object)"/> call.</param>
            <returns>
            True if changes were detected and the object was updated; False otherwise.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRowsPart.InvalidateSummariesTopDown">
            <summary>Walks down to the child branches and resets summaries.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRowsPart.InvalidateSummary">
            <summary>Resets summary.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRowsPart.GetElementCount">
            <summary>Gets the number of elements.</summary>
            <returns>Element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRowsPart.AdjustRecordRowCount">
            <summary>
            Adjusts the record row count.
            </summary>
            <returns>returns boolean value to indicate AdjustRecordRowCount</returns>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.RecordRowsPart.RecordRows">
            <summary>
            Returns the collection of <see cref="T:Syncfusion.Grouping.RecordRow"/> elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordRowsPart.RowElements">
            <summary>
            Returns the collection of <see cref="T:Syncfusion.Grouping.RecordPreviewRow"/> elements.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RecordRow">
            <summary>
            A Record row is a place-holder element shown in the <see cref="P:Syncfusion.Grouping.Table.DisplayElements"/>
            for each row in a record. Each record can have multiple record rows. You get access to this element through the <see cref="P:Syncfusion.Grouping.Record.RecordRows"/>
            property of a <see cref="T:Syncfusion.Grouping.Record"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRow.#ctor(Syncfusion.Grouping.RecordRowsPart)">
            <summary>
            Initializes a new object in the specified record part.
            </summary>
            <param name="parent">The parent element.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRow.ToString">
            <summary>Returns a string holding the current object.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRow.GetElementCount">
            <summary>
            Gets the number of elements.
            </summary>
            <returns>Number of elements.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRow.OnEnsureInitialized(System.Object)">
            <returns>returns True if changes were detected and the object was updated; False otherwise</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRow.GetVisibleCount">
            <summary>Gets the number of visible elements.</summary>
            <returns>Number of visible elements.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRow.GetYAmountCount">
            <summary>Gets the element height.</summary>
            <returns>Element height.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.RecordRow.Kind">
            <summary>Gets the kind of element.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.RecordRow.ParentElement">
            <summary>
            Returns the parent this element belongs to.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RecordRowCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Grouping.RecordRow"/> elements that are children of a <see cref="T:Syncfusion.Grouping.Record"/>.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.Record.RecordRows"/> property
            of a <see cref="T:Syncfusion.Grouping.Record"/> object. RecordRows reserve the display area for displaying the fields
            of a record in a grid or report.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRowCollection.Contains(Syncfusion.Grouping.RecordRow)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRowCollection.IndexOf(Syncfusion.Grouping.RecordRow)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRowCollection.CopyTo(Syncfusion.Grouping.RecordRow[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRowCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRowCollection.Insert(System.Int32,Syncfusion.Grouping.RecordRow)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="value">The element to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRowCollection.Remove(Syncfusion.Grouping.RecordRow)">
            <summary>
            Removes the specified element from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRowCollection.Add(Syncfusion.Grouping.RecordRow)">
            <summary>
            Adds a value to the end of the collection.
            </summary>
            <param name="value">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRowCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove. </param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRowCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordRowCollection.Item(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordRowCollection.IsReadOnly">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordRowCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordRowCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RecordRowCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. 
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RecordRowCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.RecordRow"/> elements of a <see cref="T:Syncfusion.Grouping.RecordRowCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRowCollectionEnumerator.#ctor(Syncfusion.Grouping.RecordRowCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRowCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RecordRowCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.RecordRowCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.RowElementCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Grouping.RowElement"/> elements that are children of an <see cref="T:Syncfusion.Grouping.IRowElementsContainer"/>.
            This is a base class for <see cref="T:Syncfusion.Grouping.RecordRowCollection"/>, <see cref="T:Syncfusion.Grouping.RecordPreviewRowCollection"/>, and
            other row collections.
            An instance of this collection is returned by the RowElements property
            of an <see cref="T:Syncfusion.Grouping.IRowElementsContainer"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementCollection.Contains(Syncfusion.Grouping.RowElement)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementCollection.IndexOf(Syncfusion.Grouping.RowElement)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementCollection.CopyTo(Syncfusion.Grouping.RowElement[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading of the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementCollection.Insert(System.Int32,Syncfusion.Grouping.RowElement)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="rowElement">The element to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementCollection.Remove(Syncfusion.Grouping.RowElement)">
            <summary>
            Removes the specified element from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection, the method will do nothing.</param>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementCollection.Add(Syncfusion.Grouping.RowElement)">
            <summary>
            Adds a value to the end of the collection.
            </summary>
            <param name="rowElement">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove. </param>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RowElementCollection.Item(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index.
            </summary>
            <remarks>
            The method 
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            <para/>
            The method calls <see cref="M:Syncfusion.Grouping.Element.EnsureInitialized(System.Object,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.RowElementCollection.IsReadOnly">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RowElementCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RowElementCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.RowElementCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. The property also
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            </summary>
            <remarks>
            If changes in the TableDescriptor are detected, the
            method will reinitialize the collection before returning the count.
            </remarks>
        </member>
        <member name="T:Syncfusion.Grouping.RowElementCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.RowElement"/> elements of a <see cref="T:Syncfusion.Grouping.RowElementCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementCollectionEnumerator.#ctor(System.Collections.IList)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.RowElementCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.RowElementCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.SourceListSetEntry">
            <summary>
            Provides access to the underlying source lists for entries in the <see cref="P:Syncfusion.Grouping.Engine.SourceListSet"/>.
            SourceListSetEntry classes are used by the <see cref="T:Syncfusion.Grouping.RelationDescriptor"/> to look up related lists
            for a parent table at run-time and to determine schema information for the table descriptor of the
            related table. If the engine's datasource is a DataView or DataTable, SourceListSetEntry entries are
            populated from the DataTable and DataView objects within the DataViewManager or DataSet.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSetEntry.#ctor">
            <summary>
            Initializes a new empty SourceListSetEntry.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSetEntry.#ctor(System.String,System.Collections.IEnumerable)">
            <summary>
            Initializes a new SourceListSetEntry with a name and the list that is referenced.
            </summary>
            <param name="name">The name of the list. This name is used to look up the entry.</param>
            <param name="list">The list this item references and provides access for.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSetEntry.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new SourceListSetEntry with a name and the list that is referenced.
            </summary>
            <param name="list">The list this item references and provides access for. The name of the list is determined
            by testing the list for implementation of ITypedList interface which then has a GetName property.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSetEntry.ResetName">
            <summary>
            Resets the name of the list back to its original value. The original name of the list is determined
            by testing the list for implementation of the ITypedList interface which then has a GetName property.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSetEntry.OnNameChanged(System.EventArgs)">
            <summary>
            Raises the  <see cref="F:Syncfusion.Grouping.SourceListSetEntry.name"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSetEntry.ResetList">
            <summary>
            Resets the <see cref="P:Syncfusion.Grouping.SourceListSetEntry.List"/> to NULL.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSetEntry.OnListChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="F:Syncfusion.Grouping.SourceListSetEntry.list"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSetEntry.Dispose">
            <summary>
            Disposes of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SourceListSetEntry.Name">
            <summary>
            The name of the list. This name is used to look up the entry.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.SourceListSetEntry.NameChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Grouping.SourceListSetEntry.Name"/> is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SourceListSetEntry.List">
            <summary>
            The list that this entry references and provides access for.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.SourceListSetEntry.ListChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Grouping.SourceListSetEntry.List"/> is replaced.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.SourceListSet">
            <summary>
            This collection is only meant to be initialized at run-time. It does not
            support design-time. It also does not raise events when it is changed;
            it should be setup only once after Engine.SetSourceList is called.
            It listens to the engine.SourceListChanged event and checks if it can get to
            a "DataSet". If that is the case, then the DataSet.Tables collection is 
            copied over.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.SourceListSet.Empty">
            <summary>
            A Read-only empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSet.#ctor(Syncfusion.Grouping.Engine)">
            <summary>
            Initializes a new SourceListSet that belongs to the specified engine.
            </summary>
            <param name="engine">The engine this set belongs to.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSet.InitializeFromDataSet(System.Data.DataSet)">
            <summary>
            Populates the entries from a DataSet.
            </summary>
            <param name="ds">The DataSet.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSet.Contains(System.String)">
            <summary>
            Determines if the element with the specified name belongs to this collection.
            </summary>
            <param name="name">The name of the element to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSet.Contains(Syncfusion.Grouping.SourceListSetEntry)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSet.GetEnumerator">
            <summary>
            Returns a strong-typed enumerator.
            </summary>
            <returns>A strong-typed enumerator.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSet.Remove(Syncfusion.Grouping.SourceListSetEntry)">
            <summary>
            Removes the specified element from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSet.Add(Syncfusion.Grouping.SourceListSetEntry)">
            <summary>
            Adds a SourceListSetEntry to the end of the collection.
            </summary>
            <param name="value">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSet.Add(System.String,System.Collections.IEnumerable)">
            <summary>
            Creates a SourceListSetEntry and adds it to the end of the collection.
            </summary>
            <param name="name">The name of the entry.</param>
            <param name="list">The IList.</param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSet.Add(System.String,System.ComponentModel.IListSource)">
            <summary>
            Creates a SourceListSetEntry and adds it to the end of the collection.
            </summary>
            <param name="name">The name of the entry.</param>
            <param name="list">The IListSource.</param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSet.Add(System.Collections.IEnumerable)">
            <summary>
            Creates a SourceListSetEntry and adds it to the end of the collection.
            </summary>
            <param name="list">The IList.</param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSet.Add(System.ComponentModel.IListSource)">
            <summary>
            Creates a SourceListSetEntry and adds it to the end of the collection.
            </summary>
            <param name="list">The IListSource.</param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSet.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSet.CopyTo(Syncfusion.Grouping.SourceListSetEntry[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSet.Dispose">
            <summary>
            Disposes of the object and entries.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSet.GetStandardValues(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Provide collection of choices for RelationDescriptor.ChildTableName.
            </summary>
            <param name="pd">The property descriptor.</param>
            <returns>A list of choices for child table name.</returns>
        </member>
        <member name="P:Syncfusion.Grouping.SourceListSet.Version">
            <summary>
            The version number of this collection. The version is increased each time the
            collection or an element within the collection was modified.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SourceListSet.DataSet">
            <summary>
            The underlying DataSet
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SourceListSet.Item(System.String)">
            <summary>
            Gets / sets the entry with the specified name.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SourceListSet.Count">
            <summary>
            Gets the number of elements contained in the collection. 
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.SourceListSet.ClearAllWhenEngineSourceListChanged">
            <summary>
            When you assign a new datasource to the Engine, the SourceListSet still holds references
            to the previous list. When this property is True, the SourceListSet will check if the new
            datasource has an entry in the SourceListSet. If it is a new DataSource, the SourceListSet 
            will clear itself and then add the new datasource. This is necessary to avoid memory leaks. If 
            the clear causes problems (e.g. a Relation does not show up), you can force the SourceListSet
            never to clear its contents when the Engine.SetSourceList is called or Engine.DataSource is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.SourceListSetEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.SourceListSetEntry"/> elements of a <see cref="T:Syncfusion.Grouping.SourceListSet"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSetEnumerator.#ctor(Syncfusion.Grouping.SourceListSet)">
            <summary>
            Initializes an enumerator for a <see cref="T:Syncfusion.Grouping.SourceListSet"/>.
            </summary>
            <param name="collection">The <see cref="T:Syncfusion.Grouping.SourceListSet"/> to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSetEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SourceListSetEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.SourceListSetEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.SummaryBase">
            <summary>
            Implements the ITreeTableSummary interface and should be used as base class for
            custom summary objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SummaryBase.Combine(Syncfusion.Grouping.SummaryBase)">
            <overload>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </overload>
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object (of the same type).</param>
            <returns>A new summary object with combined values of both summaries.</returns>
        </member>
        <member name="P:Syncfusion.Grouping.SummaryBase.Info">
            <summary>
            Results of ToString method.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.CountSummary">
            <summary>
            Counts non-null entries. If SummaryDescriptor.Name is an empty string, records are counted.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.ICountAggregate">
            <summary>
            Provides a <see cref="P:Syncfusion.Grouping.ICountAggregate.Count"/> getter.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ICountAggregate.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.CountSummary.Empty">
            <summary>
            The initial summary object for empty records or tables.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CountSummary.CreateSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Creates a summary object for the specified SummaryDescriptor and Record.
            </summary>
            <param name="sd">The summary descriptor.</param>
            <param name="record">The record with data.</param>
            <returns>A new summary object.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CountSummary.CreatePageSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Used to interface with the page summary 
            </summary>
            <param name="sd">summary descriptor</param>
            <param name="record">record values</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Grouping.CountSummary.#ctor(System.Int32)">
            <summary>
            Initializes a new summary object with the specified count.
            </summary>
            <param name="valueCount">The count value.</param>
        </member>
        <member name="M:Syncfusion.Grouping.CountSummary.Combine(Syncfusion.Grouping.SummaryBase)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object.</param>
            <returns>A new summary object with combined values of both summaries.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.CountSummary.Combine(Syncfusion.Grouping.CountSummary)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object (of the same type).</param>
            <returns>A new summary object with combined values of both summaries.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CountSummary.ToString">
            <summary>Returns string representation of the summary object.</summary>
            <returns>A string holding the summary value.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.CountSummary.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.MaxLengthSummary">
            <summary>
            Summarizes string fields and lets you determine the maximum length of a string in the column.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.MaxLengthSummary.Empty">
            <summary>
            The initial summary object for empty records or tables.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.MaxLengthSummary.CreateSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Creates a summary object for the specified SummaryDescriptor and Record.
            </summary>
            <param name="sd">The summary descriptor.</param>
            <param name="record">The record with data.</param>
            <returns>A new summary object.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.MaxLengthSummary.CreatePageSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Used to interface with page summary
            </summary>
            <param name="sd">SummaryDescriptor</param>
            <param name="record">Record values.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Grouping.MaxLengthSummary.#ctor(System.Int32)">
            <summary>
            Initializes a new summary object with the specified length.
            </summary>
            <param name="maxLength">The length value.</param>
        </member>
        <member name="M:Syncfusion.Grouping.MaxLengthSummary.Combine(Syncfusion.Grouping.SummaryBase)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object.</param>
            <returns>A new summary object with combined values of both summaries.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.MaxLengthSummary.Combine(Syncfusion.Grouping.MaxLengthSummary)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object (of the same type).</param>
            <returns>A new summary object with combined values of both summaries.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.MaxLengthSummary.ToString">
            <summary>
            Returns string representation of the summary object.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.MaxLengthSummary.MaxLength">
            <summary>
            Gets the maximum length.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.IAverageAggregate">
            <summary>
            Provides an <see cref="P:Syncfusion.Grouping.IAverageAggregate.Average"/> getter.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.IAverageAggregate.Average">
            <summary>
            Gets the average.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.Int32AggregateSummary">
            <summary>
            Summarizes integer fields. Provides Count, Minimum, Maximum, Sum, and Average.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.Int32AggregateSummary.Empty">
            <summary>
            The initial summary object for empty records or tables.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Int32AggregateSummary.CreateSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Creates a summary object for the specified SummaryDescriptor and Record.
            </summary>
            <param name="sd">The summary descriptor.</param>
            <param name="record">The record with data.</param>
            <returns>A new summary object.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Int32AggregateSummary.CreatePageSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Used to interface with page summary
            </summary>
            <param name="sd">SummaryDescriptor</param>
            <param name="record">record values.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Grouping.Int32AggregateSummary.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new summary object with the specified values.
            </summary>
            <param name="count">The Count value.</param>
            <param name="minimum">Minimum value.</param>
            <param name="maximum">Maximum value.</param>
            <param name="sum">The Sum value.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Int32AggregateSummary.Combine(Syncfusion.Grouping.SummaryBase)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object.</param>
            <returns>A new summary object with combined values of both summaries.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Int32AggregateSummary.Combine(Syncfusion.Grouping.Int32AggregateSummary)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object (of the same type).</param>
            <returns>A new summary object with combined values of both summaries.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Int32AggregateSummary.ToString">
            <summary>Returns string representation of the summary object.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.Int32AggregateSummary.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Int32AggregateSummary.Minimum">
            <summary>
            Gets the minimum.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Int32AggregateSummary.Maximum">
            <summary>
            Gets the maximum.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Int32AggregateSummary.Sum">
            <summary>
            Gets the sum.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Int32AggregateSummary.Average">
            <summary>
            Gets the average.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.DoubleAggregateSummary">
            <summary>
            Summarizes System.Double fields. Provides Count, Minimum, Maximum, Sum, and Average.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.DoubleAggregateSummary.Empty">
            <summary>
            The initial summary object for empty records or tables.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.DoubleAggregateSummary.CreateSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Creates a summary object for the specified SummaryDescriptor and Record.
            </summary>
            <param name="sd">The summary descriptor.</param>
            <param name="record">The record with data.</param>
            <returns>A new summary object.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.DoubleAggregateSummary.CreatePageSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Used to interface with the page summary 
            </summary>
            <param name="sd">summary descriptor</param>
            <param name="record">record values.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Grouping.DoubleAggregateSummary.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new summary object with the specified values.
            </summary>
            <param name="count">The Count value.</param>
            <param name="minimum">The Minimum value.</param>
            <param name="maximum">The Maximum value.</param>
            <param name="sum">The Sum value.</param>
        </member>
        <member name="M:Syncfusion.Grouping.DoubleAggregateSummary.Combine(Syncfusion.Grouping.SummaryBase)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object.</param>
            <returns>A new summary object with combined values of both summaries.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.DoubleAggregateSummary.Combine(Syncfusion.Grouping.DoubleAggregateSummary)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object (of the same type).</param>
            <returns>A new summary object with combined values of both summaries.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.DoubleAggregateSummary.ToString">
            <summary>Returns string representation of the summary object.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.DoubleAggregateSummary.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DoubleAggregateSummary.Minimum">
            <summary>
            Gets the minimum.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DoubleAggregateSummary.Maximum">
            <summary>
            Gets the maximum.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DoubleAggregateSummary.Sum">
            <summary>
            Gets the sum.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DoubleAggregateSummary.Average">
            <summary>
            Gets the average.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.CharAggregateSummary">
            <summary>
            Summarizes Byte fields. Provides Count, Minimum, Maximum.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.CharAggregateSummary.Empty">
            <summary>
            The initial summary object for empty records or tables.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.CharAggregateSummary.CreateSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Creates a summary object for the specified SummaryDescriptor and Record.
            </summary>
            <param name="sd">The summary descriptor.</param>
            <param name="record">The record with data.</param>
            <returns>A new summary object.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CharAggregateSummary.CreatePageSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Used to interface with the page summary 
            </summary>
            <param name="sd">summary descriptor</param>
            <param name="record">record values</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Grouping.CharAggregateSummary.#ctor(System.Int32,System.Char,System.Char)">
            <summary>
            Initializes a new summary object with the specified values.
            </summary>
            <param name="count">The Count value.</param>
            <param name="minimum">Minimum value.</param>
            <param name="maximum">Maximum value.</param>
        </member>
        <member name="M:Syncfusion.Grouping.CharAggregateSummary.Combine(Syncfusion.Grouping.SummaryBase)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object.</param>
            <returns>A new summary object with combined values of both summaries.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.CharAggregateSummary.Combine(Syncfusion.Grouping.CharAggregateSummary)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object (of the same type).</param>
            <returns>A new summary object with combined values of both summaries.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.CharAggregateSummary.ToString">
            <summary>Returns string representation of the summary object.</summary>
            <returns>A string holding the summary value.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.CharAggregateSummary.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CharAggregateSummary.Minimum">
            <summary>
            Gets the minimum.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.CharAggregateSummary.Maximum">
            <summary>
            Gets the maximum.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.ByteAggregateSummary">
            <summary>
            Summarizes Byte fields. Provides Count, Minimum, Maximum, Sum, and Average.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.ByteAggregateSummary.Empty">
            <summary>
            The initial summary object for empty records or tables.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ByteAggregateSummary.CreateSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Creates a summary object for the specified SummaryDescriptor and Record.
            </summary>
            <param name="sd">The summary descriptor.</param>
            <param name="record">The record with data.</param>
            <returns>A new summary object.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.ByteAggregateSummary.CreatePageSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Used to interface with the page summary
            </summary>
            <param name="sd">summary descriptor</param>
            <param name="record">record value</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Grouping.ByteAggregateSummary.#ctor(System.Int32,System.Byte,System.Byte,System.Int32)">
            <summary>
            Initializes a new summary object with the specified values.
            </summary>
            <param name="count">The Count value.</param>
            <param name="minimum">Minimum value.</param>
            <param name="maximum">Maximum value.</param>
            <param name="sum">The Sum value.</param>
        </member>
        <member name="M:Syncfusion.Grouping.ByteAggregateSummary.Combine(Syncfusion.Grouping.SummaryBase)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object.</param>
            <returns>A new summary object with combined values of both summaries.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.ByteAggregateSummary.Combine(Syncfusion.Grouping.ByteAggregateSummary)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object (of the same type).</param>
            <returns>A new summary object with combined values of both summaries.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.ByteAggregateSummary.ToString">
            <summary>Returns string representation of the summary object.</summary>
            <returns>A string holding the summary value.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.ByteAggregateSummary.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ByteAggregateSummary.Minimum">
            <summary>
            Gets the minimum.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ByteAggregateSummary.Maximum">
            <summary>
            Gets the maximum.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ByteAggregateSummary.Sum">
            <summary>
            Gets the sum.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ByteAggregateSummary.Average">
            <summary>
            Gets the average.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.BooleanAggregateSummary">
            <summary>
            Summarizes Boolean fields. Provides Count, TrueCount, and FalseCount.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.BooleanAggregateSummary.Empty">
            <summary>
            The initial summary object for empty records or tables.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.BooleanAggregateSummary.CreateSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Creates a summary object for the specified SummaryDescriptor and Record.
            </summary>
            <param name="sd">The summary descriptor.</param>
            <param name="record">The record with data.</param>
            <returns>A new summary object.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.BooleanAggregateSummary.CreatePageSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Used to Interface with the page summary
            </summary>
            <param name="sd"></param>
            <param name="record"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Grouping.BooleanAggregateSummary.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new summary object with the specified values.
            </summary>
            <param name="count">The Count value.</param>
            <param name="countFalse">False count.</param>
            <param name="countTrue">True count.</param>
        </member>
        <member name="M:Syncfusion.Grouping.BooleanAggregateSummary.Combine(Syncfusion.Grouping.SummaryBase)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object.</param>
            <returns>A new summary object with combined values of both summaries.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.BooleanAggregateSummary.Combine(Syncfusion.Grouping.BooleanAggregateSummary)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object (of the same type).</param>
            <returns>A new summary object with combined values of both summaries.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.BooleanAggregateSummary.ToString">
            <summary>Returns a string holding the summary value.</summary>
            <returns>A string holding the summary value.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.BooleanAggregateSummary.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.BooleanAggregateSummary.FalseCount">
            <summary>
            Gets the count of False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.BooleanAggregateSummary.TrueCount">
            <summary>
            Gets the count of True.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.StringAggregateSummary">
            <summary>
            Summarizes string fields. Provides Count and MaximumLength.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.StringAggregateSummary.Empty">
            <summary>
            The initial summary object for empty records or tables.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.StringAggregateSummary.CreateSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Creates a summary object for the specified SummaryDescriptor and Record.
            </summary>
            <param name="sd">The summary descriptor.</param>
            <param name="record">The record with data.</param>
            <returns>A new summary object.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.StringAggregateSummary.CreatePageSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Create the interface with page summary method.
            </summary>
            <param name="sd">SummaryDescriptor</param>
            <param name="record">record value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Grouping.StringAggregateSummary.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new summary object with the specified values.
            </summary>
            <param name="count">The Count value.</param>
            <param name="maxLength">Maximum length.</param>
        </member>
        <member name="M:Syncfusion.Grouping.StringAggregateSummary.Combine(Syncfusion.Grouping.SummaryBase)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object.</param>
            <returns>A new summary object with combined values of both summaries.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.StringAggregateSummary.Combine(Syncfusion.Grouping.StringAggregateSummary)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object (of the same type).</param>
            <returns>A new summary object with combined values of both summaries.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.StringAggregateSummary.ToString">
            <summary>Returns string representation of the summary object.</summary>
            <returns>A string holding the summary object.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.StringAggregateSummary.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.StringAggregateSummary.MaxLength">
            <summary>
            Gets the maximum length.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.VectorSummary">
            <summary>
            Collects all entries of a column in a sorted vector.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.VectorSummary.Empty">
            <summary>
            The initial summary object for empty records or tables.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.VectorSummary.CreateSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Creates a summary object for the specified SummaryDescriptor and Record.
            </summary>
            <param name="sd">The summary descriptor.</param>
            <param name="record">The record with data.</param>
            <returns>A new summary object.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.VectorSummary.CreatePageSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Used to interface the definition for a summary object.
            </summary>
            <param name="sd">SummaryDescriptor</param>
            <param name="record">Record values</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Grouping.VectorSummary.#ctor(System.Object[],System.Int32)">
            <summary>
            Initializes a new summary object with the specified values.
            </summary>
            <param name="values">Summary values.</param>
            <param name="length">Number of values.</param>
        </member>
        <member name="M:Syncfusion.Grouping.VectorSummary.Combine(Syncfusion.Grouping.SummaryBase)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object.</param>
            <returns>A new summary object with combined values of both summaries.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.VectorSummary.Combine(Syncfusion.Grouping.VectorSummary)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object (of the same type).</param>
            <returns>A new summary object with combined values of both summaries.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.VectorSummary.CombineHelper(Syncfusion.Grouping.VectorSummary,System.Boolean,System.Int32@)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object (of the same type).</param>
            <param name="distinct">True if vector should only contain unique values; False if duplicates are allowed.</param>
            <param name="length">The resulting length of the vector.</param>
            <returns>A new summary object with combined values of both summaries.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.VectorSummary.ToString">
            <summary>Returns string representation of the summary object.</summary>
            <returns>String representation of the summary object.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.VectorSummary.Count">
            <summary>
            Gets the number of elements in the vector.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.VectorSummary.Values">
            <summary>
            Gets the array with values in the vector.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.DistinctCountSummary">
            <summary>
            Provides distinct count of a field and a vector with all distinct values of the field.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.DistinctCountSummary.Empty">
            <summary>
            The initial summary object for empty records or tables.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.DistinctCountSummary.CreateSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Creates a summary object for the specified SummaryDescriptor and Record.
            </summary>
            <param name="sd">The summary descriptor.</param>
            <param name="record">The record with data.</param>
            <returns>A new summary object.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.DistinctCountSummary.CreatePageSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Used to interface with the page summary 
            </summary>
            <param name="sd">summmary descriptor</param>
            <param name="record">record values.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Grouping.DistinctCountSummary.#ctor(System.Object[],System.Int32)">
            <summary>
            Initializes a new summary object with the specified values.
            </summary>
            <param name="values">Object array that contains summary values.</param>
            <param name="length">Number of values.</param>
        </member>
        <member name="M:Syncfusion.Grouping.DistinctCountSummary.Combine(Syncfusion.Grouping.SummaryBase)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object.</param>
            <returns>A new summary object with combined values of both summaries.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.DistinctCountSummary.Combine(Syncfusion.Grouping.DistinctCountSummary)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object (of the same type).</param>
            <returns>A new summary object with combined values of both summaries.</returns>
        </member>
        <member name="T:Syncfusion.Grouping.DoubleVectorSummary">
            <summary>
            Collects all entries of a column in a sorted vector. Provides statistical functions
            that work on this set such as Median, Percentile25, Percentile75, and PercentileQ.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.DoubleVectorSummary.Empty">
            <summary>
            The initial summary object for empty records or tables.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.DoubleVectorSummary.CreateSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Creates a summary object for the specified SummaryDescriptor and Record.
            </summary>
            <param name="sd">The summary descriptor.</param>
            <param name="record">The record with data.</param>
            <returns>A new summary object.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.DoubleVectorSummary.CreatePageSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Used to interface with the page summary 
            </summary>
            <param name="sd">summary descriptor</param>
            <param name="record">record values.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Grouping.DoubleVectorSummary.#ctor(System.Double[],System.Int32)">
            <summary>
            Initializes a new summary object with the specified values.
            </summary>
            <param name="values">An object array containing summary values.</param>
            <param name="_length">Number of values.</param>
        </member>
        <member name="M:Syncfusion.Grouping.DoubleVectorSummary.Combine(Syncfusion.Grouping.SummaryBase)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object.</param>
            <returns>A new summary object with combined values of both summaries.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.DoubleVectorSummary.Combine(Syncfusion.Grouping.DoubleVectorSummary)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object (of the same type).</param>
            <returns>A new summary object with combined values of both summaries.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.DoubleVectorSummary.CombineHelper(Syncfusion.Grouping.DoubleVectorSummary,System.Boolean,System.Int32@)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object (of the same type).</param>
            <param name="distinct">True if vector should only contain unique values; False if duplicates are allowed.</param>
            <param name="length">The resulting length of the vector.</param>
            <returns>A new summary object with combined values of both summaries.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.DoubleVectorSummary.ToString">
            <summary>Returns string representation of the summary object.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.DoubleVectorSummary.Count">
            <summary>
            Gets the number of elements in the vector.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DoubleVectorSummary.Values">
            <summary>
            Gets the array with values in the vector.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DoubleVectorSummary.Median">
            <summary>
            Gets the statistical median.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DoubleVectorSummary.Percentile25">
            <summary>
            Gets the statistical Percentile25.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DoubleVectorSummary.Percentile75">
            <summary>
            Gets the statistical Percentile75.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.DoubleVectorSummary.PercentileQ">
            <summary>
            Gets the statistical PercentileQ.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.FilterBarChoicesSummary">
            <summary>
            Provides distinct values of a field that can be used in a filterbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.FilterBarChoicesSummary.Empty">
            <summary>
            The initial summary object for empty records or tables.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarChoicesSummary.CreateSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Creates a summary object for the specified SummaryDescriptor and record.
            </summary>
            <param name="sd">The summary descriptor.</param>
            <param name="record">The record with data.</param>
            <returns>A new summary object.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarChoicesSummary.CreatePageSummaryMethod(Syncfusion.Grouping.SummaryDescriptor,Syncfusion.Grouping.Record)">
            <summary>
            Used to interface with the page summary 
            </summary>
            <param name="sd">summary descriptor</param>
            <param name="record">record values</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarChoicesSummary.#ctor(System.Object[],System.Int32)">
            <summary>
            Initializes a new summary object with the specified values.
            </summary>
            <param name="values">Summary values.</param>
            <param name="length">Number of values.</param>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarChoicesSummary.Combine(Syncfusion.Grouping.SummaryBase)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object.</param>
            <returns>A new summary object with combined values of both summaries.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.FilterBarChoicesSummary.Combine(Syncfusion.Grouping.FilterBarChoicesSummary)">
            <summary>
            Combines the values of this summary with another summary and returns
            a new summary object.
            </summary>
            <param name="other">Another summary object (of the same type).</param>
            <returns>A new summary object with combined values of both summaries.</returns>
        </member>
        <member name="T:Syncfusion.Grouping.ISummarySection">
            <summary>
            Identifies element as summary section.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.SummarySection">
            <summary>
            The summary section with one visible element for showing a summary below a group in <see cref="P:Syncfusion.Grouping.Table.DisplayElements"/>. The summary
            information can be determined by calling <see cref="M:Syncfusion.Grouping.Group.GetSummaries(Syncfusion.Grouping.Table,System.Boolean@)"/> on the <see cref="T:Syncfusion.Grouping.Group"/> that this summary section
            belongs to.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.SummarySection.#ctor(Syncfusion.Grouping.Group)">
            <summary>
            Initializes a new section in the specified group.
            </summary>
            <param name="parent">The group this section is created in</param>
        </member>
        <member name="M:Syncfusion.Grouping.SummarySection.GetVisibleCount">
            <summary>Gets the number of visible elements.</summary>
            <returns>Visible element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SummarySection.GetYAmountCount">
            <summary>Gets the element height.</summary>
            <returns>Element height.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SummarySection.InvalidateCounterTopDown(System.Boolean)">
            <summary>Resets the counter for all elements.</summary>
            <param name="notifyCounterSource">When true notifies the counter source.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SummarySection.InvalidateSummariesTopDown">
            <summary>Resets the summary for all elements.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SummarySection.InvalidateSummary">
            <summary>Resets the summary.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SummarySection.GetFilteredRecordCount">
            <summary>Gets the number of filtered records.</summary>
            <returns>Filtered record count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SummarySection.GetElementCount">
            <summary>Gets the number of elements.</summary>
            <returns>Element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SummarySection.GetRecordCount">
            <summary>Gets the number of records.</summary>
            <returns>Record count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.SummarySection.GetSummaries(Syncfusion.Grouping.Table,System.Boolean@)">
            <override/>
            <summary>
            Gets summary information for the current element and all its childs.
            </summary>
            <param name="parentTable">A reference to the parent table.</param>
            <param name="summaryChanged">Returns true if changes were detected.</param>
            <returns>Summary information.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.SummarySection.ToString">
            <summary>Returns a string holding the current object.</summary>
            <returns>String representation of the current object.</returns>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.SummarySection.Kind">
            <summary>Gets the kind of display element.</summary>
            <override/>
        </member>
        <member name="T:Syncfusion.Grouping.ITableSource">
            <summary>
            Provides a method to access a <see cref="T:Syncfusion.Grouping.Table"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableSource.GetTable">
            <summary>
            Returns a <see cref="T:Syncfusion.Grouping.Table"/>.
            </summary>
            <returns>returns Table value</returns>
        </member>
        <member name="T:Syncfusion.Grouping.Table">
            <summary>
            The Table class provides a flattened view of grouped and hierarchical records and
            manages all the records from the underlying source list.
            </summary>
            <remarks>
            The table manages all the records from the underlying source list. The source list can be any
            IList collection. If it implements IBindingList, the table will listen to the ListChangedEvent
            and update its internal data whenever changes are made to the source list.<para/>
            <para/>
            When the Table is initialized for the first time it will loop through all items in the source
            list and create a record object. The record object will be initialized with an index to the underlying
            source list item so that it can locate the item when you call its Record.GetData() property.
            Record.GetData() looks up the item in the underlying source list and returns a reference to it.<para/>
            <para/>
            Once a record object has been initialized, it will stay attached to the underlying item. When
            records are inserted or moved, this relation will stay intact. The only time this link between
            record and the underlying item is released is when the underlying item gets deleted from the
            source list. In that event, the record object gets disposed. A record's sorted record index
            within the table can at any time be determined with the Table.Records.IndexOf(record) method.
            This method will always return the accurate index respecting any insertions, movements, or changes
            that were made in the source list.
            <para/>
            When looping through the source list and intializing the records, the table also checks
            if categorization of data is necessary. When the TableDescriptor.RelationChildColumns or
            TableDescriptor.GroupedColumns collection are not empty, groups will be created for
            each new category.
            <para/>
            A table has one main group, the <see cref="P:Syncfusion.Grouping.Table.TopLevelGroup"/>. The <see cref="P:Syncfusion.Grouping.Table.TopLevelGroup"/>
            gives you access to a list of child groups and child records.
            <para/>
            The order of records and groups is defined by the <see cref="P:Syncfusion.Grouping.Table.TableDescriptor"/> with schema
            information about the table. Once you make changes to the <see cref="P:Syncfusion.Grouping.Table.TableDescriptor"/>, the
            table will be updated on demand the first time you try to access elements of the table after
            the change.
            <para/>
            There are multiple ways to get access to a specific record: <para/>
            <list type="bullet">
            <item><term>
            The <see cref="P:Syncfusion.Grouping.Table.UnsortedRecords"/> collection of the <see cref="T:Syncfusion.Grouping.Table"/> class provides access to the records
            in the same order as they appear in the datasource. The <see cref="M:Syncfusion.Grouping.UnsortedRecordsCollection.IndexOf(Syncfusion.Grouping.Record)"/> method
            of a <see cref="T:Syncfusion.Grouping.UnsortedRecordsCollection"/> determines the index of any record in the underlying datasource.
            </term></item>
            <item><term>
            The <see cref="P:Syncfusion.Grouping.Table.Records"/> collection of the <see cref="T:Syncfusion.Grouping.Table"/> class provides access to the records
            in the order as they were sorted in the engine. The <see cref="M:Syncfusion.Grouping.RecordsInTableCollectionBase.IndexOf(Syncfusion.Grouping.Record)"/> method
            of a <see cref="T:Syncfusion.Grouping.RecordsInTableCollection"/> determines the index of any record in the Table.Records collection.
            </term></item>
            <item><term>
            The <see cref="P:Syncfusion.Grouping.Table.FilteredRecords"/> collection of the <see cref="T:Syncfusion.Grouping.Table"/> class provides access to records that
            meet filter criteria in the order they were sorted in the engine. The <see cref="M:Syncfusion.Grouping.RecordsInTableCollectionBase.IndexOf(Syncfusion.Grouping.Record)"/> method
            of a <see cref="T:Syncfusion.Grouping.RecordsInTableCollection"/> determines the index of any record in the Table.FilteredRecords collection.
            </term></item>
            <item><term>
            The <see cref="P:Syncfusion.Grouping.Group.Records"/> collection of the <see cref="T:Syncfusion.Grouping.Group"/> class provides access to the records
            in the order they appear in the group. The <see cref="M:Syncfusion.Grouping.RecordsInDetailsCollection.IndexOf(System.String)"/> method
            of a <see cref="T:Syncfusion.Grouping.RecordsInDetailsCollection"/> determines the index of any record in the Group.Records collection.
            </term></item>
            <item><term>
            The <see cref="P:Syncfusion.Grouping.Group.FilteredRecords"/> collection of the <see cref="T:Syncfusion.Grouping.Group"/> class provides access to the records
            in the order they appear in the group. The <see cref="M:Syncfusion.Grouping.FilteredRecordsInDetailsCollection.IndexOf(Syncfusion.Grouping.Record)"/> method
            of a <see cref="T:Syncfusion.Grouping.FilteredRecordsInDetailsCollection"/> determines the index of any record in the Group.FilteredRecords collection.
            </term></item>
            </list>
            Any element in the table can be accessed using its element or display index. There are four
            collections that let you access elements:
            <list type="bullet">
            <item><term>
            The <see cref="P:Syncfusion.Grouping.Table.DisplayElements"/> collection of the <see cref="T:Syncfusion.Grouping.Table"/> class provides access to the visible
            display elements. The <see cref="M:Syncfusion.Grouping.RuntimeElementsInTableCollection.IndexOf(Syncfusion.Grouping.Element)"/> method
            of a <see cref="T:Syncfusion.Grouping.DisplayElementsInTableCollection"/> determines the visible index of any element in the table. <para/>
            With a GridGroupingControl, the index of display elements is the same as the row index in the grid. Therefore,
            given a row index of the grid you can easily determine the element that is to be shown at the specific row. Vice versa,
            if you do have an element, you can easily determine its row index with the <see cref="M:Syncfusion.Grouping.RuntimeElementsInTableCollection.IndexOf(Syncfusion.Grouping.Element)"/> method.
            The <see cref="P:Syncfusion.Grouping.Table.DisplayElements"/> collection does not step into a <see cref="T:Syncfusion.Grouping.NestedTable"/> element.
            </term></item>
            <item><term>
            The <see cref="P:Syncfusion.Grouping.Table.NestedDisplayElements"/> collection of the <see cref="T:Syncfusion.Grouping.Table"/> class provides access to the visible
            display elements and nested elements inside nested tables. The <see cref="M:Syncfusion.Grouping.RuntimeElementsInTableCollection.IndexOf(Syncfusion.Grouping.Element)"/> method
            of a <see cref="T:Syncfusion.Grouping.DisplayElementsInTableCollection"/> determines the visible index of any element in the table. <para/>
            The <see cref="P:Syncfusion.Grouping.Table.NestedDisplayElements"/> collection steps into a <see cref="T:Syncfusion.Grouping.NestedTable"/> element.
            </term></item>
            <item><term>
            The <see cref="P:Syncfusion.Grouping.Table.Elements"/> collection returns all elements of the <see cref="T:Syncfusion.Grouping.Table"/>
            in the order as they appear if they would be visible. Any element is returned, also records that are not visible
            in the DisplayElements collection because a parent group was collapsed are returned.
            The <see cref="M:Syncfusion.Grouping.RuntimeElementsInTableCollection.IndexOf(Syncfusion.Grouping.Element)"/> method
            of a <see cref="T:Syncfusion.Grouping.ElementsInTableCollection"/> determines the index of any element in the Table.Elements collection.
            </term></item>
            <item><term>
            The <see cref="P:Syncfusion.Grouping.Table.NestedElements"/> collection returns all elements of the <see cref="T:Syncfusion.Grouping.Table"/>
            in the order as they appear if they would be visible and also steps into nested tables.
            The <see cref="M:Syncfusion.Grouping.RuntimeElementsInTableCollection.IndexOf(Syncfusion.Grouping.Element)"/> method
            of a <see cref="T:Syncfusion.Grouping.ElementsInTableCollection"/> determines the index of any element in the Table.NestedElements collection.
            </term></item>
            </list>
            A table has a <see cref="P:Syncfusion.Grouping.Table.CurrentRecord"/> or <see cref="P:Syncfusion.Grouping.Table.CurrentElement"/> which identifies the current record. The current
            record can be edited and navigated with the <see cref="P:Syncfusion.Grouping.Table.CurrentRecordManager"/>.<para/>
            A table raises various events when changes are made to a record or when groups or records are collapsed or expanded. All
            events will bubble up to the parent engine object. <para/>
            If an engine displays hierarchical data, a <see cref="T:Syncfusion.Grouping.Table"/> is created for each table of the
            datasource. With a DataSet for example, a <see cref="T:Syncfusion.Grouping.Table"/> is created for each DataTable in the DataSet. <para/>
            If a <see cref="T:Syncfusion.Grouping.Table"/> is a child table in a master-details relation, the table is grouped by the foreign key column.
            That way the parent table can get access to a group of records in the child table using the foreign key.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.Table.#ctor(Syncfusion.Grouping.TableDescriptor,Syncfusion.Grouping.Table)">
            <summary>
            Initializes a new table object that belongs to a <see cref="P:Syncfusion.Grouping.Table.TableDescriptor"/> and optionally belongs to a parent table.
            </summary>
            <param name="tableDescriptor">The table descriptor with schema information about the table.</param>
            <param name="relationParentTable">The parent table of this table; NULL if this table is not a child table of a relation.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.WireTableDescriptor">
            <summary>
            Wires events for the <see cref="P:Syncfusion.Grouping.Table.TableDescriptor"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Table.UnwireTableDescriptor">
            <summary>
            Unwires events for the <see cref="P:Syncfusion.Grouping.Table.TableDescriptor"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Table.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.GetVisibleCount">
            <summary>Gets the number of visible elements.</summary>
            <returns>Visible element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.GetYAmountCount">
            <summary>Gets the element height.</summary>
            <returns>Element height.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.GetElementCount">
            <summary>Gets the number of elements.</summary>
            <returns>Element count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.GetSummaries">
            <overload>
            <summary>
            Gets summary information for this element and child elements. The summaries
            are in the same order as the <see cref="P:Syncfusion.Grouping.TableDescriptor.Summaries"/> of the
            parent table descriptor.</summary>
            </overload>
            <returns>Summary information.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.GetSummaries(Syncfusion.Grouping.Table,System.Boolean@)">
            <override/>
            <summary>
            Gets summary information for this element and child elements. The summaries
            are in the same order as the <see cref="P:Syncfusion.Grouping.TableDescriptor.Summaries"/> of the
            parent table descriptor.
            </summary>
            <param name="parentTable">A reference to the parent table of this element.</param>
            <param name="summaryChanged">Returns True if changes were detected.</param>
            <returns>An array of <see cref="T:Syncfusion.Collections.BinaryTree.ITreeTableSummary"/> objects.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Table.GetEmptySummaries">
            <summary>
            Gets an array of empty <see cref="T:Syncfusion.Collections.BinaryTree.ITreeTableSummary"/> objects. For each SummaryDescriptor in this
            collection, an ITreeTableSummary is created by calling the SummaryDescriptor.CreateSummary method
            and passing in NULL as record.
            </summary>
            <returns>An array of ITreeTableSummary objects, one for each SummaryDescriptor in this collection.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Table.GetFilteredRecordCount">
            <summary>Gets the number of filterd records.</summary>
            <returns>Filtered record count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.GetRecordCount">
            <summary>Gets the number of records.</summary>
            <returns>Record count.</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.InvalidateCounterTopDown(System.Boolean)">
            <summary>Walks down to the child branches and resets the counters.</summary>
            <param name="notifyCounterSource">If true, notifies the counter source.</param>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.InvalidateSummariesTopDown">
            <summary>Resets the summary for all elements.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.InvalidateSummary">
            <summary>Resets the summary.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.InvalidateSummariesBottomUp">
            <summary>Resets the summary for all elements.</summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.GetElementEntry">
            <summary>
            The ElementTreeTableEntry this element is associated with (either SectionsTreeTableEntry or SortedRecordsTreeTableEntry).
            <returns>returns ElementTreeTableEntry</returns>
            </summary>
            <returns>returns ElementTreeTableEntry</returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnEnsureInitialized(System.Object)">
            <summary>
            This virtual method is called from <see cref="M:Syncfusion.Grouping.Table.OnEnsureInitialized(System.Object)"/> and
            lets derived elements implement element-specific logic to ensure object
            is up to data.
            </summary>
            <param name="sender">The object that triggered the <see cref="M:Syncfusion.Grouping.Table.EnsureInitialized(System.Object,System.Boolean)"/> call.</param>
            <returns>
            True if changes were detected and the object was updated; False otherwise.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.ToString">
            <summary>
            Returns a string holding the element.
            </summary>
            <returns>
            String representation of the current object.
            </returns>
            <override/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.ClearCollectionCaches">
            <summary>
            Increases the <see cref="P:Syncfusion.Grouping.Table.EngineVersion"/>. Collection caches will be cleared since
            they compare the cache version counter with the engine version counter.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Table.Reload">
            <summary>
            Sets the table dirty (<see cref="P:Syncfusion.Grouping.Table.TableDirty"/>) and increses the engine and sourcelist
            version counter.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnExceptionRaised(Syncfusion.Grouping.ExceptionRaisedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.ExceptionRaised"/> event.
            </summary>
            <param name="e">An <see cref="T:Syncfusion.Grouping.ExceptionRaisedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnInvalidatingCounters(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.InvalidatingCounters"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.TableEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnInvalidatingSummaries(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.InvalidatingSummaries"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.TableEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnSourceListRecordChanged(Syncfusion.Grouping.RecordChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.SourceListRecordChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnSourceListRecordChanging(Syncfusion.Grouping.RecordChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.SourceListRecordChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnSourceListListChanged(Syncfusion.Grouping.TableListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.SourceListListChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.ListChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnSourceListListChangedCompleted(Syncfusion.Grouping.TableListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.SourceListListChangedCompleted"/> event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.ListChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnGroupSummaryInvalidated(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.GroupSummaryInvalidated"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnGroupAdded(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.GroupAdded"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnGroupRemoving(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.GroupRemoving"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnGroupCollapsing(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.GroupCollapsing"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnGroupCollapsed(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.GroupCollapsed"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnGroupExpanding(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.GroupExpanding"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnGroupExpanded(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.GroupExpanded"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnRecordCollapsing(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.RecordCollapsing"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnRecordCollapsed(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.RecordCollapsed"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnRecordExpanding(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.RecordExpanding"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnRecordExpanded(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.RecordExpanded"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnRecordDeleting(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.RecordDeleting"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnRecordDeleted(Syncfusion.Grouping.RecordEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.RecordDeleted"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.BaseCategorizingRecords(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.CategorizingRecords"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnCategorizedRecords(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.CategorizedRecords"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnSortingItemsInGroup(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.SortingItemsInGroup"/> event.
            </summary>
            <param name="e">An <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnSortedItemsInGroup(Syncfusion.Grouping.GroupEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.SortedItemsInGroup"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.GroupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnCurrentRecordContextChange(Syncfusion.Grouping.CurrentRecordContextChangeEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.CurrentRecordContextChange"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.CurrentRecordContextChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnCurrentRecordManagerReset(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.CurrentRecordManagerReset"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.AddNew">
            <summary>
            Navigates to the <see cref="P:Syncfusion.Grouping.Table.AddNewRecord"/> and calls <see cref="M:Syncfusion.Grouping.Table.BeginEdit"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Table.BeginEdit">
            <summary>
            Switches the current record into edit mode. Raises <see cref="E:Syncfusion.Grouping.Table.CurrentRecordContextChange"/> events on the <see cref="T:Syncfusion.Grouping.Table"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Table.EndEdit">
            <summary>
            Ends edit mode for the current record. If changes are detected, they will be saved to the
            underlying data source. Raises <see cref="E:Syncfusion.Grouping.Table.CurrentRecordContextChange"/> events on the <see cref="T:Syncfusion.Grouping.Table"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Table.CancelEdit">
            <summary>
            Cancels editing for the current record. Changes in the current record are
            discarded. Raises <see cref="E:Syncfusion.Grouping.Table.CurrentRecordContextChange"/> events on the <see cref="T:Syncfusion.Grouping.Table"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Table.IsSameRecord(Syncfusion.Grouping.Record,System.Int32)">
            <summary>
            Determines if the row at the specified displayElementIndex is a child of the specified record.
            </summary>
            <param name="r">The record to be tested.</param>
            <param name="displayElementIndex">The row index to be tested.</param>
            <returns>True if the row belongs to the record; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Table.GetRecordOrParentRecord(Syncfusion.Grouping.Element)">
            <summary>
            If the specified element is a <see cref="T:Syncfusion.Grouping.Record"/>, it returns the element; if the element is a <see cref="T:Syncfusion.Grouping.NestedTable"/>, it
            returns the <see cref="P:Syncfusion.Grouping.Element.ParentRecord"/>.
            </summary>
            <param name="el">The element whose record should be returned.</param>
            <returns>Returns Record.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Table.IsSameGroup(Syncfusion.Grouping.Group,Syncfusion.Grouping.Element)">
            <summary>
            Determines if the specified element is a child or grandchild of a group.
            </summary>
            <param name="g">The parent group.</param>
            <param name="r">The element to be tested.</param>
            <returns>true if element is contained in group; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Table.ResetCurrentRecord">
            <summary>
            Deativates the current record, saves pending changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Table.GetInnerMostCurrentElement">
            <summary>
            Returns the current element of this table. If it is a NestedTable element, it will return the current element of the related table.
            </summary>
            <remarks>
            This method only returns the current element, it does not change the <see cref="P:Syncfusion.Grouping.Table.FilteredChildTable"/> property.
            </remarks>
            <returns>The current element</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Table.IsCurrentRecord(System.Int32)">
            <summary>
            Determines if the specified row index is child row of the current record.
            </summary>
            <param name="displayElementIndex">The row index to be tested.</param>
            <returns>True if the row belongs to the current record record; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Table.NavigateCurrentRecordUp(System.Int32)">
            <summary>
            Navigates the record up or down, the current element should not be deactivated if not valid, element should be scrolled into view. Raises <see cref="E:Syncfusion.Grouping.Table.CurrentRecordContextChange"/> events on the <see cref="T:Syncfusion.Grouping.Table"/>.
            </summary>
            <param name="step">The number of records to move up. Positive step will move the record up, negative steps will move the record down.</param>
            <returns>The current record after navigation.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Table.NavigateCurrentRecordDown(System.Int32)">
            <summary>
            Navigates the record up or down, the current element should not be deactivated if not valid, element should be scrolled into view. Raises <see cref="E:Syncfusion.Grouping.Table.CurrentRecordContextChange"/> events on the <see cref="T:Syncfusion.Grouping.Table"/>.
            </summary>
            <param name="step">The number of records to advance. Positive steps will move the record down, negative steps will move the record up.</param>
            <returns>The current record after navigation.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Table.ExpandAllGroups">
            <summary>
            Expands the top-level group and all nested groups.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Table.ExpandAllRecords">
            <summary>
            Expands all records in the top-level group and all nested groups.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Table.CollapseAllGroups">
            <summary>
            Collapses the top-level group and all nested groups.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Table.CollapseAllRecords">
            <summary>
            Collapses all records in the top-level group and all nested groups.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Table.ShowRecord(Syncfusion.Grouping.Element,System.Boolean)">
            <summary>
            Expands all parent groups and grandparent groups of the element until it becomes shown
            in the DisplayElements collection.
            </summary>
            <param name="r">The element to be shown.</param>
            <param name="raiseDisplayElementChangeEvents">True if <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanging"/>
            and <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanged"/> events should be raised; False otherwise.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.ShowRecord(Syncfusion.Grouping.Record,System.Boolean)">
            <summary>
            Expands all parent groups and grandparent groups of the element until it becomes shown
            in the DisplayElements collection.
            </summary>
            <param name="r">The element to be shown.</param>
            <param name="raiseDisplayElementChangeEvents">True if <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanging"/>
            and <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanged"/> events should be raised; False otherwise.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnSelectedRecordsChanging(Syncfusion.Grouping.SelectedRecordsChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.SelectedRecordsChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.SelectedRecordsChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnSelectedRecordsChanged(Syncfusion.Grouping.SelectedRecordsChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.SelectedRecordsChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.SelectedRecordsChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnDefaultYAmountChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.DefaultYAmountChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.RaiseDefaultYAmountChanged">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.DefaultYAmountChanged"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Table.ShouldCacheRecordData">
            <summary>
            Method is called when the table tries to determine whether a record's underlying data row can be cached
            within <see cref="T:Syncfusion.Grouping.Record"/> objects.
            </summary>
            <returns>True if record's underlying data row can be cached
            within <see cref="T:Syncfusion.Grouping.Record"/> objects; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Table.BaseSourceListChanged(Syncfusion.Grouping.TableEventArgs)">
            <exclude/>
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.SourceListChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnRecordValueChanging(Syncfusion.Grouping.RecordValueChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.RecordValueChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordValueChangingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.RaiseRecordValueChanging(Syncfusion.Grouping.RecordValueChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.RecordValueChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordValueChangingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnRecordValueChanged(Syncfusion.Grouping.RecordValueChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.RecordValueChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordValueChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.RaiseRecordValueChanged(Syncfusion.Grouping.RecordValueChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.RecordValueChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.RecordValueChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.UnwireList">
            <summary>
            Is called to unwire events from source list before source list is replaced.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Table.CompareAndCacheSortDescription(System.Object)">
            <summary>
            Detect and save changes in sort or filter criteria of underlying datasource. 
            </summary>
            <param name="dataSource">The datasource</param>
            <returns>true if changes were detected; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Table.WireList">
            <summary>
            Is called to wire events to source list after source list is attached.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.Table.SimulateListChangedWithSourceList(System.Collections.IList,Syncfusion.Grouping.Group,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Used by ChildTable in UniformChildList relations to forward IBindingList.ListChanged event from a nested collection.
            </summary>
            <param name="sourceList">The source list.</param>       
            <param name="ct">The group.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.SimulateListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Fakes an IBindingList.ListChanged event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.bindingList_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Handles the IBindingList.ListChanged event of the source list.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.IsNewUniformChildListRelation">
            <summary>
            For internal use.
            </summary>
            <returns>
            <c>true</c> if [is new uniform child list relation]; otherwise, <c>false</c>.
            </returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.IsLazyUniformChildListRelation">
            <summary>
            For internal use.
            </summary>
            <returns>
            <c>true</c> if [is lazy uniform child list relation]; otherwise, <c>false</c>.
            </returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.FixTopLevelCounters">
            <summary>For internal use.</summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.FixVirtualMode(Syncfusion.Grouping.Element)">
            <summary>
            For internal use.
            </summary>      
            <returns>returns Element</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.AddChildTableIfNotExists(System.Object[])">
            <summary>
            For internal use.
            </summary>
            <returns>returns ChildTable</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.AddChildTable">
            <summary>
            For internal use.
            </summary>
            <returns>returns ChildTable</returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.DeleteRecord(Syncfusion.Grouping.Record)">
            <summary>
            Removes a record from the datasource.
            </summary>
            <param name="r">The record to delete.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.PopulateRecordChildTablesIfEmpty(Syncfusion.Grouping.Record)">
            <summary>
            Checks whether the record has nested tables that have not been 
            populated. If this is the case the method will retrieve the nested collection items
            from the property (if UniformChildList) or from the IPassThroughGroupingResult.GetNestedItems
            method, create the child list, set its SourceList and add entries to the child lists details
            section.
            </summary>
            <param name="record">The Record.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnPopulatedChildTable(Syncfusion.Grouping.ChildTable)">
            <summary>
            Create the populated childtable
            </summary>
            <param name="childTable"></param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.PopulatePassThroughGroupIfEmpty(Syncfusion.Grouping.Group)">
            <summary>
            Populates groups on demand.
            </summary>
            <param name="group">The Group.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.PopulatePassThroughGroup(Syncfusion.Grouping.Group,System.Collections.IEnumerable,Syncfusion.Grouping.Record)">
            <summary>
            Populates groups on demand.
            </summary>
            <param name="group">The Group.</param>
            <param name="items">Items for a given group.</param>
            <param name="parentRecord">Parent record.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnRemovingRelatedTable(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Raises the  <see cref="E:Syncfusion.Grouping.Table.RemovingRelatedTable"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.TableEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnAddedRelatedTable(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Raises the  <see cref="E:Syncfusion.Grouping.Table.AddedRelatedTable"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.TableEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnDisplayElementChanging(Syncfusion.Grouping.DisplayElementChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.DisplayElementChangingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnDisplayElementChanged(Syncfusion.Grouping.DisplayElementChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.DisplayElementChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.RaiseDisplayElementChanging(Syncfusion.Grouping.Element,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanging"/> event.
            </summary>
            <param name="element">The affected element can be the whole table.</param>
            <param name="oldCount">The old display element count of the affected element. Can be -1.</param>
            <param name="newCount">The new display element count of the affected element. Can be -1.</param>
            <param name="repaintElement">Indicates if element needs repainting.</param>
            <param name="syncCurrentRecordPos">Indicates if current record position should be saved and restored.</param>
            <param name="leaveCurrentRecord">Indicates if current record should be deactivated.</param>
            <param name="scroll">Indicates if current record should be scrolled into view.</param>
            <returns>true if the event should be canceled; otherwise, false</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Table.RaiseDisplayElementChanged(Syncfusion.Grouping.Element,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanged"/> event.
            </summary>
            <param name="element">The affected element can be the whole table.</param>
            <param name="oldCount">The old display element count of the affected element. Can be -1.</param>
            <param name="newCount">The new display element count of the affected element. Can be -1.</param>
            <param name="repaintElement">Indicates if element needs repainting.</param>
            <param name="syncCurrentRecordPos">Indicates if current record position should be saved and restored.</param>
            <param name="leaveCurrentRecord">Indicates if current record should be deactivated.</param>
            <param name="scroll">Indicates if current record should be scrolled into view.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.RaiseDisplayElementChanging(Syncfusion.Grouping.Element,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanging"/> event.
            </summary>
            <param name="element">The affected element can be the whole table.</param>
            <param name="oldCount">The old display element count of the affected element. Can be -1.</param>
            <param name="newCount">The new display element count of the affected element. Can be -1.</param>
            <param name="repaintElement">Indicates if element needs repainting.</param>
            <param name="syncCurrentRecordPos">Indicates if current record position should be saved and restored.</param>
            <param name="leaveCurrentRecord">Indicates if current record should be deactivated.</param>
            <returns>true if the event should be canceled; otherwise, false</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Table.RaiseDisplayElementChanged(Syncfusion.Grouping.Element,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.DisplayElementChanged"/> event.
            </summary>
            <param name="element">The affected element can be the whole table.</param>
            <param name="oldCount">The old display element count of the affected element. Can be -1.</param>
            <param name="newCount">The new display element count of the affected element. Can be -1.</param>
            <param name="repaintElement">Indicates if element needs repainting.</param>
            <param name="syncCurrentRecordPos">Indicates if current record position should be saved and restored.</param>
            <param name="leaveCurrentRecord">Indicates if current record should be deactivated.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.Engine_PropertyChanging(System.Object,Syncfusion.Grouping.DescriptorPropertyChangedEventArgs)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.Engine_PropertyChanged(System.Object,Syncfusion.Grouping.DescriptorPropertyChangedEventArgs)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnQueryCustomCount(Syncfusion.Grouping.CustomCountEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.QueryCustomCount"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.CustomCountEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnQueryVisibleCustomCount(Syncfusion.Grouping.CustomCountEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.QueryVisibleCustomCount"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.CustomCountEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnRelatedTableSourceListListChanged(Syncfusion.Grouping.TableListChangedEventArgs)">
            <summary>
            This virtual method is called before a related child or grandchild table raises a <see cref="E:Syncfusion.Grouping.Table.SourceListListChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.TableListChangedEventArgs"/> that contains the event data.</param>
            <remarks>
            The method calls the <see cref="P:Syncfusion.Grouping.Table.SourceListVersion"/> of this table.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnRelatedTableSourceListListChangedCompleted(Syncfusion.Grouping.TableListChangedEventArgs)">
            <summary>
            This virtual method is called before a related child or grandchild table raises a <see cref="E:Syncfusion.Grouping.Table.SourceListListChangedCompleted"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Grouping.TableListChangedEventArgs"/> that contains the event data.</param>
            <remarks>
            The method calls the <see cref="P:Syncfusion.Grouping.Table.SourceListVersion"/> of this table.
            </remarks>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnSourceListChanged(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.SourceListChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.dt_RowDeleting(System.Object,System.Data.DataRowChangeEventArgs)">
            <summary>
            Used to remove the row
            </summary>
            <param name="sender">object value</param>
            <param name="e">event data</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnPrepareRemoving(System.Object)">
            <summary>
            This virtual method gets called before a row is removed from
            the underlying datasource.
            </summary>
            <param name="row">The row value</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnPrepareItemAdded(System.Object)">
            <summary>
            This virtual method is called when a row was added in the underlying datasource.
            </summary>
            <param name="row">The row value</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.GetValue(System.Object,System.ComponentModel.PropertyDescriptor)">
            <summary>
            A helper method that calls pd.GetValue(row) or gets the value directly
            from a DataRow using its name.
            </summary>
            <param name="row">The Data row.</param>
            <param name="pd">The Property descriptor.</param>
            <returns>returns Value.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Table.AddChangedField(Syncfusion.Grouping.ChangedFieldInfo)">
            <summary>
            Call this method to add ChangedFieldInfo
            objects with information about the new and old value of the column. The
            ChangedFieldInfo objects will then be checked in the LIstChanged event handler.
            </summary>
            <param name="ci">The changed field information.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.GetChangedFields">
            <summary>
            The Collection with detected changes in the datasource when a ListChanged event
            is handled.
            </summary>
            <returns>A collection of changed fields.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnEnableOneTimePopulate">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.EnsureInitialized(System.Object,System.Boolean)">
            <override/>
            <summary>
            Ensures the object, nested objects, and parent elements reflect any changes made to the engine or table descriptor. This is
            an integral part of the engine's "on-demand execution" of schema changes. Before elements
            in the engine are accessed, they call <see cref="M:Syncfusion.Grouping.Table.EnsureInitialized(System.Object,System.Boolean)"/>. If changes were
            previously made that affect the queried element, all changes will be applied at this time.
            </summary>
            <param name="sender">The object that triggered the call.</param>
            <param name="notifyParent">Specifes if the parent elements <see cref="M:Syncfusion.Grouping.Table.EnsureInitialized(System.Object,System.Boolean)"/>
            should also be called.</param>
            <returns>True if changes were detected and the object was updated; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnSourceListPropertyDescriptorChanged(System.Object,System.ComponentModel.ListChangedEventArgs,Syncfusion.Grouping.TableListChangedEventArgs)">
            <summary>
            Virtual method is called when a ListChanged event is handled and ListChangedType is 
            PropertyDescriptorChanged. The method is only called if UseOldListChangedHandler is false.
            </summary>   
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnSourceListReset(System.Object,System.ComponentModel.ListChangedEventArgs,Syncfusion.Grouping.TableListChangedEventArgs)">
            <summary>
            Virtual method is called when a ListChanged event is handled and ListChangedType is 
            Reset. The method is only called if UseOldListChangedHandler is false.
            </summary>        
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnSourceListItemAdded(System.Object,System.ComponentModel.ListChangedEventArgs,Syncfusion.Grouping.TableListChangedEventArgs)">
            <summary>
            Virtual method is called when a ListChanged event is handled and ListChangedType is 
            ItemAdded. The method is only called if UseOldListChangedHandler is false.
            </summary>       
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnSourceListItemMoved(System.Object,System.ComponentModel.ListChangedEventArgs,Syncfusion.Grouping.TableListChangedEventArgs)">
            <summary>
            Virtual method is called when a ListChanged event is handled and ListChangedType is 
            ItemMoved. The method is only called if UseOldListChangedHandler is false.
            </summary>      
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnSourceListItemDeleted(System.Object,System.ComponentModel.ListChangedEventArgs,Syncfusion.Grouping.TableListChangedEventArgs)">
            <summary>
            Virtual method is called when a ListChanged event is handled and ListChangedType is 
            ItemDeleted. The method is only called if UseOldListChangedHandler is false.
            </summary>       
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnSourceListItemChanged(System.Object,System.ComponentModel.ListChangedEventArgs,Syncfusion.Grouping.TableListChangedEventArgs)">
            <summary>
            Virtual method is called when a ListChanged event is handled and ListChangedType is 
            ItemChanged. The method is only called if UseOldListChangedHandler is false.
            </summary>       
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnRecordChanged(Syncfusion.Grouping.Element,System.Boolean,System.Boolean)">
            <summary>
            This virtual method is called from the new ListChanged handler when a record was
            added, removed or changed. It is called after the record was detached or attached
            to a new group and before counters in parent elements are marked. Override this
            method if you want to update for example your custom manual summaries in parent groups
            as shown in ManualSummaries example.
            </summary>      
        </member>
        <member name="M:Syncfusion.Grouping.Table.IsSortOrderAffected(Syncfusion.Grouping.Record,Syncfusion.Grouping.Record,Syncfusion.Grouping.Record,Syncfusion.Grouping.SortColumnDescriptor[])">
            <summary>
            Check if any of the columns that was changed affects the sort position of the records.
            </summary>
            <returns>
            <c>true</c> if [is sort order affected] [the specified r]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.Table.IsSortOrderAffected(Syncfusion.Grouping.Record,Syncfusion.Grouping.Record,Syncfusion.Grouping.Record,Syncfusion.Grouping.SortColumnDescriptor[],System.Collections.Hashtable)">
            <summary>
            Check if any of the columns that was changed affects the sort position of the records.
            </summary>      
            <returns>
            <c>true</c> if [is sort order affected] [the specified r]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Grouping.Table.CompareColumnSortOrder(Syncfusion.Grouping.Record,Syncfusion.Grouping.Record,Syncfusion.Grouping.Record,Syncfusion.Grouping.SortColumnDescriptor)">
            <summary>
            Check if the changed value of the column affects the sort position of the record.
            </summary>
            <param name="r">The current record</param>
            <param name="previous">The previous record</param>
            <param name="next">The next record</param>
            <param name="sd">The column to be tested</param>
            <returns>-1 if column is not equal to previous or next value and sort order is valid;
            0 if column is equal to previous or next value;
            1 if column is not equal to previous or next value and sort order is invalid;.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Table.DeleteEmptyGroups(Syncfusion.Grouping.DetailsSection,Syncfusion.Grouping.Group@)">
            <summary>
            Record will be moved to a new group. Check if old group
            only had that one record and should be deleted. The method
            does not delete the group, only returns the group to be deleted.
            </summary>
            <param name="oldParentSection">Old parent section.</param>
            <param name="groupToDelete">Returns the group to delete.</param>
            <returns>Old group.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Table.CompareGroupCategories(Syncfusion.Grouping.Group,Syncfusion.Grouping.Record)">
            <summary>
            Compare if record still matches group catecory criteria
            </summary>
            <param name="g">The Group.</param>
            <param name="r">The Record.</param>
            <returns>True if the record matches the group category; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.Table.InvalidateCountersAndSummaries(Syncfusion.Grouping.Element,System.Boolean)">
            <summary>
            Invalidate summaries and counters for parent elements
            of this elements bottom up.
            </summary>
            <param name="el">The element.</param>
            <param name="forceCaptions">If true, resets the captions.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.InvalidateCounters(Syncfusion.Grouping.Element)">
            <summary>
            Invalidate counters for parent elements
            of this elements bottom up.
            </summary>
            <param name="el">The element</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.InvalidateSummaries(Syncfusion.Grouping.Element,System.Boolean)">
            <summary>
            Invalidate summaries for parent elements
            of this elements bottom up.
            </summary>
            <param name="el">The element.</param>
            <param name="forceCaptions">If true, resets the captions.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnEnsureSortFields">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Grouping.Table.OnCategorizingRecords(Syncfusion.Grouping.TableEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Grouping.Table.CategorizingRecords"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Grouping.Table.GetDependantFields(System.Int32)">
            <summary>
            Returns an array of field indexes that are dependant on changes to this field because
            they reference this field (e.g. an unbound field that is based on this value or
            a Expression field that references this field).
            </summary>
            <param name="fieldIndex">Field index.</param>
            <returns>Array of field indexes.</returns>
        </member>
        <member name="P:Syncfusion.Grouping.Table.Engine">
            <summary>Returns grouping engine.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.Table.TableNo">
            <summary>
            Returns a unique id for the table in the parents engine object. Each nested
            table will have a different id.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.TableEventsTarget">
            <summary>
            Gets / sets an object that handles events raised by this object.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.ParentTableDescriptor">
            <summary>Gets the parent table descriptor.</summary>
            <override/>
        </member>
        <member name="P:Syncfusion.Grouping.Table.OriginalSourceList">
            <summary>
            Gets the value of the original source list.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.RelationParentTable">
            <summary>
            Gets the parent table of this table or NULL if this table is not a child table of a relation.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.TableDescriptor">
            <summary>
            The TableDescriptor with schema information about this table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.EngineVersion">
            <summary>
            Gets the <see cref="P:Syncfusion.Grouping.Engine.Version"/> of the <see cref="P:Syncfusion.Grouping.Table.Engine"/>.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.ExceptionRaised">
            <summary>
            Occurs when an unknown exception has been cached while modifying underlying data in the datasource.
            </summary>
            <remarks>
            If necessary, you can rethrow the exception in your event handler.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.Table.GroupExpanding">
            <summary>
            Occurs before a group is expanded.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.GroupExpanded">
            <summary>
            Occurs after a group is expanded.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.GroupCollapsing">
            <summary>
            Occurs before a group is collapsed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.GroupCollapsed">
            <summary>
            Occurs after a group is collapsed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.RecordExpanding">
            <summary>
            Occurs before a record with nested tables is expanded.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.RecordExpanded">
            <summary>
            Occurs after a record with nested tables is expanded.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.RecordDeleting">
            <summary>
            Occurs before a record is deleted.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.RecordDeleted">
            <summary>
            Occurs after a record is deleted.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.RecordCollapsing">
            <summary>
            Occurs before a record with nested tables is collapsed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.RecordCollapsed">
            <summary>
            Occurs after a record with nested tables is collapsed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.CategorizingRecords">
            <summary>
            Occurs before records are categorized after a table is marked dirty (<see cref="P:Syncfusion.Grouping.Table.TableDirty"/>).
            </summary>
            <remarks>
            When <see cref="P:Syncfusion.Grouping.Table.TableDirty"/> is set True, e.g. because schema information for a table was changed
            or because the grouped columns were changed, the table will categorize records on demand the first time
            information about a record is accessed. At that time, the <see cref="M:Syncfusion.Grouping.Table.EnsureInitialized(System.Object,System.Boolean)"/> will start
            categorization.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.Table.CategorizedRecords">
            <summary>
            Occurs after records are categorized after a table is marked dirty (<see cref="P:Syncfusion.Grouping.Table.TableDirty"/>).
            </summary>
            <remarks>
            When <see cref="P:Syncfusion.Grouping.Table.TableDirty"/> is set True, e.g. because schema information for a table was changed
            or because the grouped columns were changed, the table will categorize records on demand the first time
            information about a record is accessed. At that time, the <see cref="M:Syncfusion.Grouping.Table.EnsureInitialized(System.Object,System.Boolean)"/> will start
            categorization.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.Table.SortingItemsInGroup">
            <summary>
            Occurs before the records for a group are sorted.
            </summary>
            <remarks>
            The engine has a built-in optimization for sorting columns that allows it to perform the sorting
            on an on-demand basis group-by-group. Suppose you have a table with 200 different countries and
            you change the sort order of the cities. It is not necessary to sort the whole table. Instead,
            the individual groups can be sorted when they are scrolled into view. SortingItemsInGroup and
            SortedItemsInGroup events are fired in such cases when a specific group is sorted on demand.
            <para/>
            If the whole table was set dirty (see <see cref="P:Syncfusion.Grouping.Table.TableDirty"/>), then the whole table
            is simply recategorized. In that case, only a CategorizedElements event is raised but no
            SortingItemsInGroup event.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.Table.SortedItemsInGroup">
            <summary>
            Occurs after the records for a group are sorted.
            </summary>
            <remarks>
            The engine has a built-in optimization for sorting columns that allows it to perform the sorting
            on an on-demand basis group-by-group. Suppose you have a table with 200 different countries and
            you change the sort order of the cities. It is not necessary to sort the whole table. Instead,
            the individual groups can be sorted when they are scrolled into view. SortingItemsInGroup and
            SortedItemsInGroup events are fired in such cases when a specific group is sorted on demand.
            <para/>
            If the whole table was set dirty (see <see cref="P:Syncfusion.Grouping.Table.TableDirty"/>), then the whole table
            is simply recategorized. In that case, only a CategorizedElements event is raised but no
            SortingItemsInGroup event.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.Table.GroupSummaryInvalidated">
            <summary>
            Occurs when a summary has been marked dirty.
            </summary>
            <remarks>
            The GridGroupingControl listens to this event and will force a repaint of the specified summary if it is visible
            when this event was raised.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.Table.GroupAdded">
            <summary>
            Occurs when a new group is added in a table after the table was categorized and when a record is changed. The event does not
            occur during categorization of the table. See the <see cref="E:Syncfusion.Grouping.Table.CategorizedRecords"/> elements to when categorization
            finished.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.GroupRemoving">
            <summary>
            Occurs when a group was removed from a table after the table was categorized and when a record is changed. The event does not
            occur during categorization of the table. See the <see cref="E:Syncfusion.Grouping.Table.CategorizedRecords"/> elements to when categorization
            finished.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.SourceListRecordChanging">
            <summary>
            Occurs when a record in the underlying data source was added, removed, or changed and before
            the <see cref="T:Syncfusion.Grouping.Table"/> is updated with that change.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.SourceListRecordChanged">
            <summary>
            Occurs before the <see cref="T:Syncfusion.Grouping.Table"/> processes the <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> event
            of an attached source list. More detailed <see cref="E:Syncfusion.Grouping.Table.SourceListRecordChanged"/> events will be
            raised after this event.
            </summary>
            <remarks>
            The reason for firing this event is to give a programmer a chance to react to an <see cref="E:System.ComponentModel.IBindingList.ListChanged"/>
            event before the engine since there is otherwise no order guaranteed when an IBindingList raises a ListChanged
            event.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.Table.SourceListListChanged">
            <summary>
            Occurs before the <see cref="T:Syncfusion.Grouping.Table"/> processes the <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> event
            of an attached source list. More detailed <see cref="E:Syncfusion.Grouping.Table.SourceListRecordChanged"/> events will be
            raised after this event.
            </summary>
            <remarks>
            The reason for firing this event is to give a programmer a chance to react to an <see cref="E:System.ComponentModel.IBindingList.ListChanged"/>
            event before the engine since there is otherwise no order guaranteed when an IBindingList raises a ListChanged
            event.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.Table.SourceListListChangedCompleted">
            <summary>
            Occurs right after the <see cref="T:Syncfusion.Grouping.Table"/> processes the <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> event
            of an attached source list.
            </summary>
            <remarks>
            The reason for firing this event is to give a programmer a chance to react to an <see cref="E:System.ComponentModel.IBindingList.ListChanged"/>
            event right after the engine since there is otherwise no order guaranteed when an IBindingList raises a ListChanged
            event.
            </remarks>
        </member>
        <member name="E:Syncfusion.Grouping.Table.InvalidatingCounters">
            <summary>
            Occurs when the <see cref="M:Syncfusion.Grouping.Table.InvalidateCounterTopDown(System.Boolean)"/> of a <see cref="T:Syncfusion.Grouping.Table"/> is called
            and before all counters are marked dirty.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.InvalidatingSummaries">
            <summary>
            Occurs when the <see cref="M:Syncfusion.Grouping.Table.InvalidateSummariesTopDown"/> of a <see cref="T:Syncfusion.Grouping.Table"/> is called
            and before all summaries in that table are marked dirty.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.CurrentRecordContextChange">
            <summary>
            Occurs before and after the status of the current record was changed. Check the <see cref="P:Syncfusion.Grouping.CurrentRecordContextChangeEventArgs.Action"/>
            of the <see cref="T:Syncfusion.Grouping.CurrentRecordContextChangeEventArgs"/> to get information which current record state was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.CurrentRecordManagerReset">
            <summary>
            Occurs when the <see cref="M:Syncfusion.Grouping.CurrentRecordManager.Reset"/> method of the <see cref="P:Syncfusion.Grouping.Table.CurrentRecordManager"/> is called.
            </summary>
            <remarks>
            The GridGroupingControl listens to this event and resets any "Current Cell" state when this
            event is raised.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.Table.CurrentRecordManager">
            <summary>
            Gets a reference to the <see cref="T:Syncfusion.Grouping.CurrentRecordManager"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.AddNewRecord">
            <summary>
            Gets a reference to the <see cref="T:Syncfusion.Grouping.AddNewRecord"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.HasCurrentRecord">
            <summary>
            Determines if table has an active current element that is a <see cref="T:Syncfusion.Grouping.Record"/> (and not a <see cref="T:Syncfusion.Grouping.NestedTable"/>).
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.CurrentRecord">
            <summary>
            Gets / sets the current record. When current element is not a <see cref="T:Syncfusion.Grouping.Record"/>, NULL is returned, (e.g. if
            element is a <see cref="T:Syncfusion.Grouping.NestedTable"/>).
            Setting the current record will trigger a <see cref="M:Syncfusion.Grouping.CurrentRecordManager.Navigate(System.Int32)"/> call.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.CurrentElement">
            <summary>
            Gets / sets the current element. Setting the current element will trigger a <see cref="M:Syncfusion.Grouping.CurrentRecordManager.Navigate(System.Int32)"/> call.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.HasCurrentElement">
            <summary>
            Determines if table has an active current element (either a <see cref="T:Syncfusion.Grouping.Record"/> or <see cref="T:Syncfusion.Grouping.NestedTable"/>).
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.NestedDisplayElements">
            <summary>
            Provides a flat collection of visible elements in the table. All records, groups,
            and sections are only returned by this collection if they are expanded
            and meet filter criteria. The collection steps into nested tables.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.DisplayElements">
            <summary>
            Provides a flat collection of visible elements in the table. All records, groups,
            and sections are only returned by this collection if they are expanded
            and meet filter criteria. The collection does not step into nested tables.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.NestedElements">
            <summary>
            Provides a flat collection of all elements in the table. All records, groups,
            and sections are returned by this collection no matter if they were expanded
            or meet filter criteria. The collection steps into nested tables.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.Elements">
            <summary>
            Provides a flat collection of all elements in the table. All records, groups,
            and sections are returned by this collection no matter if they were expanded
            or meet filter criteria. The collection does not step into nested tables.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.FilteredRecords">
            <summary>
            A Read-only collection of sorted <see cref="T:Syncfusion.Grouping.Record"/> elements that meet filter criteria and are children of a <see cref="T:Syncfusion.Grouping.Table"/>.
            See <see cref="T:Syncfusion.Grouping.RecordFilterDescriptorCollection"/> or <see cref="P:Syncfusion.Grouping.TableDescriptor.RecordFilters"/> for filter criteria.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.Table.FilteredRecords"/> property
            of a <see cref="T:Syncfusion.Grouping.Table"/> object. <para/>
            The collection
            provides support for determining a record's position in the grouped table using the <see cref="M:Syncfusion.Grouping.RecordsInTableCollectionBase.IndexOf(Syncfusion.Grouping.Record)"/>
            method.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.Records">
            <summary>
            A Read-only collection of sorted <see cref="T:Syncfusion.Grouping.Record"/> elements that are children of a <see cref="T:Syncfusion.Grouping.Table"/>.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.Table.Records"/> property
            of a <see cref="T:Syncfusion.Grouping.Table"/> object. This collection contains all records, it is not filtered. <para/>
            The collection
            provides support for determining a record's position in the grouped table using the <see cref="M:Syncfusion.Grouping.RecordsInTableCollectionBase.IndexOf(Syncfusion.Grouping.Record)"/>
            method.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.SelectedRecords">
            <summary>
            A collection of selected <see cref="T:Syncfusion.Grouping.Record"/> elements that are children of a <see cref="T:Syncfusion.Grouping.Table"/>.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.SelectedRecordsChanging">
            <summary>
            Occurs before the <see cref="P:Syncfusion.Grouping.Table.SelectedRecords"/> collection is modified.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.SelectedRecordsChanged">
            <summary>
            Occurs after the <see cref="P:Syncfusion.Grouping.Table.SelectedRecords"/> collection was modified.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.UnsortedRecords">
            <summary>
            A collection of unsorted <see cref="T:Syncfusion.Grouping.Record"/> elements that are children of a <see cref="T:Syncfusion.Grouping.Table"/> and
            represent the original records in the same order as the underlying data source. The collection
            provides support for determining a record's underlying position in the datasource using the <see cref="M:Syncfusion.Grouping.UnsortedRecordsCollection.IndexOf(Syncfusion.Grouping.Record)"/>
            method.<para/>
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.Table.UnsortedRecords"/> property
            of a <see cref="T:Syncfusion.Grouping.Table"/> object.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.PrimaryKeySortedRecords">
            <summary>
            A collection of "sorted by PrimaryKey" <see cref="T:Syncfusion.Grouping.Record"/> elements that are children of a <see cref="T:Syncfusion.Grouping.Table"/> and
            represent the original records in the same order as the underlying data source. The collection
            provides support for determining a record's underlying position in the datasource using the <see cref="M:Syncfusion.Grouping.PrimaryKeySortedRecordsCollection.IndexOf(System.String)"/>
            method.<para/>
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.Table.PrimaryKeySortedRecords"/> property
            of a <see cref="T:Syncfusion.Grouping.Table"/> object.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.TopLevelGroup">
            <summary>
            Gets the main top-level group for the table. The <see cref="P:Syncfusion.Grouping.Table.TopLevelGroup"/> is a <see cref="T:Syncfusion.Grouping.ChildTable"/>
            which is derived from <see cref="T:Syncfusion.Grouping.Group"/>.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.DefaultYAmountChanged">
            <summary>
            Occurs when the <see cref="M:Syncfusion.Grouping.Table.RaiseDefaultYAmountChanged"/> is called.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.DefaultSummaryRowHeight">
            <summary>
            Gets / sets the default height (YAmount) of summary rows.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.DefaultRecordRowHeight">
            <summary>
            Gets / sets the default height (YAmount) of record rows.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.DefaultRecordPreviewRowHeight">
            <summary>
            Gets / sets the default height (YAmount) of record preview rows.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.DefaultCaptionRowHeight">
            <summary>
            Gets / sets the default height (YAmount) of group caption rows.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.DefaultColumnHeaderRowHeight">
            <summary>
            Gets / sets the default height (YAmount) of column header rows.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.DefaultEmptySectionHeight">
            <summary>
            Gets / sets the default height (YAmount) of empty section rows.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.DefaultGroupHeaderSectionHeight">
            <summary>
            Gets / sets the default height (YAmount) of group header sections.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.DefaultGroupFooterSectionHeight">
            <summary>
            Gets / sets the default height (YAmount) of group footer sections.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.DefaultGroupPreviewSectionHeight">
            <summary>
            Gets / sets the default height (YAmount) of group preview rows.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.DefaultFilterBarRowHeight">
            <summary>
            Gets / sets the default height (YAmount) of filter bar rows.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.DefaultIndentWidth">
            <summary>
            Gets / sets the default width of group indents.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.DefaultRowHeaderWidth">
            <summary>
            Gets / sets the default width of row headers.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.DefaultTableIndentWidth">
            <summary>
            Gets / sets the default width of table indents.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.TableDirty">
            <summary>
            Gets / sets a value indicating if the table is marked as dirty. If a table is marked dirty, any subsequent
            access to child elements (and a resulting <see cref="M:Syncfusion.Grouping.Element.OnEnsureInitialized(System.Object)"/> call) will trigger
            recategorization of all records in the table.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.SettingTableDirty">
            <summary>
            A debug helper to be able to see call stack when table is set dirty.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.CountersDirty">
            <summary>
            Gets / sets a value indicating if the counters are marked as dirty. If a table has counters marked dirty,
            any subsequent access to child elements (and a resulting <see cref="M:Syncfusion.Grouping.Element.OnEnsureInitialized(System.Object)"/> call) will trigger
            a <see cref="M:Syncfusion.Grouping.Table.InvalidateCounterTopDown(System.Boolean)"/> call and force reevaluation of all counters for all elements in the table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.SummariesDirty">
            <summary>
            Gets / sets a value indicating if summaries are marked as dirty. If a table has summaries marked dirty,
            any subsequent access to child elements (and a resulting <see cref="M:Syncfusion.Grouping.Element.OnEnsureInitialized(System.Object)"/> call) will trigger
            a <see cref="M:Syncfusion.Grouping.Table.InvalidateSummariesTopDown"/> call and force reevaluation of all summaries for all elements in the table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.SourceListVersion">
            <summary>
            The source list version. The version is increased each time a change in a record in the datasource
            is detected.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.SourceListAllowNew">
            <summary>
            Determines if the source list allows adding new records.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.SourceListAllowRemove">
            <summary>
            Determines if the source list allows removing records.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.SourceListAllowEdit">
            <summary>
            Determines if the source list allows editing records.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.HasSourceList">
            <summary>
            Determines if a source has been attached to the table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.SourceList">
            <summary>
            Gets / sets a reference to the source list.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.InSetSourceList">
            <summary>
            Returns True when SourceList setter was called and False after SourceList setter returns.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.InSourceListChanged">
            <summary>
            Returns True when the SourceListChanged event is raised and False after it returns.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.SourceListChanged">
            <summary>
            Occurs after the datasource is replaced.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.RecordValueChanging">
            <summary>
            Occurs when a RecordFieldCell cell's value is changed and before Record.SetValue is called.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.RecordValueChanged">
            <summary>
            Occurs when a RecordFieldCell cell's value is changed and after Record.SetValue returns.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.LastChangedRecord">
            <summary>
            Gets a reference to the most recently changed record.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.LastAddNewIndex">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Grouping.Table.InSourceListListChangedHandler">
            <summary>
            Returns True while handling.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.InInitialize">
            <summary>
            Returns True while records are categorized; False after.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.CategorizeElementsVersion">
            <summary>
            Property CategorizeElementsVersion (int).
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.PassThroughGroupingResult">
            <summary>
            Gets the PassThroughGroupingResult for the table.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.IsPassThroughGrouping">
            <summary>
            Gets the value of ispassthrough grouping
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.AllowInitChildTableInAdjustRecordRowCount">
            <summary>
            Record.AdjustRecordRowCount will check this property before creating
            and populating child tables for nested tables. Property is false
            when the nested collections should only be accessed and popuplated on demand.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.AllowTracing">
            <summary>For internal use.</summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Grouping.Table.TableDirtyOnItemChanged">
            <summary>
            Set TableDirty to true for all the tables(Including nested table) when item changed
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.RecordsAsDisplayElements">
            <summary>
            Set this True if you do not want the engine to treat Record and ColumnHeaderSection
            elements as ContainerElements and instead have these elements be returned as
            a display element in the Table.DisplayElements collection.
            </summary>
            <remarks>
            With a GridGroupingControl, you must not change this property since a GridGroupingControl
            relies on the behavior that a record is not a display element but a container for rows
            and nested tables.
            </remarks>
        </member>
        <member name="P:Syncfusion.Grouping.Table.WithoutCounter">
            <summary>
            Gets or sets the value of withoutcounter
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.VirtualMode">
            <summary>
            Gets or sets the value of virtual mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.IsSorting">
            <summary>For internal use.</summary>
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Grouping.Table.ChildTableGroupLevelCount">
            <summary>
            Returns the sum of TableDescriptor.RelationChildColumns.Count and TableDescriptor.GroupedColumns.Count.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.FilteredChildTableOrTopLevelGroup">
            <summary>
            Gets the <see cref="P:Syncfusion.Grouping.Table.FilteredChildTable"/>, if any or the <see cref="P:Syncfusion.Grouping.Table.TopLevelGroup"/> if <see cref="P:Syncfusion.Grouping.Table.FilteredChildTable"/> is null.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.FilteredChildTable">
            <summary>
            Gets / sets a ChildTable. Setting this property forces the DisplayElements collection
            to return elements only for a specific child table. This property
            is used by the GridGroupingControl to quickly switch the context of table between child tables
            of different parent records when hierarchical data are displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.AllowThreading">
            <internalonly/>
            <summary>
            Experimental only! Set this to True if you want count to be calculated in a separate thread when all records
            are categorized. Set this flag only if you have a real multi-processor system. With single
            processor, systems calculating counts in a separate thread slows categorizaton down.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.RemovingRelatedTable">
            <summary>
            Occurs after the related table was removed from the <see cref="P:Syncfusion.Grouping.Table.RelatedTables"/> collection.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.AddedRelatedTable">
            <summary>
            Occurs after the related table was added to the <see cref="P:Syncfusion.Grouping.Table.RelatedTables"/> collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.RelatedTables">
            <summary>
            Gets a collection of related tables based on the TableDescriptor.Relations
            defined for this table.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.DisplayElementChanging">
            <summary>
            When number of visible elements are changing.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.DisplayElementChanged">
            <summary>
            When number of visible elements were changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.QueryCustomCount">
            <summary>
            Occurs when the custom counter value for a record is queried. See the Grid\Grouping\Samples\CustomSummary
            example.
            </summary>
        </member>
        <member name="E:Syncfusion.Grouping.Table.QueryVisibleCustomCount">
            <summary>
            Occurs when the visible custom counter value for a record is queried. See the Grid\Grouping\Samples\CustomSummary
            example.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.HasColumnChangeListener">
            <summary>
            Determines whether the table has subscribed to DataTable.ColumnChanging
            or IGroupingColumnChanging events of the datasource.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.ChangedFieldsArray">
            <summary>
            The Collection with detected changes in the datasource when a ListChanged event
            is handled.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.LockOutEnsureInitialized">
            <summary>For internal use.</summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Grouping.Table.StartIndex">
            <summary>
            Gets or sets the value of Starting index.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.Table.EndIndex">
            <summary>
            Gets or sets the value of end index
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.GroupingListChangedEvents.None">
            <summary>
            Represents None
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.GroupingListChangedEvents.SourceListListChanged">
            <summary>
            Represents SourceListListChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.GroupingListChangedEvents.SourceListListChangedCompleted">
            <summary>
            Represents SourceListListChangedCompleted
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.GroupingListChangedEvents.SourceListRecordChanging">
            <summary>
            Represents SourceListRecordChanging 
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.GroupingListChangedEvents.SourceListRecordChanged">
            <summary>
            Represents SourceListRecordChanged
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.ITableProvider">
            <summary>
            Provides a <see cref="M:Syncfusion.Grouping.ITableProvider.GetTable"/> method that returns a <see cref="T:Syncfusion.Grouping.Table"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ITableProvider.GetTable">
            <summary>
            Returns a <see cref="T:Syncfusion.Grouping.Table"/>
            </summary>
            <returns>returns Table</returns>
        </member>
        <member name="T:Syncfusion.Grouping.Int32ToStringDictionary">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Grouping.ChangedFieldInfoCollection">
            <summary>
            The Collection with detected changes in the datasource when a ListChanged event
            is handled.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ChangedFieldInfoCollection.Item(System.Int32)">
            <summary>
            Gets or sets the ChangeFieldInfo at given index.
            </summary>
            <param name="index">Index to identify the requested item.</param>
        </member>
        <member name="T:Syncfusion.Grouping.ChangedFieldInfo">
            <summary>
            Provides details about the changes made to a column at the time
            the ListChanged event is handled in the engine. 
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.ChangedFieldInfo.#ctor(Syncfusion.Grouping.TableDescriptor,System.String)">
            <summary>
            Initializes a new instance of the <see
            cref="T:Syncfusion.Grouping.ChangedFieldInfo">ChangedFieldInfo</see> class.
            </summary>
            <param name="tableDescriptor">The table descriptor.</param>
            <param name="name">Field name.</param>
        </member>
        <member name="M:Syncfusion.Grouping.ChangedFieldInfo.#ctor(Syncfusion.Grouping.TableDescriptor,System.String,System.Object,System.Object,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Grouping.ChangedFieldInfo">ChangedFieldInfo</see> class. 
            </summary>
            <param name="tableDescriptor">The table descriptor.</param>
            <param name="name">The Field name.</param>
            <param name="oldValue">The Old value.</param>
            <param name="newValue">The New value</param>
            <param name="delta">Difference between new and old values.</param>
        </member>
        <member name="M:Syncfusion.Grouping.ChangedFieldInfo.#ctor(Syncfusion.Grouping.TableDescriptor,System.String,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Grouping.ChangedFieldInfo">ChangedFieldInfo</see> class. 
            </summary>
            <param name="tableDescriptor">The table descriptor.</param>
            <param name="name">Field name.</param>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:Syncfusion.Grouping.ChangedFieldInfo.SetValues(System.Object,System.Object)">
            <summary>
            Sets old and new values.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="P:Syncfusion.Grouping.ChangedFieldInfo.TableDescriptor">
            <summary>
            Gets the table descriptor.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ChangedFieldInfo.Name">
            <summary>
            Gets the field name.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ChangedFieldInfo.Delta">
            <summary>
            Gets the difference between new and old values.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ChangedFieldInfo.OldValue">
            <summary>
            Gets or sets old value.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ChangedFieldInfo.NewValue">
            <summary>
            Gets or sets new value.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ChangedFieldInfo.HasValue">
            <summary>
            Specifies whether it has a value.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.ChangedFieldInfo.FieldIndex">
            <summary>
            Gets the index of the field.
            </summary>
        </member>
        <member name="T:Syncfusion.Grouping.TableCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Grouping.Table"/> elements that are children of a parent <see cref="T:Syncfusion.Grouping.Table"/>.
            An instance of this collection is returned by the <see cref="P:Syncfusion.Grouping.Table.RelatedTables"/> property
            of a <see cref="T:Syncfusion.Grouping.Table"/> object. The collection is internally populated from criteria specified
            with the <see cref="P:Syncfusion.Grouping.TableDescriptor.Relations"/> collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Grouping.TableCollection.Empty">
            <summary>
            A Read-only and empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableCollection.Dispose">
            <summary>
            Disposes of the object and resets references to objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableCollection.#ctor(Syncfusion.Grouping.Table)">
            <summary>
            Initializes the collection that belongs to the specified parent table.
            </summary>
            <param name="parentTable">The table this collection belongs to.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableCollection.#ctor(Syncfusion.Grouping.Table,System.Collections.ArrayList)">
            <summary>
            Initializes the collection that belongs to the specified parent table.
            </summary>
            <param name="parentTable">The table this collection belongs to.</param>
            <param name="inner">The inner list that should be attached to this collection.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableCollection.AddRange(Syncfusion.Grouping.Table[])">
            <summary>
            Adds multiple elements at the end of the collection.
            </summary>
            <param name="tables">The array whose elements should be added to the end of the collection. 
            The array and its elements cannot be NULL references (Nothing in Visual Basic). 
            </param>
        </member>
        <member name="M:Syncfusion.Grouping.TableCollection.Contains(System.String)">
            <summary>
            Determines if the element with the specified name belongs to this collection.
            </summary>
            <param name="name">The name of the element to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableCollection.IndexOf(System.String)">
            <summary>
            Searches for the element with the specified name.
            </summary>
            <param name="name">The name of the element to locate in the collection. </param>
            <returns>The zero-based index of the occurrence of the element with matching name within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableCollection.IndexOfNestedTable(System.String)">
            <summary>
            Searches for the element with the specified name.
            </summary>
            <param name="name">The name of the element to locate in the collection. </param>
            <returns>The zero-based index of the occurrence of the element with matching name within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableCollection.Contains(Syncfusion.Grouping.Table)">
            <summary>
            Determines if the element belongs to this collection.
            </summary>
            <param name="value">The Object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise, False.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableCollection.IndexOf(Syncfusion.Grouping.Table)">
            <summary>
            Returns the zero-based index of the occurrence of the element in the collection.
            </summary>
            <param name="value">The element to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the element within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableCollection.CopyTo(Syncfusion.Grouping.Table[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Grouping.TableCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.Grouping.TableCollection.Insert(System.Int32,Syncfusion.Grouping.Table)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="value">The element to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.Grouping.TableCollection.Remove(Syncfusion.Grouping.Table)">
            <summary>
            Removes the specified element from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableCollection.Add(Syncfusion.Grouping.Table)">
            <summary>
            Adds a table to the end of the collection.
            </summary>
            <param name="value">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Grouping.TableCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection
            </summary>
            <param name="index">The zero-based index of the element to remove. </param>
        </member>
        <member name="M:Syncfusion.Grouping.TableCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableCollection.SynchronizeWithRelationDescriptor">
            <summary>
            Adds or removes tables from this collection if the table descriptor or relation
            descriptor is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableCollection.Item(System.Int32)">
            <summary>
            Gets / sets the element at the zero-based index.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableCollection.Item(System.String)">
            <summary>
            Gets the table with the specified name.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableCollection.IsReadOnly">
            <summary>
            Returns True because this collection is always Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableCollection.IsFixedSize">
            <summary>
            Returns False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableCollection.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Grouping.TableCollection.Count">
            <summary>
            Gets the number of elements contained in the collection. The property also
            ensures that the collection is in sync with the underlying
            table if changes have been made to the table or the TableDescriptor.
            </summary>
            <remarks>
            If changes in the TableDescriptor are detected, the
            method will reinitialize the collection before returning the count.
            </remarks>
        </member>
        <member name="T:Syncfusion.Grouping.TableCollectionEnumerator">
            <summary>
            Enumerator class for <see cref="T:Syncfusion.Grouping.Table"/> items of a <see cref="T:Syncfusion.Grouping.TableCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableCollectionEnumerator.#ctor(Syncfusion.Grouping.TableCollection)">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.Grouping.TableCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Grouping.TableCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Grouping.TableCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
    </members>
</doc>
